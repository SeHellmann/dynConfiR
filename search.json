[{"path":"https://sehellmann.github.io/dynConfiR/articles/ModellingWorkflow.html","id":"for-dynconfir-version-1-0-0","dir":"Articles","previous_headings":"","what":"For dynConfiR version 1.0.0","title":"Illustration of the workflow for a modelling study using dynConfiR","text":"vignette illustrates whole workflow modelling study using dynConfiR package. detailed description package implemented models can found Hellmann et al. (preprint). basic workflow modelling study illustrated together respective functions implemented package following chart: Workflow modeling study using dynConfiR","code":"library(dynConfiR) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(magrittr) library(tidyr) #>  #> Attaching package: 'tidyr' #> The following object is masked from 'package:magrittr': #>  #>     extract"},{"path":"https://sehellmann.github.io/dynConfiR/articles/ModellingWorkflow.html","id":"step-0-data-preparation","dir":"Articles","previous_headings":"","what":"Step 0: Data preparation","title":"Illustration of the workflow for a modelling study using dynConfiR","text":"illustration, load ConfidenceOrientation dataset, contained dynConfiR package. dataset contains results orientation discrimination experiment simultaneous confidence judgments. data set includes results 16 participants 3 sessions . task identify orientation (horizontal (“waagrecht”) vertical (“senkrecht”)) grid briefly visible covered mask form checkerboard pattern. stimulus-onset-asynchrony (SOA) manipulated 5 steps. Confidence reported using joystick continuous visual analogue scale values -1 1. several steps data preparation, either necessary recommended. First, models implemented dynConfiR require confidence measured discrete scale, discretize contionuous confidence rating. using equidistant breaks. functions fine integer factor column, simply use cut function. Second, recommended exclude trials fast slow response times. using sharp threshold 300ms fast response times individual upper threshold participant equal mean plus three times standard deviation. addition, exclude participants showed guessing-level performance identification judgment, defined critical threshold binomial test. Finally, exclude participants, showed variation confidence judgments, defined reporting discrete confidence least 90% trials.","code":"data(\"ConfidenceOrientation\") data <- ConfidenceOrientation %>%   select(participant, SOA, stimulus, response, correct, rt, cont_rating) head(ConfidenceOrientation) #> # A tibble: 6 × 12 #>   participant session gender   age   SOA orientation stimulus  response  correct #>         <dbl>   <dbl> <chr>  <dbl> <dbl>       <dbl> <chr>     <chr>       <dbl> #> 1           1       1 w         23   8.3           0 senkrecht senkrecht       1 #> 2           1       1 w         23 133.           90 waagrecht senkrecht       0 #> 3           1       1 w         23  33.3           0 senkrecht senkrecht       1 #> 4           1       1 w         23  16.7          90 waagrecht senkrecht       0 #> 5           1       1 w         23 133.            0 senkrecht senkrecht       1 #> 6           1       1 w         23  16.7           0 senkrecht senkrecht       1 #> # ℹ 3 more variables: rt <dbl>, cont_rating <dbl>, disc_rating <dbl> head(data) #> # A tibble: 6 × 7 #>   participant   SOA stimulus  response  correct    rt cont_rating #>         <dbl> <dbl> <chr>     <chr>       <dbl> <dbl>       <dbl> #> 1           1   8.3 senkrecht senkrecht       1  2.89      -0.969 #> 2           1 133.  waagrecht senkrecht       0  3.06       0.817 #> 3           1  33.3 senkrecht senkrecht       1  2.83      -1     #> 4           1  16.7 waagrecht senkrecht       0  2.65      -1     #> 5           1 133.  senkrecht senkrecht       1  2.92       0.270 #> 6           1  16.7 senkrecht senkrecht       1  3.17      -0.992 data <- data %>%   mutate(confidence = cut(cont_rating, breaks = seq(-1, 1, length.out=6), include.lowest = TRUE,                           labels=1:5)) head(data) #> # A tibble: 6 × 8 #>   participant   SOA stimulus  response  correct    rt cont_rating confidence #>         <dbl> <dbl> <chr>     <chr>       <dbl> <dbl>       <dbl> <fct>      #> 1           1   8.3 senkrecht senkrecht       1  2.89      -0.969 1          #> 2           1 133.  waagrecht senkrecht       0  3.06       0.817 5          #> 3           1  33.3 senkrecht senkrecht       1  2.83      -1     1          #> 4           1  16.7 waagrecht senkrecht       0  2.65      -1     1          #> 5           1 133.  senkrecht senkrecht       1  2.92       0.270 4          #> 6           1  16.7 senkrecht senkrecht       1  3.17      -0.992 1 ### Exclusion of participants exclusion_crit <- data %>% group_by(participant) %>%   reframe(bad_performance = binom.test(sum(correct), n(), p=0.5, alternative=\"greater\")$p.value,           prob_mode_conf = max(table(confidence))/n()) %>%   mutate(bad_performance = bad_performance > 0.05,           no_conf_variation = prob_mode_conf>.90) print(t(exclusion_crit)) #>                        [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> participant       1.0000000 2.0000000 3.0000000 4.0000000 5.0000000 6.0000000 #> bad_performance   0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> prob_mode_conf    0.4092593 0.4277778 0.5709877 0.5425926 0.5290123 0.3641975 #> no_conf_variation 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #>                        [,7]      [,8]      [,9]     [,10]      [,11]      [,12] #> participant       7.0000000 8.0000000 9.0000000 10.000000 11.0000000 12.0000000 #> bad_performance   0.0000000 0.0000000 0.0000000  0.000000  0.0000000  0.0000000 #> prob_mode_conf    0.5246914 0.4981481 0.3641975  0.795679  0.6259259  0.4759259 #> no_conf_variation 0.0000000 0.0000000 0.0000000  0.000000  0.0000000  0.0000000 #>                        [,13]      [,14]      [,15]      [,16] #> participant       13.0000000 14.0000000 15.0000000 16.0000000 #> bad_performance    0.0000000  0.0000000  0.0000000  0.0000000 #> prob_mode_conf     0.6006173  0.4037037  0.4432099  0.5401235 #> no_conf_variation  0.0000000  0.0000000  0.0000000  0.0000000 excluded_parts <- exclusion_crit %>% filter(bad_performance | no_conf_variation) %>%    pull(participant) data <- data %>% filter(!participant %in% excluded_parts) ### Result: No participant was excluded  ### Exclusion of trials: nrow_tot <- nrow(data) data <- data %>% group_by(participant) %>%    filter((rt > 0.3) & (rt <mean(rt)+3*sd(rt))) cat(\"We excluded \", 1- nrow(data)/nrow_tot, \" of all trials because of RT's.\\n\") #> We excluded  0.01296296  of all trials because of RT's."},{"path":"https://sehellmann.github.io/dynConfiR/articles/ModellingWorkflow.html","id":"step-1-parameter-fitting","dir":"Articles","previous_headings":"","what":"Step 1: Parameter fitting","title":"Illustration of the workflow for a modelling study using dynConfiR","text":"fitting function expects data come tidy data frame, row representing one trial. data frame include following columns (expected column names parentheses): true stimulus identity (stimulus), binary decision response (response), categorical confidence judgment (rating), response time (rt). alternative stimulus response column, column accuracy (correct) may provided. addition, column experimental manipulation discriminability stimulus (condition) may included, SOA example. columns stimulus response possible values (“senkrecht” “waagrecht” case). Instead renaming columns data frame, alternative column names may added arguments form rating = \"confidence\", tell function confidence rating contained column confidence. Similarly, add argument condition=\"SOA\" identify column represents experimental manipulation. column named sbj, subject, participant used fit models independently individual subjects. Provided data prepared format desired models may fitted data one simple function call fitRTConfModels. possible specifications fitting procedure, like using single best parameter set (identified grid_search) using nAttempts=1 one optimization call (nRestarts=1) speed model fitting. diffusion-based models, argument restr_tau=\"simult_conf\" tells function amount post-decisional evidence accumulation naturally bound empirical response time, since confidence reported simultaneously identification judgment. following code, comment actual fitting call load pre-fitted parameters, fitting take time (1.5 hours 2.4GHz processor, given 20 cores available). can also include parameter restrictions models using fixed argument. example, starting point can fixed 0.5 implement assumption unbiased observers. race models (IRMt PCRMt), included specifying response thresholds accumulators equal (=\"b\"). unbiased observers, may reasonable assume confidence thresholds responses coincide (sym_thetas=TRUE). Also, -trial variabilities non-decision time starting point may set 0 (leads much faster fitting).","code":"# parfits <- fitRTConfModels(data, models=c(\"2DSD\", \"IRMt\"),  #                            restr_tau = \"simult_conf\",  #                            opts = list(nAttempts=1, nRestarts=1),  #                            logging = FALSE,  #                            parallel=\"models\", n.cores = 20, #                            condition=\"SOA\", rating=\"confidence\") # save(parfits, file=\"saved_parfits.RData\") load(\"ressources/saved_parfits.RData\") head(parfits) #>      model negLogLik    N  k      BIC     AICc      AIC #> 1 dynaViTE  3423.288 1587 24 7023.447 6895.283 6894.576 #> 2     2DSD  3566.387 1587 20 7280.166 7173.259 7172.774 #> 3     IRMt  3756.845 1587 19 7653.712 7552.126 7551.690 #> 4 dynaViTE  2833.633 1601 24 5844.348 5715.967 5715.266 #> 5     2DSD  3005.796 1601 21 6166.537 6054.123 6053.591 #> 6     IRMt  3152.874 1601 19 6445.937 6344.180 6343.748 #>                        fixed        t0       st0         v1         v2 #> 1           sym_thetas=FALSE 1.3424692 0.9359015 0.18269770 0.39655533 #> 2 sym_thetas=FALSE, lambda=0 0.0000000 0.9424488 0.01871128 0.21913645 #> 3           sym_thetas=FALSE 1.4305597 1.0771606 0.01381402 0.25913446 #> 4           sym_thetas=FALSE 0.0000000 1.2528076 0.06839356 0.29952115 #> 5 sym_thetas=FALSE, lambda=0 0.8677412 1.0621247 0.17089625 0.06500952 #> 6           sym_thetas=FALSE 1.4080804 1.5808275 0.03986083 0.21061357 #>          v3        v4       v5 thetaLower1 thetaLower2 thetaLower3  thetaLower4 #> 1 0.6972138 2.0676742 2.367748   0.5319406   0.7244282    1.052593 1.356565e+00 #> 2 0.5285474 1.7837465 2.285297   0.2457220   0.8414821    1.804069 2.640370e+00 #> 3 0.5684356 1.9681446 2.285918   0.8107486   1.0434087    1.467859 1.875711e+00 #> 4 0.5049240 1.1211837 1.427827   1.5183670   1.7745036    2.010324 1.000000e+24 #> 5 0.3130298 0.9364188 1.809277   2.1704956   2.6941202    3.114510 1.000000e+24 #> 6 0.4045930 1.1478456 2.459388   2.5641551   3.1989347    3.899690 1.000000e+24 #>   thetaUpper1 thetaUpper2 thetaUpper3  thetaUpper4        wrt      wint #> 1   0.2439791   0.5182875    0.992385 1.316834e+00         NA        NA #> 2  -0.5129848   0.3566307    1.756024 2.661897e+00         NA        NA #> 3   0.8384092   1.2394523    2.026483 2.568221e+00 0.06619651 0.9338035 #> 4   1.4258496   1.6555371    1.901753 1.000000e+24         NA        NA #> 5   2.0613721   2.5446263    2.887283 1.000000e+24         NA        NA #> 6   2.4926748   2.9529658    3.601922 1.000000e+24 0.00000000 0.8425240 #>         wx         b         a         z           sz         sv       tau #> 1       NA        NA 1.7443862 0.5932128 3.956088e-01 0.84324524 0.1123153 #> 2       NA        NA 1.6865064 0.5916077 1.481742e-06 0.66848076 1.4331155 #> 3 0.000000 0.5886599 0.7630233        NA           NA         NA        NA #> 4       NA        NA 1.7026228 0.5128777 7.930835e-01 0.00149642 1.4352690 #> 5       NA        NA 1.9316822 0.5116397 9.349912e-01 0.24087906 0.6161631 #> 6 0.157476 0.5331864 0.5520089        NA           NA         NA        NA #>           w         svis    sigvis    lambda participant #> 1 0.4829751 1.154609e-06 0.7349314 0.6103222           1 #> 2        NA           NA        NA 0.0000000           1 #> 3        NA           NA        NA        NA           1 #> 4 0.2182938 1.732596e-02 0.2311835 0.7750507          10 #> 5        NA           NA        NA 0.0000000          10 #> 6        NA           NA        NA        NA          10 # parfits_restricted <- fitRTConfModels(data, models=c(\"dynaViTE\", \"2DSD\"),  #                            restr_tau = \"simult_conf\",  #                            fixed = list(sym_thetas=TRUE, z=0.5, sz=0, st0=0),  #                            opts = list(nAttempts=1, nRestarts=1),  #                            logging = FALSE,  #                            parallel=\"models\", n.cores = 20, #                            condition=\"SOA\", rating=\"confidence\") # save(parfits_restricted, file=\"saved_parfits_restricted.RData\") load(\"ressources/saved_parfits_restricted.RData\") parfits_restricted$model <-  paste0(parfits_restricted$model, \"_restricted\") head(parfits_restricted) #>                 model negLogLik    N  k      BIC     AICc      AIC #> 1 dynaViTE_restricted  3782.012 1587 17 7689.308 7598.371 7598.024 #> 2     2DSD_restricted  3927.596 1587 13 7950.998 7881.391 7881.193 #> 3 dynaViTE_restricted  3104.807 1601 17 6335.046 6243.957 6243.613 #> 4     2DSD_restricted  3282.036 1601 13 6659.991 6590.269 6590.072 #> 5 dynaViTE_restricted  3145.554 1602 17 6416.552 6325.452 6325.109 #> 6     2DSD_restricted  3591.284 1602 13 7278.495 7208.765 7208.568 #>                                           fixed        t0 st0          v1 #> 1           sym_thetas=TRUE, z=0.5, sz=0, st0=0 0.9769269   0 0.104220678 #> 2 sym_thetas=TRUE, z=0.5, sz=0, st0=0, lambda=0 0.0000000   0 0.004605967 #> 3           sym_thetas=TRUE, z=0.5, sz=0, st0=0 0.0000000   0 0.051849765 #> 4 sym_thetas=TRUE, z=0.5, sz=0, st0=0, lambda=0 0.0000000   0 0.032984315 #> 5           sym_thetas=TRUE, z=0.5, sz=0, st0=0 0.0000000   0 0.000000000 #> 6 sym_thetas=TRUE, z=0.5, sz=0, st0=0, lambda=0 0.0000000   0 0.025194867 #>          v2        v3        v4        v5       theta1    theta2    theta3 #> 1 0.2274269 0.3946561 1.0985194 1.2429055  0.203665481 0.4060153 0.7559468 #> 2 0.1472463 0.3580550 1.1412923 1.3908756 -0.004910317 0.5852685 1.5533554 #> 3 0.1693557 0.3216821 0.6569603 0.8039947  0.957901992 1.0780363 1.1971126 #> 4 0.1069910 0.2163189 0.6577729 1.2179978  2.882317755 3.6263226 4.4925305 #> 5 0.0000000 0.1097628 0.4804683 0.8395739  0.321829888 0.4251862 0.5035269 #> 6 0.0000000 0.0000000 0.5820335 1.3844089  1.890613073 2.2985357 2.6199404 #>         theta4        a   z sz           sv       tau          w         svis #> 1 1.014019e+00 2.308885 0.5  0 1.593695e-06 0.4740562 0.41781718 1.000000e-06 #> 2 2.233444e+00 2.321753 0.5  0 4.945559e-06 1.4519430         NA           NA #> 3 1.000000e+24 2.346478 0.5  0 1.230765e-06 1.4024472 0.19285450 1.000000e-06 #> 4 1.000000e+24 2.377583 0.5  0 0.000000e+00 1.4057496         NA           NA #> 5 6.588504e-01 2.046277 0.5  0 9.477280e-07 1.3960523 0.08876062 5.945011e-06 #> 6 3.351139e+00 2.082824 0.5  0 0.000000e+00 1.3993972         NA           NA #>       sigvis    lambda participant #> 1 0.43166559 0.5964927           1 #> 2         NA 0.0000000           1 #> 3 0.07597196 0.7374815          10 #> 4         NA 0.0000000          10 #> 5 0.17308645 1.1844435          11 #> 6         NA 0.0000000          11"},{"path":"https://sehellmann.github.io/dynConfiR/articles/ModellingWorkflow.html","id":"step-2-quantitative-model-comparison","dir":"Articles","previous_headings":"","what":"Step 2: Quantitative model comparison","title":"Illustration of the workflow for a modelling study using dynConfiR","text":"Quantitative model comparison often based difference information criteria, like BIC AIC. package includes two important functions compare model fits quantitatively. First, individual level, one may compute model weights based information criteria, using function subject_modelweights. allows investigate individual variability group comparisons studies individual differences. also possible calculate individual Bayes Factors, sometimes easier interpret. Second, calculate group averages, function group_BMS_fits performs Bayesian model selection based random effects model model weights (see Dauzineau et al., 2014, detail). function also provides output fixed effects model, equivalent adding individual BIC differences (multiplying individual Bayes Factors), however, recommend random effects model weight. also possible calculate Bayes Factors binary comparison using output comparison two models, , rather seldom, output formatted multiple models. example, first visualize BIC values across different models (lines participant). already see dynaViTE model lowest BIC participants IRMt performs worse. , apply subject_modelweights function visualize individual model weights. plot shows individual subject, dynaViTE performs clearly better. Accordingly, protected exceedence probability (PEP) clearly favours dynaViTE model group-level comparison.","code":"all_parfits <- bind_rows(parfits, parfits_restricted) ggplot(all_parfits, aes(x=model, y=BIC))+   geom_violin()+geom_line(aes(group=participant)) individual_weights <- subject_modelweights(all_parfits) print(head(individual_weights)) #>           2DSD 2DSD_restricted dynaViTE dynaViTE_restricted          IRMt #> 1 1.795365e-56   3.844859e-202        1       2.571276e-145 1.379280e-137 #> 2 6.185979e-71    8.501866e-96        1        1.345557e-16 4.959842e-210 #> 3 2.151030e-31   1.053002e-288        1       2.962021e-239 3.244526e-112 #> 4 9.873734e-60   1.296667e-116        1        1.372067e-31 1.612462e-208 #> 5 4.312211e-51    1.316465e-92        1        1.669803e-24 2.841928e-243 #> 6 3.239234e-46   5.120792e-123        1        6.288945e-67 1.385392e-158 #>   participant #> 1           1 #> 2          10 #> 3          11 #> 4          12 #> 5          13 #> 6          14 individual_weights %>% pivot_longer(cols=1:5, names_to=\"Model\", values_to=\"Model weight\") %>%    ggplot(aes(x=as.factor(participant), y=`Model weight`, fill=Model))+   geom_bar(stat=\"identity\") group_weights <- group_BMS_fits(all_parfits) print(head(group_weights$model_weights)) #>                     alpha          r     ep    pep fx_prob #> 2DSD                    2 0.09523810 0.0003 0.0003       0 #> 2DSD_restricted         1 0.04761905 0.0000 0.0000       0 #> dynaViTE               16 0.76190476 0.9997 0.9997       1 #> dynaViTE_restricted     1 0.04761905 0.0000 0.0000       0 #> IRMt                    1 0.04761905 0.0000 0.0000       0"},{"path":"https://sehellmann.github.io/dynConfiR/articles/ModellingWorkflow.html","id":"step-3-model-checks-predictions-and-visual-comparison","dir":"Articles","previous_headings":"","what":"Step 3: Model Checks: Predictions and visual comparison","title":"Illustration of the workflow for a modelling study using dynConfiR","text":"Checking whether best-fitting model (model) can actually account observed data important step every modelling study. Sometimes, particular data pattern core study, even , always check, whether model can sufficiently account key data patterns, e.g. relationship discriminability confidence. Predictions group-level can computed two different ways. First, possible aggregate fitted parameters (using mean oder median) first compute predictions group-level parameters. However, recommend second way: Computing predicted distributions individual respective parameters aggregate predictions way empirical data. think general give robust results, computing mean parameters independently ignores possible interactions parameters outcomes. can directly use output fitting function compute predictions fitted parameters individual using function predictConfModels (discrete response distributions) predictRTModels (response time density). predicted distributions may visually compared empirical distributions check accurately model fits data. Therefore, transform condition column prediction data sets fit one empirical data. Afterward, use different aggregations visualize different aspects data. First increase response accuracy increasing SOA:  Next, inspect relationship task difficulty confidence modulation accuracy. see data shows increase confidence longer SOA’s correct incorrect decisions. dynaViTE model model produces behavior model fits.  comes response times important use way aggregation empirical data predictions. want compute response time quantiles trials put one set, depending accuracy confidence rating accuracy SOA, respectively. get equivalent quantiles prediction, densities different values response times, compute weighted average densities weights equal relative proportion data respective participant. computing quantiles given densities (probability density function; pdf), dynConfiR package offers PDFtoQuantiles function, computes quantiles column rt determined column dens subgroup data determined columns present. following situation, get quantiles model, accuracy, confidence rating independently: Similarly, can visualize response time distribution different levels SOA manipulation.","code":"# predictedResponses <-  #   predictConfModels(parfits, simult_conf = TRUE)  # predictedRTdist <- #   predictRTModels(parfits, maxrt=9, simult_conf=TRUE) # save(predictedResponses, predictedRTdist, file=\"predictions.RData\") load(\"ressources/predictions.RData\") print(head(predictedResponses)) #>   condition stimulus response correct rating            p info          err #> 1         1        1        1       1      1 0.1257439758   OK 1.319106e-05 #> 2         2        1        1       1      1 0.0950783463   OK 1.204739e-05 #> 3         3        1        1       1      1 0.0571920690   OK 1.048219e-05 #> 4         4        1        1       1      1 0.0016623426   OK 4.351961e-06 #> 5         5        1        1       1      1 0.0007121333   OK 3.246739e-06 #> 6         1       -1        1       0      1 0.1151017976   OK 1.362677e-05 #>      model participant #> 1 dynaViTE           1 #> 2 dynaViTE           1 #> 3 dynaViTE           1 #> 4 dynaViTE           1 #> 5 dynaViTE           1 #> 6 dynaViTE           1 print(head(predictedRTdist)) #>   condition stimulus response correct rating         rt dens    model #> 1         1        1        1       1      1 0.00000000    0 dynaViTE #> 2         1        1        1       1      1 0.09090909    0 dynaViTE #> 3         1        1        1       1      1 0.18181818    0 dynaViTE #> 4         1        1        1       1      1 0.27272727    0 dynaViTE #> 5         1        1        1       1      1 0.36363636    0 dynaViTE #> 6         1        1        1       1      1 0.45454545    0 dynaViTE #>   participant #> 1           1 #> 2           1 #> 3           1 #> 4           1 #> 5           1 #> 6           1 predictedResponses <- mutate(predictedResponses, SOA = factor(condition, labels=sort(unique(data$SOA)))) predictedRTdist <- mutate(predictedRTdist, SOA = factor(condition, labels=sort(unique(data$SOA)))) data <- mutate(data, SOA= factor(SOA, levels=sort(unique(SOA)))) ###########    Plot accuracies    ####### Data_Acc <- data %>% group_by(participant, SOA) %>%   summarise(Acc = mean(correct), .groups=\"drop\") %>%   summarise(Acc = mean(Acc), .by = SOA) %>% mutate(SOA=as.factor(SOA)) Preds_Acc <- predictedResponses %>%    group_by(participant, model, SOA) %>%   reframe(Acc = sum(p*correct)/(2))%>%    group_by(model, SOA) %>%   reframe(Acc = mean(Acc))    ## Figure: Plot of Fitted Accuracy                    ---- p_Acc <- ggplot(Data_Acc, aes(x=SOA, y=Acc)) +   geom_line(data=Preds_Acc, aes(linetype=\"Predicted\", group=model), linewidth=1)+   geom_point(aes(shape=\"Observed\"), fill=\"white\")+   facet_wrap(.~model, nrow=1)+ ylab(\"Mean Accuracy\")+   scale_linetype_manual(name=\"\", values=1) +   scale_shape_manual(values=c(21),name = \"\")  +   guides(shape=guide_legend(order=3), color=guide_legend(order=3))+   theme_bw() +   theme(legend.position = \"right\", panel.spacing=unit(0, \"lines\")) p_Acc two_colors_correct <- c(\"#1b9e77\", \"#fc8d62\")  ###### Plot mean confidence ratings across conditions and accuracy    ##### Data_MRating_corr_cond_part <- data %>%    group_by(participant, SOA, correct) %>%   reframe(meanRating = mean(as.numeric(confidence))) Data_MRating_corr_cond <- Data_MRating_corr_cond_part %>%    reframe(meanRating=mean(meanRating),.by=c(SOA, correct)) %>%   mutate(SOA=as.factor(SOA), correct=as.factor(correct)) Preds_MRating_corr_cond <- predictedResponses %>%    group_by(model, participant, SOA, correct) %>%   reframe(meanRating = sum(p*rating)/(sum(p))) %>%   reframe(meanRating = mean(meanRating), .by = c(model, SOA, correct)) %>%   mutate(correct=as.factor(correct))  ggplot(Data_MRating_corr_cond,                     aes(x=SOA, y=meanRating, group = correct, shape=correct)) +   geom_line(data=Preds_MRating_corr_cond, aes(color=correct), linewidth=0.8)+   geom_point(fill=\"white\", size=1.8)+ ylab(\"Mean Confidence\")+   facet_wrap(.~model, nrow=1)+ #, dir=\"v\"   scale_color_manual(values= two_colors_correct, breaks=c(1,0),                      name = \"Predicted\", labels=c(\"Correct\", \"Wrong\")) +   scale_fill_manual(values= two_colors_correct, breaks=c(1,0),                     name = \"Predicted\", labels=c(\"Correct\", \"Wrong\")) +   scale_shape_manual(values=c(21,17),breaks=c(1,0),                      name = \"Observed\", labels=c(\"Correct\", \"Wrong\"))  +   theme_bw() +   theme(legend.position = \"right\", panel.spacing=unit(0, \"lines\"),         axis.text.x = element_text(angle=30)) Ns_part <- data %>%    group_by(participant) %>%    reframe(N=n(), MinRT = min(rt))  %>%   select(participant, N) Preds_RTdens_corr_cond_rating <- predictedRTdist %>%    left_join(Ns_part, by=\"participant\") %>%   group_by(rating, SOA, model, correct, rt) %>%   reframe(dens = sum(dens*N)/nrow(data)) # Reaction Time Quantiles of the Data grouped by rating and accuracy   Data_RTQuants_corr_rating <- data %>%    mutate(rating=confidence) %>%    group_by(rating, correct) %>%   reframe(p=c(.1,.5,.9), q = quantile(rt, probs = c(.1,.5,.9)))   ### g) Prediction response time quantiles                ---- Preds_RTQuants_corr_rating <- Preds_RTdens_corr_cond_rating %>%    group_by(model, rt, correct, rating) %>%   reframe(dens = mean(dens)) %>%   PDFtoQuantiles(p=c(.1,.5,.9))   ## Figure 7: RTQuantiles accross correct X rating          ---- ggplot()+   geom_line(data=mutate(Preds_RTQuants_corr_rating,                          correct=factor(correct, labels=c(\"Wrong\", \"Correct\")),                         rating = as.factor(rating)),             aes(x=rating, y=log(q), group=as.factor(p),color=correct), linewidth=0.7)+   geom_point(data=mutate(Data_RTQuants_corr_rating,                           correct=factor(correct, labels=c(\"Wrong\", \"Correct\")),                          rating = as.factor(rating)),              aes(x=rating, y=log(q), shape=correct),              size=1.2, fill=\"white\")+   scale_color_manual(values= two_colors_correct, breaks=c(\"Correct\", \"Wrong\"),                      name = \"Predicted\", labels=c(\"Correct\", \"Wrong\")) +   scale_shape_manual(values=c(21,17),breaks=c(\"Correct\", \"Wrong\"),                      name = \"Observed\", labels=c(\"Correct\", \"Wrong\"))  +   scale_x_discrete(name=\"Confidence rating\", breaks=1:5)+   scale_y_continuous(name=\"Reaction time quantiles [s] (log scaled)\")+   facet_grid(model ~correct)+ #correct~model   theme_bw() +   theme(legend.box = \"horizontal\", legend.position = \"bottom\",         legend.direction = \"horizontal\",         panel.spacing=unit(0, \"lines\")) # Reaction Time Quantiles of the Data grouped by SOA and accuracy   Data_RTQuants_corr_cond <- data %>%   group_by(SOA, correct) %>%   reframe(p=c(.1,.5,.9), q = quantile(rt, probs = c(.1,.5,.9)))  ### Prediction response time quantiles  Preds_RTQuants_corr_cond <-   Preds_RTdens_corr_cond_rating %>%   group_by(model, rt, correct, SOA) %>%   reframe(dens = sum(dens)) %>%   PDFtoQuantiles(p=c(.1,.5,.9))  ## Figure 7: RTQuantiles accross correct X SOA          ---- ggplot()+   geom_line(data=mutate(Preds_RTQuants_corr_cond, correct=factor(correct, labels=c(\"Wrong\", \"Correct\")),                         SOA = as.factor(SOA)),             aes(x=SOA, y=log(q), group=as.factor(p),color=correct), linewidth=0.7)+   geom_point(data=mutate(Data_RTQuants_corr_cond, correct=factor(correct, labels=c(\"Wrong\", \"Correct\")),                          SOA = as.factor(SOA)),              aes(x=SOA, y=log(q), shape=correct),              size=1.2, fill=\"white\")+   scale_color_manual(values= two_colors_correct, breaks=c(\"Correct\", \"Wrong\"),                      name = \"Predicted\",                      labels=c(\"Correct\", \"Wrong\")) +   scale_shape_manual(values=c(21,17),breaks=c(\"Correct\", \"Wrong\"),                      name = \"Observed\",                      labels=c(\"Correct\", \"Wrong\"))  +   scale_y_continuous(name=\"Reaction time quantiles [s] (log scaled)\")+   facet_grid(model ~correct)+ #correct~model   theme_bw() +   theme(legend.box = \"horizontal\", legend.position = \"bottom\",         legend.direction = \"horizontal\", panel.spacing=unit(0, \"lines\"))"},{"path":"https://sehellmann.github.io/dynConfiR/articles/dynConfiR.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import Data","title":"Fitting a dynamical confidence model to a data set","text":"ConfidenceOrientation dataset included package can loaded package loaded. subset work data one participant pick theoretically relevant columns.","code":"data(\"ConfidenceOrientation\") part8 <- ConfidenceOrientation %>%   filter(participant == 8) %>%   select(SOA, stimulus, response, rt, disc_rating) head(part8) #> # A tibble: 6 × 5 #>     SOA stimulus  response     rt disc_rating #>   <dbl> <chr>     <chr>     <dbl>       <dbl> #> 1  66.7 senkrecht senkrecht  2.45           5 #> 2   8.3 waagrecht senkrecht  2.63           1 #> 3   8.3 senkrecht senkrecht  3.16           1 #> 4  16.7 senkrecht senkrecht  2.61           1 #> 5   8.3 senkrecht senkrecht  3.83           1 #> 6 133.  senkrecht senkrecht  2.68           5"},{"path":"https://sehellmann.github.io/dynConfiR/articles/dynConfiR.html","id":"call-fitting-function","dir":"Articles","previous_headings":"","what":"Call fitting function","title":"Fitting a dynamical confidence model to a data set","text":"specific model, example dynWEV model, fitted simple call function fitRTConf. fitting functions either require columns condition, stimulus, response (correct), rt, rating present data argument alternatively arguments specify mapping column names required variables e.g. condition=\"SOA\". simplicity rename column names fitting, congruent column names data later predictions. fitting procedure takes time deliver reasonable fits, load previously fitted parameters environment (hidden code) comment actual function call. get fast (probably rather inaccurate) fit likely represent locally minimizing maximum likelihood estimation one may use several strategies: - argument grid_search=FALSE prevents time consuming grid search best starting values - adjusting values opts argument, list, reduces time actual optimization procedure - \"nAttempts\"=1 forces best set initial parameters optimized - \"nRestarts\"=1 one want restart optimization routine several times - one may also restrict parameters thus fit. Note, theoretical implications model may predict. several common restrictions - unbiased starting point: z=0.5 - variation starting point: sz=0 - symmetric confidence thresholds possible responses: sym_thetas = TRUE - variation non-decision time: st0=0 Finally, experiment confidence reported simultaneously discrimination response, set restr_tau= \"simult_conf\" (see documentation).","code":"part8 <- part8 %>% rename(condition=SOA,                            rating = disc_rating) # parfit <- fitRTConf(part8, \"dynWEV\", #                     restr_tau=\"simult_conf\") parfit #>          v1         v2        v3        v4       v5        sv        a #> 1 0.0372688 0.02975593 0.2286821 0.9073326 1.519281 0.7033667 1.990934 #>           z       sz         t0       st0 thetaLower1 thetaLower2 thetaLower3 #> 1 0.4840425 0.968085 0.01379258 0.5047345   0.9779324    1.400266    1.651361 #>   thetaLower4 thetaUpper1 thetaUpper2 thetaUpper3 thetaUpper4      tau        w #> 1    1.826896   0.8949651    1.219724    1.674355    1.858899 1.497835 0.632632 #>         svis     sigvis             fixed negLogLik    N  k      BIC     AICc #> 1 0.00228473 0.06989718 sym_thetas = TRUE  3130.487 1611 23 6430.819 6307.611 #>        AIC #> 1 6306.973"},{"path":"https://sehellmann.github.io/dynConfiR/articles/dynConfiR.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"Fitting a dynamical confidence model to a data set","text":"fitting parameters empirical data, parameters used compute response response time distribution predicted model. One use high-level functions predictConf predictRT (several participants /models wrappers predictConfModels predictRTModels), use predictWEV_Conf predictWEV_Conf specify precision argument speed computations.","code":"predictedResponses <-    predictWEV_Conf(parfit, \"dynWEV\", simult_conf = TRUE,                    precision = 3, maxrt = 5, subdivisions = 50) predictedRTdist <-    predictWEV_RT(parfit, \"dynWEV\", simult_conf = TRUE,    maxrt = 5, precision = 3, subdivisions = 50,   scaled=TRUE, DistConf = predictedResponses) print(head(predictedResponses)) #>   condition stimulus response correct rating          p info          err #> 1         1        1        1       1      1 0.26553382   OK 1.526246e-05 #> 2         2        1        1       1      1 0.26674285   OK 1.531710e-05 #> 3         3        1        1       1      1 0.22877983   OK 1.365249e-05 #> 4         4        1        1       1      1 0.07992721   OK 6.266401e-06 #> 5         5        1        1       1      1 0.01556712   OK 4.351377e-05 #> 6         1       -1        1       0      1 0.26641226   OK 1.552454e-05 print(head(predictedRTdist)) #>   condition stimulus response correct rating         rt dens densscaled #> 1         1        1        1       1      1 0.01379258    0          0 #> 2         1        1        1       1      1 0.11555191    0          0 #> 3         1        1        1       1      1 0.21731125    0          0 #> 4         1        1        1       1      1 0.31907058    0          0 #> 5         1        1        1       1      1 0.42082992    0          0 #> 6         1        1        1       1      1 0.52258925    0          0"},{"path":"https://sehellmann.github.io/dynConfiR/articles/dynConfiR.html","id":"visual-comparison","dir":"Articles","previous_headings":"","what":"Visual comparison","title":"Fitting a dynamical confidence model to a data set","text":"predicted distributions may visually compared empirical distributions check accurately model fits data. Therefore, transform condition column prediction data sets fit one empirical data aggregate data sets stimulus response identity distinguish correct incorrect responses.","code":"part8 <- part8 %>%    mutate(condition = as.factor(condition),           correct = as.numeric(stimulus==response)) empirical_response_dist <- part8 %>%    group_by(condition) %>%    mutate(ntrials = n()) %>%   group_by(correct, condition, rating) %>%   summarise(p = n()/ntrials[1], .groups = \"drop\") predictedResponses <- predictedResponses %>%   mutate(condition = factor(condition, labels=levels(part8$condition))) %>%   group_by(correct, condition, rating) %>%   summarise(p = mean(p), .groups = \"drop\")     predictedRTdist <- predictedRTdist %>%   mutate(condition = factor(condition, labels=levels(part8$condition))) %>%   group_by(correct, rating, rt) %>%   summarise(dens = mean(dens),             densscaled = mean(densscaled), .groups = \"drop\") ggplot(empirical_response_dist, aes(x=rating, y=p)) +   geom_bar(aes(fill=as.factor(correct)), stat=\"identity\")+   geom_point(data=predictedResponses) +   scale_fill_discrete(name=\"Accuracy\")+   facet_grid(cols=vars(correct), rows=vars(condition)) ggplot(subset(part8, rt<18), aes(x=rt, color=as.factor(correct))) +   geom_density(aes(linetype=\"Observed\"), linewidth=1)+   geom_line(data = predictedRTdist,              aes(y=densscaled, linetype=\"Prediction\"),              linewidth=1)+   scale_color_discrete(name=\"Accuracy\")+   scale_linetype_discrete(name=\"\")+   theme(legend.position = \"bottom\")+   xlim(0, 5)+   facet_grid(rows=vars(rating), cols=vars(correct)) #> Warning: Removed 4 rows containing non-finite outside the scale range #> (`stat_density()`)."},{"path":"https://sehellmann.github.io/dynConfiR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Hellmann. Author, maintainer. Manuel Rausch. Author, funder.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hellmann S, Rausch M (2025). dynConfiR: Dynamic Models Confidence Response Time Distributions. doi:10.32614/CRAN.package.dynConfiR, R package version 1.1.0, https://CRAN.R-project.org/package=dynConfiR.","code":"@Manual{,   title = {dynConfiR: Dynamic Models for Confidence and Response Time Distributions},   author = {Sebastian Hellmann and Manuel Rausch},   year = {2025},   note = {R package version 1.1.0},   url = {https://CRAN.R-project.org/package=dynConfiR},   doi = {10.32614/CRAN.package.dynConfiR}, }"},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"dynconfir-r-package-for-sequential-sampling-models-of-decision-confidence","dir":"","previous_headings":"","what":"Dynamic Models for Confidence and Response Time Distributions","title":"Dynamic Models for Confidence and Response Time Distributions","text":"package includes implementation several sequential sampling models decision making confidence judgments. package includes density functions decision, confidence response time outcomes following models: Dynamic visibility, time, evidence model (dynaViTE), Dynamic weighted evidence visibility (dynWEV), two-stage signal detection (2DSD), inpedendent partially-correlated race models (IRM/PCRM), multiple-threshold correlated log-normal race model (MRLNR). addition, package includes functions parameter fitting, prediction simulation data. See Preprint (Hellmann et al., 2025) information implemented models usage.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dynamic Models for Confidence and Response Time Distributions","text":"latest released version package available CRAN via install.packages(\"dynConfiR\") current development version, easiest way installation using devtools install GitHub:","code":"devtools::install_github(\"SeHellmann/dynConfiR\")"},{"path":[]},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"density-functions","dir":"","previous_headings":"Usage","what":"Density functions","title":"Dynamic Models for Confidence and Response Time Distributions","text":"","code":"library(dynConfiR) d2DSD(rt=0.7, th1=1, th2=2.5, response=\"lower\",        a=2, v=0.7, t0=0, z =0.5, sv=0, st0=0.1, tau=1, lambda=0.5) ## [1] 0.02387657 ddynaViTE(rt=2.7, th1=1, th2=2.5, response=\"lower\",        tau=1, a=2, v=0.7, t0=0, z =0.5, sv=0, st0=0.1, lambda=0.2,      simult_conf = TRUE) ## [1] 0.01437747 dIRM(1.2, response=2, mu1=0.5, mu2=-0.5, a=0.8, b=0.5, th1=-0.5, th2=2,       wx=0.5, wrt=0.2, wint=0.3, t0=0.3, st0=0.2) ## [1] 0.07616836 dPCRM(1.2, response=2, mu1=0.5, mu2=-0.5, a=0.8, b=0.5, th1=-0.5, th2=2,       wx=0.5, wrt=0.2, wint=0.3, t0=0.3, st0=0.2) ## [1] 0.0834613"},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"workflow-for-data-analysis","dir":"","previous_headings":"","what":"Workflow for data analysis","title":"Dynamic Models for Confidence and Response Time Distributions","text":"using package model comparison, suggested workflow : Package workflow model comparison Data form task may discriminate direction coherence manipulated higher lower accuracy. Fitting confidence models requires data data.frame tibble object columns following variables: stimulus: binary decision task stimulus identity gives correct response condition: experimental manipulation expected affect model parameters present response: actual decision choice task rt: recorded response time. rating: discrete variable encoding decision confidence (high: confident; low: less confident) Alternatively stimulus response possible use column, correct, representing whether decision correct wrong. Alternative column names may passed fitting functions (see ).","code":"head(data) ##   participant direction coherence response   rt rating ## 1           1      left       0.3     left 1.21      2 ## 2           1      left       0.5     left 1.09      3 ## 3           1     right       0.3     left 0.97      2 ## 4           1     right       0.5     left 1.45      1 ## 5           1      left       0.1    right 1.22      1"},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"fitting","dir":"","previous_headings":"Workflow for data analysis","what":"Fitting","title":"Dynamic Models for Confidence and Response Time Distributions","text":"several participants, models fitted independently, models interest dynWEV 2DSD, fitting models done using fitRTConfModels function: default, parallelizes fitting process participant-model combinations. output data frame one row participant-model combination columns parameters measures model performance (negative log-likelihood, BIC, AIC AICc). may used quantitative model comparison.","code":"fitted_pars <- fitRTConfModels(data, models=c(\"dynWEV\",\"2DSD\"), stimulus=\"direction\", condition=\"coherence\") head(fitted_pars) ##    participant model    a    z   sz   v1   v2   v3   sv   t0  st0 thetaLower1 ## 1            1  2DSD 1.90 0.35 0.35 0.01 0.00 2.14 0.18 0.24 0.45       -1.29 ## 21           3  2DSD 2.53 0.39 0.16 0.00 0.02 1.02 0.54 0.33 0.22       -0.95 ## 28           4  2DSD 1.70 0.43 0.62 0.00 0.01 2.05 0.00 0.33 0.33       -1.82 ## 29           5  2DSD 1.94 0.43 0.00 0.00 0.83 3.34 0.60 0.33 0.09       -1.76 ## 30           6  2DSD 1.33 0.51 0.51 0.00 0.01 2.27 0.81 0.38 0.35       -1.70 ## 31           7  2DSD 1.67 0.74 0.47 0.03 0.01 3.49 0.26 0.34 0.58       -1.92 ##    thetaLower2 thetaUpper1 thetaUpper2 tau negLogLik   N  k     BIC    AICc ## 1        -0.90        2.15        2.19   1   1019.23 527 20 2163.80 2079.96 ## 21       -0.73        2.63        2.71   1   1475.68 534 20 3076.97 2992.84 ## 28       -1.60        1.58        1.79   1    967.71 533 20 2060.99 1976.90 ## 29       -1.41        2.96        3.20   1    741.86 536 20 1609.41 1525.20 ## 30       -1.41        1.75        2.13   1    911.06 531 20 1947.62 1863.61 ## 31        0.05        3.09        3.09   1    647.34 533 20 1420.25 1336.17 ##        AIC  w sig sigmu ## 1  2078.45 NA  NA    NA ## 21 2991.36 NA  NA    NA ## 28 1975.42 NA  NA    NA ## 29 1523.72 NA  NA    NA ## 30 1862.12 NA  NA    NA ## 31 1334.68 NA  NA    NA"},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"quantitative-model-comparison","dir":"","previous_headings":"Workflow for data analysis","what":"Quantitative Model Comparison","title":"Dynamic Models for Confidence and Response Time Distributions","text":"output fitting function includes different information criteria, used quantitative model comparison (namely: BIC, AIC, AICc). package also offers functions conduct quantitative comparison either level single individuals group level. individual level, function subject_modelweights computes individual model weights fitted models directly output fitting function. Similarly, group-level comparison, function group_BMS_fits directly uses output fitting function conducts group-level Bayesian model selection based random effects model model prevalence across subjects (Rigoux et al., 2014).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"prediction","dir":"","previous_headings":"Workflow for data analysis","what":"Prediction","title":"Dynamic Models for Confidence and Response Time Distributions","text":"prediction functions predictConf predictRT used, together parameter sets respective models. multiple participants models, output data frame function fitRTConfModels may used functions predictConfModels predictRTModels simultaneously (parallel) predict distributions. predictConf: function predicts distribution decision rating responses (ignoring response times) different stimulus conditions. predictRT: function computes probability densities decision, confidence response time outputs range response times different stimulus conditions. required, also returns scaled density (.e. conditional probability certain response time, given decision confidence response) - output predictConf required. Usage example:","code":"fitted_pars %>%    group_by(model, participant) %>%    summarise(predictConf(pick(everything()), model=cur_group()$model[1]))"},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"further-functions","dir":"","previous_headings":"","what":"Further functions","title":"Dynamic Models for Confidence and Response Time Distributions","text":"Implementation simulation observations Leaky Competing Accumulator model (see rLCA).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"contributing-to-the-package","dir":"","previous_headings":"","what":"Contributing to the package","title":"Dynamic Models for Confidence and Response Time Distributions","text":"package active development. planning implement new models decision confidence published. Please feel free contact us suggest new models implement package, volunteer adding additional models. Implementing custom models decision confidence recommended users experience cognitive modelling! readers want use open code implement models confidence , following steps need taken: Derive likelihood binary response ($`R=-1, 1`$) response time ($`T`$) specific level confidence ($`C=1,...K`$) according custom model set parameters ($`\\theta`$), given binary stimulus ($`S=-1, 1`$), .e. $`P(R, T, C | S, \\theta)`$. Write corresponding density function ‘dyourmodelname’ based available densities. Use one files named ‘likelihood_model.R’ package sources adapt likelihood function according model. According convention, name new file ‘likelihood_yourmodelname.R’. initial grid used grid search include plausible range parameters model. want use Nelder-Mead algorithm, constraint parameters initial grid need transformed parameter vector optimization real-valued). applicable, parameter vector obtained optimization needs back-transformation output object res. Name new file according convention ‘int_fitting_yourmodelname.R’. Add model fitting-functions high-level functions fitRTConf fitRTConfModels. Add prediction functions model based one files ‘predictratingdist_model.R’. file include function computing discrete rating distribution ‘predictyourmodel_Conf’ function computing density across range response times ‘predictyourmodel_RT’. Add prediction function high-level functions predictConf/predictConfModels, predictRT/predictRTModels. Optional: Add simulation functions model based one files ‘simulatemodel.R’","code":""},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Dynamic Models for Confidence and Response Time Distributions","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence, response time visual perception. Psychological Review, 130(6), 1521–1543. doi: 10.1037/rev0000411 Hellmann, S., Zehetleitner, M. & Rausch, M. (2024). Confidence Influenced Evidence Accumulation Time Dynamical Decision Models. Comput Brain Behav 7, 287–313. doi: 10.1007/s42113-024-00205-9 Rigoux, L., Stephan, K. E., Friston, K. J., & Daunizeau, J. (2014). Bayesian model selection group studies - revisited. NeuroImage, 84, 971–985. doi: 10.1016/j.neuroimage.2013.08.065","code":""},{"path":"https://sehellmann.github.io/dynConfiR/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Dynamic Models for Confidence and Response Time Distributions","text":"comments, remarks, questions please contact : sebastian.hellmann@tum.de submit issue.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/ConfidenceOrientation.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence and response time data — ConfidenceOrientation","title":"Confidence and response time data — ConfidenceOrientation","text":"data set containing results orientation discrimination experiment confidence judgments. data set includes results 16 participants 3 sessions. task identify orientation (horizontal vertical) grid briefly visible covered mask form checkerboard pattern.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/ConfidenceOrientation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence and response time data — ConfidenceOrientation","text":"","code":"data(ConfidenceOrientation)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/ConfidenceOrientation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Confidence and response time data — ConfidenceOrientation","text":"data frame 25920 rows 12 variables: participant integer values unique participant identifier session session identifier ranging 1 3 gender gender participant: \"w\" female; \"m\" male participants age age participants years SOA stimulus-onset-asynchrony ms (.e. time stimulus mask onset) orientation orientation target stimulus (0: vertical, 90: horizontal) stimulus stimulus identity (\"senkrecht\": vertical, \"waagrecht\": horizontal) response response discrimination task (see stimulus column) correct 0-1 column indicating whether discrimination response correct (1) (0) rt response time discrimination response sec cont_rating confidence rating registered (continuous values ranging -1 (unsure) 1 (sure)) disc_rating confidence rating discretized 5 steps using equidistant breaks","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/ConfidenceOrientation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Confidence and response time data — ConfidenceOrientation","text":"https://github.com/SeHellmann/SeqSamplingConfidenceModels","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"Computes Log-likelihood given data parameters MTLNR. wrapped version respective density dMTLNR, one can find information parameters. . function mainly used inside fitRTConf MTLNR exported individual usage contexts.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"","code":"LogLikMTLNR(data, paramDf, precision = 6, data_names = list(), ...)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"data dataframe row one trial. Containing following variables: condition    (necessary; convertible integer (e.g. factor); different levels stimulus quality), rating            (convertible integer (e.g. factor); discrete confidence judgments), rt                    (numeric; giving reaction times decision task), stimulus     (values least convertible c(1,2), .e. integer factor; stimulus category (index accumulator higher drift)) response     (values least convertible c(1,2); direction decision; (index accumulator reaching boundary first)) paramDf list data frame one row. Column names match names dMTLNR parameter names (mu_v1 mu_v2 used context replaced parameter v). different stimulus quality/mean drift rates, names v1, v2, v3,.... Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... (see Details correspondence data) precision numerical scalar. Precision calculation integration t0. data_names list. Possibility giving alternative column names variables data. default column names identical ones given data argument description. ... Another possibility giving alternative variable names data frame (form condition = \"SOA\").","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"Numeric scalar. summed Log-likelihood data given parameters respective model. one row-wise probabilities <=0, function returns -1e+12.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"Note, requirements format columns likelihood functions much stricter, fitRTConf. function frequently called optimization routines fitting process preprocessing steps therefore included function. rating, condition. integer, values range 1 number possible ratings/conditions. factor, number levels equal number possible ratings/conditions. consistent parameter vector. confidence thresholds named thetaUpper1, thetaLower1,.... (theta1,... symmetric thresholds), number ratings -1 mean drift rates (possibly standard deviation drift rates) denoted v1, v2,... one condition used v accepted well v1. stimulus, response. stimulus response always given numerical format values 1 2. Stimulus determines two accumulators positive drift. negative drift absolute value. Response gives index accumulator reaches boundary first.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"Reynolds, ., Kvam, P. D., Osth, . F., & Heathcote, . (2020). Correlated racing evidence accumulator models. Journal Mathematical Psychology, 96, 102331. doi: doi: 10.1016/j.jmp.2020.102331","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikMTLNR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Likelihood functions for the mutliple-treshold log-normal race model — LogLikMTLNR","text":"","code":"# 1. Generate data from an artificial participants # Get random index for accumulator with positive # drift (i.e. stimulus category) and # stimulus discriminability (two steps: hard, easy) stimulus <- sample(c(1, 2), 200, replace=TRUE) discriminability <- sample(c(1, 2), 200, replace=TRUE) # generate data for participant 1 data <- rMTLNR(200,                mu_v1 = as.numeric(stimulus==1)*discriminability*0.5,                mu_v2 = as.numeric(stimulus==2)*discriminability*0.5,                mu_d1=1, mu_d2=1, t0=0.1) # discretize confidence ratings (only 2 steps: unsure vs. sure) data$rating <- as.numeric(cut(data$conf, breaks = c(0, 3, Inf), include.lowest = TRUE)) data$stimulus <- stimulus data$discriminability <- discriminability data <- data[,-c(3,4)] # drop Tdec and conf measure (unobservable variable) head(data) #>          rt response rating stimulus discriminability #> 1 1.5915151        2      1        2                1 #> 2 1.4607948        1      1        1                2 #> 3 0.6811883        1      1        1                2 #> 4 0.1518123        2      2        2                1 #> 5 1.7980148        1      1        1                1 #> 6 1.1321225        2      1        1                1  # 2. Define some parameter set in a data.frame paramDf <- data.frame(v1=0.5, v2=1.0, t0=0.1, st0=0,                       mu_d1=1, mu_d2=1,                       s_v1=0.5, s_v2=0.5,                       s_d1=0.3, s_d2=0.3,                       rho_v=0.2, rho_d=0.1,                       theta1=2.5)  # 3. Compute log likelihood for parameter and data LogLikMTLNR(data, paramDf, condition=\"discriminability\") #> [1] -856.2309"},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikRM.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","title":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","text":"Computes Log-likelihood given data parameters IRM PCRM without time-scaled confidence measure. wrapped version respective densities dIRM dPCRM, one can find information parameters. restricts rates accumulation negative , though (common assumption perceptual decision tasks). function mainly used inside fitRTConf race models exported individual usage contexts.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikRM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","text":"","code":"LogLikRM(data, paramDf, model = \"IRM\", time_scaled = FALSE,   precision = 6, data_names = list(), ...)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikRM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","text":"data dataframe row one trial. Containing following variables: condition    (necessary; convertible integer (e.g. factor); different levels stimulus quality), rating            (convertible integer (e.g. factor); discrete confidence judgments), rt                    (numeric; giving reaction times decision task), stimulus     (values least convertible c(1,2), .e. integer factor; stimulus category (index accumulator higher drift)) response     (values least convertible c(1,2); direction decision; (index accumulator reaching boundary first)) paramDf list data frame one row. Column names match names RaceModels parameter names (mu1 mu2 used context replaced parameter v). different stimulus quality/mean drift rates, names v1, v2, v3,.... Different s parameters possible s1, s2, s3,... equally many steps drift rates. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... (see Details correspondence data) model character scalar. One \"IRM\" \"PCRM\". (\"IRMt\" \"PCRMt\" also accepted. case, time_scaled set TRUE.) time_scaled logical. Whether confidence measure scaled 1/sqrt(rt). Default: TRUE. precision numerical scalar. Precision calculation integration t0. data_names list. Possibility giving alternative column names variables data. default column names identical ones given data argument description. ... Another possibility giving alternative variable names data frame (form condition = \"SOA\").","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikRM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","text":"Numeric scalar. summed Log-likelihood data given parameters respective model. one row-wise probabilities <=0, function returns -1e+12.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikRM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","text":"Note, requirements format columns likelihood functions much stricter, fitRTConf. function frequently called optimization routines fitting process preprocessing steps therefore included function. rating, condition. integer, values range 1 number possible ratings/conditions. factor, number levels equal number possible ratings/conditions. consistent parameter vector. confidence thresholds named thetaUpper1, thetaLower1,.... (theta1,... symmetric thresholds), number ratings -1 mean drift rates (possibly standard deviation drift rates) denoted v1, v2,... (s1, s2,...) number equal number conditions. one condition used v accepted well v1. stimulus, response. stimulus response always given numerical format values 1 2. Stimulus determines two accumulators positive drift. negative drift absolute value. Response gives index accumulator reaches boundary first.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikRM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikRM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Likelihood functions for the independent and partially anti-correlated race models of confidence — LogLikRM","text":"","code":"# 1. Generate data from an artificial participants # Get random index for accumulator with positive # drift (i.e. stimulus category) and # stimulus discriminability (two steps: hard, easy) stimulus <- sample(c(1, 2), 200, replace=TRUE) discriminability <- sample(c(1, 2), 200, replace=TRUE) # generate data for participant 1 data <- rPCRM(200, mu1=ifelse(stimulus==1, 1, -1)*discriminability*0.5,               mu2=ifelse(stimulus==1, -1, 1)*discriminability*0.5,              a=2, b=1.8, t0=0.2, st0=0, wx=0.7, wint=0.3, wrt=0) # discretize confidence ratings (only 2 steps: unsure vs. sure) data$rating <- as.numeric(cut(data$conf, breaks = c(0, 3, Inf), include.lowest = TRUE)) data$stimulus <- stimulus data$discriminability <- discriminability data <- data[data$response!=0, ] # drop not finished decision processes data <- data[,-c(3,4)] # drop xl and conf measure (unobservable variable) head(data) #>     rt response rating stimulus discriminability #> 1 4.74        1      2        1                1 #> 2 0.63        1      1        1                2 #> 3 4.44        1      1        1                1 #> 4 2.30        1      1        1                1 #> 5 2.57        2      2        2                2 #> 6 1.89        2      2        2                1  # 2. Define some parameter set in a data.frame paramDf <- data.frame(a=2,b=2, v1=0.5, v2=1, t0=0.1,st0=0,                       wx=0.6, wint=0.2, wrt=0.2,                       theta1=4)  # 3. Compute log likelihood for parameter and data LogLikRM(data, paramDf, model=\"PCRMt\", condition=\"discriminability\") #> [1] -638.2634 # same result LogLikRM(data, paramDf, model=\"PCRM\", time_scaled=TRUE,condition=\"discriminability\") #> [1] -638.2634 # different LogLikRM(data, paramDf, model=\"PCRM\", condition=\"discriminability\") #> [1] -534.6817  # same parameters used for IRM model LogLikRM(data, paramDf, model=\"IRMt\", condition=\"discriminability\") #> [1] -671.7345"},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"Computes Log-likelihood given data parameters dynWEV model (Hellmann et al., 2023) 2DSD model (Pleskac & Busemeyer, 2010). wrapped version respective densities ddynaViTE d2DSD, one can find information parameters (z always given relatively, likelihood). function mainly used fitRTConf exported individual usage contexts.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"","code":"LogLikWEV(data, paramDf, model = \"dynaViTE\", simult_conf = FALSE,   precision = 6, stop_on_error = TRUE, data_names = list(), ...)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"data dataframe row one trial. Containing following variables: condition    (necessary; convertible integer (e.g. factor); different levels stimulus quality), rating       (convertible integer (e.g. factor); discrete confidence judgments), rt           (numeric; giving reaction times decision task), stimulus     (values least convertible c(-1,1); stimulus category (direction evidence accumulation)) response     (characters \"upper\", \"lower\" (convertible ); direction decision; correct answers \"lower\" stimulus=-1; \"upper\" stimulus=1), paramDf list data.frame one row. Names match names dynaViTE 2DSD model specific parameter names. different stimulus quality/mean drift rates, names v1, v2, v3,.... Different sv /s parameters possible sv1, sv2, sv3... (s1, s2, s3,... respectively) equally many steps drift rates. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,... (see Details correspondence data) model character scalar. One \"dynWEV\" \"2DSD\" model fit. simult_conf logical. Whether experiment confidence reported simultaneously decision, decision confidence judgment assumed happened subsequent response computations different, observable interjudgment time (simult_conf FALSE). precision numerical scalar. Precision calculation integration z t0. stop_on_error logical. TRUE error function returned case invalid parameters. Otherwise, output 0 without error. data_names list. Possibility giving alternative column names variables data. default column names identical ones given data argument description. ... Possibility giving alternative variable names data frame (form condition = \"SOA\").","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"Numeric scalar. summed Log-likelihood data given parameters respective model. one row-wise probabilities <=0, function returns -1e+12.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"Note, requirements format columns likelihood functions much stricter, fitRTConf. function frequently calls optimization routines fitting process preprocessing steps therefore included function. rating, condition. integer, values range 1 number possible ratings/conditions. factor, number levels equal number possible ratings/conditions. consistent parameter vector. confidence thresholds named thetaUpper1, thetaLower1,.... (theta1,... symmetric thresholds), number ratings -1 mean drift rates (possibly standard deviation drift rates) denoted v1, v2,... (sv1, sv2,.../s1, s2, ...) number equal number conditions. one condition used v accepted well v1. stimulus, response. stimulus always given numerical format values -1 1. response always given character vector \"lower\" \"upper\" values. corresponds situation Ratcliff's diffusion model (Ratcliff, 1978), stimulus sign mean drift direction response \"upper\" \"lower\" boundary first hit evidence accumulation. correct decision therefore \"lower\", stimulus -1, \"upper\", stimulus 1.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/LogLikWEV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Likelihood functions for the dynWEV and 2DSD models of confidence — LogLikWEV","text":"","code":"# 1. Generate data from an artificial participants # Get random drift direction (i.e. stimulus category) and # stimulus discriminability (two steps: hard, easy) stimulus <- sample(c(-1, 1), 200, replace=TRUE) discriminability <- sample(c(1, 2), 200, replace=TRUE) # generate data for participant 1 data <- rdynaViTE(200, a=2,v=stimulus*discriminability*0.5,              t0=0.2,z=0.5, sz=0.1,sv=0.1, st0=0,  tau=4, s=1, w=0.3) # discretize confidence ratings (only 2 steps: unsure vs. sure) data$rating <- as.numeric(cut(data$conf, breaks = c(-Inf, 1, Inf), include.lowest = TRUE)) data$stimulus <- stimulus data$discriminability <- discriminability data <- data[data$response!=0, ] # drop not finished decision processes data <- data[,-3] # drop conf measure (unobservable variable) head(data) #>     rt response rating stimulus discriminability #> 1 0.76       -1      2        1                1 #> 2 0.66        1      1       -1                1 #> 3 0.53       -1      2        1                1 #> 4 0.53       -1      2       -1                2 #> 5 0.69        1      2        1                2 #> 6 0.59        1      2        1                2  # 2. Define some parameter set in a data.frame paramDf <- data.frame(a=2.5,v1=0.5, v2=1, t0=0.1,z=0.7,                       sz=0,sv=0.2, st0=0,  tau=3, w=0.3,                       theta1=0.8, svis=0.5, sigvis=0.8)  # 3. Compute log likelihood for parameter and data LogLikWEV(data, paramDf, model=\"dynWEV\", condition=\"discriminability\") #> [1] -405.2209 # adding the hypothetical interjudgment time to response times # results in the same log likelihood as before when simult_conf=TRUE data$rt <- data$rt + paramDf$tau LogLikWEV(data, paramDf, model=\"dynWEV\", condition=\"discriminability\", simult_conf=TRUE) #> [1] -405.2209  # the same function for \"2DSD\" model paramDf <- data.frame(a=2.5,v1=0.5, v2=1, t0=0.1,z=0.7,                       sz=0,sv=0.2, st0=0,  tau=3, theta1=0.8) LogLikWEV(data, paramDf, model=\"2DSD\", condition=\"discriminability\", simult_conf=TRUE) #> [1] -414.171 # this results in the same log likelihood as before"},{"path":"https://sehellmann.github.io/dynConfiR/reference/MLE_dirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","title":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","text":"function MLE_dirichlet performs maximum-likelihood estimation \\(\\alpha\\) parameter Dirichlet distribution given sample probability vectors.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MLE_dirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","text":"","code":"MLE_dirichlet(probs, alpha0 = rep(1, ncol(probs)))"},{"path":"https://sehellmann.github.io/dynConfiR/reference/MLE_dirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","text":"probs matrix N rows representing observations probability vectors K columns representing classes. Therefore, values row sum 1. alpha0 vector K=ncol(probs) values starting parameter optimization. Values greater 0.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MLE_dirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","text":"Returns numeric vector length K=ncol(probs) representing \\(\\alpha\\) Dirichlet distribution.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MLE_dirichlet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","text":"density Dirichlet distribution \\(\\alpha = (\\alpha_1, ..., \\alpha_K )\\) \\(\\alpha_i > 0 \\forall =1,...,K\\) given $$f(p|\\alpha)=\\frac{1}{B(\\alpha)} \\prod_{=1}{K} p_{}^{\\alpha_i - 1},$$ \\(0\\leq p_i \\leq 1 \\forall = 1,...,K\\) \\(\\sum_{=1}^{K} p_i ) 1\\), \\(f(p|\\alpha) = 0\\), else. function optimizes log-likelihood sample probability vectors given probs using function optim Nelder-Mead algorithm.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MLE_dirichlet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MLE_dirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the parameter of a Dirichlet distribution — MLE_dirichlet","text":"","code":"probs <- matrix(c(0.2, 0.4, 0.2, 0.4, 0, 0.2, 0.4, 0.4, 0.6, 0.2, 0.2,                   0.4, 0.4, 0.2, 0.2, 0.4, 0.8, 0.4), ncol=3) MLE_dirichlet(probs) #> [1] 0.008449577 0.867905274 0.891974546"},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"Probability densities random number generators response times, decisions confidence judgments multi-threshold correlated log-normal race model (MTLNR; Reynolds et al., 2020), .e. probability given response (response: winning accumulator (1 2)) given time (rt) confidence measure interval th1 th2. confidence measure defined log-ratio time loosing accumulator hit boundary decision time (means interval (0, Inf). parameters model : mu_v1/mu_v2 s_v1/s_v2 mean standard deviation parameters log-normally distributed accumulation rates two accumulators, mu_d1/mu_d2 s_d1/s_d2 mean standard deviation parameters log-normally distributed boundary distances two accumulators, rho_v rho_d correlation coefficients accumulation rates boundary distance, giving correlation parameters two accumulators, t0 st0 minimum range uniformly distributed non-decision times (including encoding motor time).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"","code":"dMTLNR(rt, response = 1, th1, th2, mu_v1, mu_v2, s_v1 = 1, s_v2 = 1,   rho_v = 0, mu_d1 = 0, mu_d2 = 0, s_d1 = 1, s_d2 = 1, rho_d = 0,   t0 = 0, st0 = 0, precision = 6, step_width = NULL)  dMTLNR_multiple_ratings(rt, response = 1, rating = 1, thresholds, mu_v1,   mu_v2, s_v1 = 1, s_v2 = 1, rho_v = 0, mu_d1 = 0, mu_d2 = 0,   s_d1 = 1, s_d2 = 1, rho_d = 0, t0 = 0, st0 = 0, precision = 6,   step_width = NULL)  rMTLNR(n, thresholds = NULL, mu_v1, mu_v2, s_v1 = 1, s_v2 = 1,   rho_v = 0, mu_d1 = 0, mu_d2 = 0, s_d1 = 1, s_d2 = 1, rho_d = 0,   t0 = 0, st0 = 0)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"rt numeric vector RTs. convenience also data.frame columns rt response possible. response numeric vector values c(1, 2), giving accumulator hit boundary first. th1 numeric. Lower bound interval range confidence measure. th2 numeric. Upper bound interval range confidence measure. mu_v1 numeric. Mean parameter log-normally distributed accumulation rate first accumulator mu_v2 numeric. Mean parameter log-normally distributed accumulation rate second accumulator s_v1 numeric. Standard deviation log-normally distributed accumulation rate first accumulator s_v2 numeric. Standard deviation log-normally distributed accumulation rate second accumulator rho_v numeric. Correlation parameter accumulation rates mu_d1 numeric. Mean parameter log-normally distributed boundary distance first accumulator mu_d2 numeric. Mean parameter log-normally distributed boundary distance second accumulator s_d1 numeric.  Standard deviation log-normally distributed boundary distance first accumulator s_d2 numeric.  Standard deviation log-normally distributed boundary distance second accumulator rho_d numeric. Correlation parameter boundary distances t0 numeric. Lower bound non-decision time component observable response times. Range: t0>=0. Default: 0. st0 numeric. Range uniform distribution non-decision time. Range: st0>=0. Default: 0. precision numerical scalar value. Precision calculation. Determines step size integration w.r.t. t0. Represents number decimals precisely computed average. Default 6. step_width numeric. Alternative way define precision integration w.r.t. t0 directly providing step size integration. rating numeric vector integer values 1 number confidence levels thresholds numeric vector length 2*(number confidence levels). Confidence thresholds, used compare confidence variable producing discrete confidence judgments. first half entries increasing represent confidence thresholds response 1; second half entries also increasing thresholds response=2. n integer. number samples generated.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"dMTLNR dMTLNR_multiple_ratings return numerical value probability density numerical vector length rt. rMTLNR returns data.frame five columns n rows. Column names rt (response time), response (1 2, indicating accumulator hit boundary first), Tdec (actual decision time (without non-decision time), conf (log ratio boundary hitting times (confidence variable), rating (discrete confidence judgment). race parameters (well response (rating), th1, th2) recycled length result (either rt n). words, functions completely vectorized parameters even response.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"computation confidence judgments, parameters confidence thresholds th1 th2 lower upper bound interval confidence measure, thresholds vector thresholds (see Details). model assumes two accumulators log-normally distributed boundary distance \\(D\\) mean parameter \\(\\mu_D\\) standard deviation parameter \\(s_D^2\\) log-normally distributed accumulation rate \\(V\\) respective parameters. accumulation takes form linear ballistic accumulation without noise, boundary crossing times \\(T=D/V\\) log-normally distributed mean parameter \\(\\mu_D - \\mu_V\\) variance parameter \\(s_D^2 + s_V^2\\). addition, boundary distances two accumulators correlated correlation determined \\(\\rho_D\\). Similarly, accumulation rates share correlation parameter \\(\\rho_V\\). Confidence determined log-ratio loosing winning boundary crossing time, .e., first accumulator hit boundary first, confidence determined $$conf = log(T_2 / T_1).$$ confidence measure compared set thresholds produce discrete confidence judgments. equivalent confident computation based Balance Evidence decision time, although symmetry conditions thresholds may differ depending interpretation (see Reynolds et al., 2020 detail). convenience, likelihood function allows first argument data.frame containing information first second argument columns (.e., rt response (rating relevant)). columns (well passing response separately argument) ignored. Difference dMTLNR dMTLNR_multiple_ratings function dMTLNR allows compute probability rt response confidence variable within interval given two thresholds, th1 th2, similar definitions density functions (like ddynaViTE). function dMTLNR_multiple_ratings takes vector discrete confidence judgments, rating, vector thresholds, confidence interval can vary observation observation. correct interval limits chosen function depending entry rating.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"model highly -parametrized mean parameters boundary distances accumulation rates trade . Similarly, variance parameters correlation parameters trade . reason, one may use first set parameters accumulation rates (mu_v1,...).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"Reynolds, ., Kvam, P. D., Osth, . F., & Heathcote, . (2020). Correlated racing evidence accumulator models. Journal Mathematical Psychology, 96, 102331. doi: doi: 10.1016/j.jmp.2020.102331","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"Sebastian Hellmann","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/MTLNR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlated Multiple-threshold Log-normal Race Model for Decision Confidence — MTLNR","text":"","code":"# Plot rt distribution ignoring confidence curve(dMTLNR(x, 1, th1=-Inf, th2=Inf, mu_v1=0.5, mu_v2=-0.5,             mu_d1=1, mu_d2=1, t0=0.1), xlim=c(0,2.5), ylim=c(0,2)) curve(dMTLNR(x, 2, th1=-Inf, th2=Inf, mu_v1=0.5, mu_v2=-0.5,             mu_d1=1, mu_d2=1, t0=0.1), col=\"red\", add=TRUE) # t0 indicates minimal response time possible abline(v=0.1)   # Generate a random sample df1 <- rMTLNR(5000, mu_v1=0.2, mu_v2=-0.2, mu_d1=1, mu_d2=1, t0=0.1) head(df1) #>          rt response      Tdec      conf rating #> 1 0.2105721        1 0.1105721 3.3951325      1 #> 2 1.5053815        2 1.4053815 0.3333731      1 #> 3 6.4813095        2 6.3813095 0.1711973      1 #> 4 1.0321934        1 0.9321934 3.4563064      1 #> 5 0.9491074        1 0.8491074 2.1407264      1 #> 6 5.5927345        2 5.4927345 0.1417114      1  # Compute density with rt and response as separate arguments dMTLNR(seq(0, 2, by =0.4), response=2, th1=0.5, th2=2,       mu_v1=0.2, mu_v2=-0.2, mu_d1=1, mu_d2=1, t0=0.1) #> [1] 0.00000000 0.07873391 0.08868378 0.07139010 0.05494956 0.04231700  # Compute density with rt and response in data.frame argument df1 <- subset(df1, response !=0) # drop trials where no accumulation hit its boundary dMTLNR(df1[1:5,], th1=0, th2=Inf, mu_v1=0.2, mu_v2=-0.2,       mu_d1=1, mu_d2=1, t0=0.1) #> [1] 0.265892917 0.104694006 0.009066025 0.204206167 0.219291867  # Example with correlation parameters dMTLNR(df1[1:5,], th1=0, th2=Inf, mu_v1=0.2, mu_v2=-0.2,       mu_d1=1, mu_d2=1, rho_v=0.3, rho_d=0.2, t0=0.1) #> [1] 0.26097798 0.09526726 0.01024481 0.19507236 0.20910738  # Example with multiple confidence ratings using dMTLNR_multiple_ratings thresholds <- c(0.5, 1.5, 2.5,  # for response=1 (increasing)                0.3, 1.2, 2.0)  # for response=2 (increasing)  # Create some sample data with ratings sample_data <- data.frame(  rt = c(0.8, 1.2, 0.9, 1.5, 1.1),  response = c(1, 2, 1, 2, 1),  rating = c(1, 2, 3, 1, 2) )  dMTLNR_multiple_ratings(sample_data, thresholds=thresholds,                        mu_v1=0.2, mu_v2=-0.2, mu_d1=1, mu_d2=1, t0=0.1) #> [1] 0.02652695 0.04716810 0.06925008 0.01378401 0.06579082  # Compare RT and confidence distributions for different parameter settings df_low_var <- rMTLNR(2000, thresholds = thresholds,                     mu_v1=0.3, mu_v2=-0.3, mu_d1=1, mu_d2=1,                     s_v1=0.5, s_v2=0.5, s_d1=0.5, s_d2=0.5, t0=0.1) df_high_var <- rMTLNR(2000, thresholds=thresholds,                      mu_v1=0.3, mu_v2=-0.3, mu_d1=1, mu_d2=1,                      s_v1=1.5, s_v2=1.5, s_d1=1.5, s_d2=1.5, t0=0.1)  two_samples <- rbind(cbind(df_low_var, variance=\"low\"),                     cbind(df_high_var, variance=\"high\")) two_samples <- two_samples[two_samples$response != 0, ]  # Compare RT distributions boxplot(log(rt) ~ variance + response, data = two_samples)   # Compare confidence distributions boxplot(conf ~ variance + response, data = two_samples)  boxplot(rating ~ variance + response, data = two_samples)  if (requireNamespace(\"ggplot2\", quietly = TRUE)) {  require(ggplot2)  ggplot(two_samples, aes(x = rt, y = conf)) +   stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE, na.rm=TRUE) +   facet_grid(cols = vars(variance), rows = vars(response),              labeller = \"label_both\") +   xlim(c(0.2, 2.0)) + ylim(c(-2, 4)) } #> Loading required package: ggplot2"},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"CDFtoQuantiles computes quantiles given CDF. PDFtoQuantiles computes quantiles given PDF values within groups variables, available.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"","code":"PDFtoQuantiles(pdf_df, p = c(0.1, 0.3, 0.5, 0.7, 0.9), agg_over = NULL,   scaled = FALSE)  CDFtoQuantiles(cdf, x = NULL, p)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"pdf_df dataframe. least two columns: rt (reaction times) x support values pdf dens pdf pdf values columns used grouping factors, separate quantiles returned. p numeric vector. Probabilities returned quantiles. Default: c(.1, .3, .5, .7, .9). agg_over character. Names columns pdf_df aggregate (using mean densities, valid , groups occur equal probabilities) computing quantiles. scaled logical. Indicating whether pdf values proper probability distribution. Non-scaled pdfs scaled 1. scaled TRUE, may cause problems high probabilities. case strongly recommend cover probability mass values support vector. cdf numeric. increasing vector length x giving CDF respective x-Values. Dataframe inputs accepted. column x available , used support values. x numeric. increasing vector length cdf. Can also specified column cdf.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"PDFtoQuantiles returns tibble columns p q indicating probabilities respective quantiles. Furthermore, output grouping columns identical additional columns input (without rt/x, dens densscaled), without ones agg_over argument. CDFtoQuantiles returns data.frame columns p q.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"reasonable accuracy number steps support column (rt/x) high, .e. distance values small. recommend, ensure support vector input equidistant, .e. difference consecutive support values constant, though required. column names x rt present pdf_df, rt preferred. Attention given columns pdf_df rt/x dens/pdf. column pdf may scaled integrate 1 .","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":"quantile-computation-in-the-dynconfir-package","dir":"Reference","previous_headings":"","what":"Quantile computation in the dynConfiR package","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"argument pdf_df, outputs predictRT predictRTModels dynConfiR package can used. context confidence models grouping factors often used conditions, correct/incorrect answers confidence ratings.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/PDFtoQuantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Quantiles from vectors of PDF or CDF values — PDFtoQuantiles","text":"","code":"## Demonstrate PDFtoQuantiles pred <- expand.grid(model = c(\"dynWEV\", \"PCRMt\"),                     rt =  seq(0, 15, length.out=1200),                     condition = c(1,2,3),                     rating = c(1,2)) pred$dens <- dchisq(pred$rt, 3) # pdf may also be used as column name head(pred) #>    model         rt condition rating       dens #> 1 dynWEV 0.00000000         1      1 0.00000000 #> 2  PCRMt 0.00000000         1      1 0.00000000 #> 3 dynWEV 0.01251043         1      1 0.04434345 #> 4  PCRMt 0.01251043         1      1 0.04434345 #> 5 dynWEV 0.02502085         1      1 0.06232006 #> 6  PCRMt 0.02502085         1      1 0.06232006 res <- PDFtoQuantiles(pred, p=c(0.3, 0.5, 0.7)) head(res) #> # A tibble: 6 × 5 #>   model  condition rating     p     q #>   <fct>      <dbl>  <dbl> <dbl> <dbl> #> 1 dynWEV         1      1   0.3  1.43 #> 2 dynWEV         1      1   0.5  2.36 #> 3 dynWEV         1      1   0.7  3.65 #> 4 dynWEV         1      2   0.3  1.43 #> 5 dynWEV         1      2   0.5  2.36 #> 6 dynWEV         1      2   0.7  3.65 nrow(res) #= 3(quantiles)*2(models)*3(conditions)*2(rating) #> [1] 36 # Compare to true quantiles of Chi-square distribution qchisq(p=c(0.3, 0.5, 0.7), 3) #> [1] 1.423652 2.365974 3.664871 res$q[1:3] #> [1] 1.426188 2.364470 3.653044   res2 <- PDFtoQuantiles(pred, p=c(0.3, 0.5, 0.7), agg_over = \"model\") nrow(res2) #=18 because res aggregated over models #> [1] 18  # \\donttest{   pred$pdf <- dchisq(pred$rt, 3)   head(pred) #>    model         rt condition rating       dens        pdf #> 1 dynWEV 0.00000000         1      1 0.00000000 0.00000000 #> 2  PCRMt 0.00000000         1      1 0.00000000 0.00000000 #> 3 dynWEV 0.01251043         1      1 0.04434345 0.04434345 #> 4  PCRMt 0.01251043         1      1 0.04434345 0.04434345 #> 5 dynWEV 0.02502085         1      1 0.06232006 0.06232006 #> 6  PCRMt 0.02502085         1      1 0.06232006 0.06232006   # following call throws a warning, because both columns pdf and dens are present   PDFtoQuantiles(pred, p=c(0.3, 0.5, 0.7), agg_over = \"model\") #> Warning: The column 'dens' is used as density values, not 'pdf'! #> # A tibble: 18 × 4 #>    condition rating     p     q #>        <dbl>  <dbl> <dbl> <dbl> #>  1         1      1   0.3  1.43 #>  2         1      1   0.5  2.36 #>  3         1      1   0.7  3.65 #>  4         1      2   0.3  1.43 #>  5         1      2   0.5  2.36 #>  6         1      2   0.7  3.65 #>  7         2      1   0.3  1.43 #>  8         2      1   0.5  2.36 #>  9         2      1   0.7  3.65 #> 10         2      2   0.3  1.43 #> 11         2      2   0.5  2.36 #> 12         2      2   0.7  3.65 #> 13         3      1   0.3  1.43 #> 14         3      1   0.5  2.36 #> 15         3      1   0.7  3.65 #> 16         3      2   0.3  1.43 #> 17         3      2   0.5  2.36 #> 18         3      2   0.7  3.65 # }  # \\donttest{   pred2 <- data.frame(rt=seq(0, 7, length.out=100))   pred2$dens <- dchisq(pred2$rt, 5)   # following call throws a warning, because density is assumed to be scaled (scaled=TRUE), i.e.   # integrate to 1, but the .95 quantile is not reached in the rt column   PDFtoQuantiles(pred2, p=c(0.3, 0.5, 0.95), scaled=TRUE) # Gives a warning #> Warning: There was 1 warning in `reframe()`. #> ℹ In argument: `CDFtoQuantiles(.data$cdfscaled, .data$rt, p = p)`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf #> # A tibble: 3 × 2 #>       p     q #>   <dbl> <dbl> #> 1  0.3   2.97 #> 2  0.5   4.38 #> 3  0.95 NA    # }  ## Demonstrate CDFtoQuantiles X <- seq(-2, 2, length.out=300) pdf_values <- pnorm(X) CDFtoQuantiles(pdf_values, X, p=c(0.2, 0.5, 0.8)) #>     p            q #> 1 0.2 -0.836120401 #> 2 0.5  0.006688963 #> 3 0.8  0.849498328 qnorm(c(0.2, 0.5, 0.8)) #> [1] -0.8416212  0.0000000  0.8416212"},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantitative Model Comparison — QuantModelComparison","title":"Quantitative Model Comparison — QuantModelComparison","text":"subject_modelweights computes model weights (probabilities) individual subjects based information criterion (BIC, AIC, AICc). group_BMS performs Bayesian model comparison based marginal likelihoods (alias model evidence), given different models across different subject group level using fixed effects model random effects model distribution model probabilities (see Rigoux et al., 2014 Details section). group_BMS_fits wrapper group_BMS can used output fitRTConfModels, .e. data frame information criteria different models subjects, using information criterion approximate model evidence.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantitative Model Comparison — QuantModelComparison","text":"","code":"subject_modelweights(fits, measure = \"BIC\")  group_BMS_fits(fits, measure = \"BIC\", opts = list(), alpha0 = NULL)  group_BMS(mlp, opts = list(), alpha0 = NULL)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantitative Model Comparison — QuantModelComparison","text":"fits data frame returned fitRTConfModels. contain column modelindicating model name, column subject (alternatively sbj participant) indicating grouping structure data, column name given measure argument containing values information criterion used approximate model evidence. measure name column indicating information criterion approximate model evidence. outputs fitRTConfModels, available measures 'BIC', 'AIC', 'AICc'. approximation model evidence may used, measure transferred log model evidence taking -measure/2. opts list options iteration algorithm estimate parameter Dirichlet distribution. Following values may provided: maxiter maximum number iterations (Default: 200) tol tolerance changes free energy approximation stop algorithm, abs(FE(+1)-FE())<tol algorithm stopped (Default: 1e-4) eps number substitute values 0 calls log (Default: 1e-32) alpha0 positive numeric vector representing parameter Dirichlet distribution used prior model probabilities. length equal nrow(mlp) group_BMS, equal number unique names model column fits group_BMS_fits. mlp matrix containing logarithm marginal probabilities (.e. log model evidence) N columns representing individuals (grouping structure) K rows representing models.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantitative Model Comparison — QuantModelComparison","text":"subject_modelweights returns data frame subject-wise model probabilities rows subject columns models given name one column subject ID given input. group_BMS group_BMS_fits return list two entries: model_weights: matrix rows model (row names indicate model names group_BMS_fits group_BMS row names available mlp), following columns: alpha (alpha parameter Dirichlet posterior model probabilities population), r (mean probabilities model population), ep pep (exceedance protected exceedance probabilities model), fx_prob (posterior model probabilities fixed true model assumed population). summary_stats: vector giving statistics Bayesian model comparison may used analyses: Bayesian omnibus risks: bor (random effects model null model), bor_fixed (fixed effects model null model), bor_re_fixed (random effects model fixed effects model), estimations Free Energy Dirichlet distribution FE (random effects model), FE0 (null model), FEfixed (fixed effects model)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantitative Model Comparison — QuantModelComparison","text":"set function can used model comparisons group level models fitted hierarchical fitting models independently different subgroups (e.g. data different subjects). function subject_modelweights computes model weights subject separately inspect predominant models also heterogeneity within population. functions group_BMS group_BMS_fits can used Bayesian model selection group level following approach Rigoux et al. (2014). approach compares three different models generative structure data gives estimates model probabilities fixed random effects models. fixed effects model assumes single model generated data subjects. Thus, model weights may computed directly multiplying model weights computed subject-level. model formulated Bayesian way using Multinomial distribution models prior prior parameter alpha0 giving prior model weights. updated according marginal model likelihoods resulting single poterior vector model probabilities, reported column fx_prob model_weights data frame. random effects model assumes vector model probabilities subject may generated different model, drawn Multinomial distribution. Bayesian prior vector model probabilities given Dirichlet distribution parameter alpha0. function uses variational technique approximate alpha parameter posterior Dirichlet distribution. Within framework several statistics may used model selection. model_weights data frame reports posterior alpha parameter, well posterior mean r corresponding dirichlet distribution. exceedance probability ep represents probability given random sample Dirichlet distribution probability model greater probailities. Finally, protected exceedance probability (pep) scaled version ep multiplying ep one minus Bayesian omnibus risk (BOR). Bayesian omnibus risk posterior probability  null model random effects model. null model assumes models generating subjects' data equal probability results taking limit alpha0 towards infinity. Bayesian omnibus risk reported summary_stats together free energy approximation null, fixed effects, random effects models.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quantitative Model Comparison — QuantModelComparison","text":"Rigoux, L., Stephan, K. E., Friston, K. J., & Daunizeau, J. (2014). Bayesian model selection group studies - revisited. NeuroImage, 84, 971–985. doi: 10.1016/j.neuroimage.2013.08.065","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantitative Model Comparison — QuantModelComparison","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/QuantModelComparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantitative Model Comparison — QuantModelComparison","text":"","code":"# Define a data frame with information criteria from model fits # (this is a sub-data.frame from an output of fitRTConfModels with # 8 subjects, three models and rounded information criteria) fits <- data.frame(   participant = rep(1:8, each=3),   model = rep(c(\"dynaViTE\", \"2DSD\", \"PCRMt\"), 8),   BIC = c(5318, 5665, 1659, 3856, 5508, 3982, 3950, 3998,           4114, 4216, 4314, 4419, 3170, 3489, 3256, 1950,           1934, 2051, 3194, 3317, 3359, 9656, 10161, 4024),   AIC = c(5211, 5577, 1577, 3750, 5420, 3899, 3843, 3911,           4031, 4109, 4226, 4337, 3063, 3401, 3173, 1844,           1847, 1969, 3087, 3229, 3277, 9549, 10074, 3942),   AICc = c(5212, 5578, 1577, 3751, 5421, 3900, 3844, 3911,            4032, 4110, 4227, 4337, 3064, 3402, 3174, 1845,            1848, 1970, 3088, 3230, 3277, 9550, 10074, 3942)) # Compute subject-wise model probabitilities based on different ICs subject_modelweights(fits, measure = \"BIC\") #>           2DSD        PCRMt     dynaViTE participant #> 1 0.000000e+00 1.000000e+00 0.0000000000           1 #> 2 0.000000e+00 4.359610e-28 1.0000000000           2 #> 3 3.775135e-11 2.442601e-36 1.0000000000           3 #> 4 5.242886e-22 8.300611e-45 1.0000000000           4 #> 5 5.370691e-70 2.115131e-19 1.0000000000           5 #> 6 9.996646e-01 3.923080e-26 0.0003353501           6 #> 7 1.953842e-27 1.481512e-36 1.0000000000           7 #> 8 0.000000e+00 1.000000e+00 0.0000000000           8 subject_modelweights(fits, measure = \"AIC\") #>           2DSD        PCRMt  dynaViTE participant #> 1 0.000000e+00 1.000000e+00 0.0000000           1 #> 2 0.000000e+00 4.416326e-33 1.0000000           2 #> 3 1.713908e-15 1.500786e-41 1.0000000           3 #> 4 3.924396e-26 3.093350e-50 1.0000000           4 #> 5 4.020060e-74 1.299581e-24 1.0000000           5 #> 6 1.824255e-01 5.876547e-28 0.8175745           6 #> 7 1.462486e-31 5.521082e-42 1.0000000           7 #> 8 0.000000e+00 1.000000e+00 0.0000000           8 subject_modelweights(fits, measure = \"AICc\") #>           2DSD        PCRMt  dynaViTE participant #> 1 0.000000e+00 1.000000e+00 0.0000000           1 #> 2 0.000000e+00 4.416326e-33 1.0000000           2 #> 3 2.825757e-15 1.500786e-41 1.0000000           3 #> 4 3.924396e-26 5.100072e-50 1.0000000           4 #> 5 4.020060e-74 1.299581e-24 1.0000000           5 #> 6 1.824255e-01 5.876547e-28 0.8175745           6 #> 7 1.462486e-31 9.102726e-42 1.0000000           7 #> 8 0.000000e+00 1.000000e+00 0.0000000           8 # Conduct group-level Bayesian model selection based on BIC group_BMS_fits(fits, measure=\"BIC\") #> $model_weights #>             alpha         r     ep    pep fx_prob #> 2DSD     1.998461 0.1816782 0.0250 0.0250       0 #> PCRMt    1.500000 0.1363636 0.0142 0.0142       1 #> dynaViTE 7.501539 0.6819581 0.9608 0.9608       0 #>  #> $summary_stats #>          bor           FE          FE0      FEfixed    bor_fixed bor_re_fixed  #>        0.000     1715.178   -13010.289   -13433.099        1.000        0.000  #>    ## General group-level Bayesian model selection based on any marginal log-probabilities # Compute marginal log-likelihood based on BIC from fits mlp <- matrix(NA, ncol=8, nrow=3) for (i in 1:8) mlp[,i] <- fits[(i-1)*3 + 1:3, \"BIC\"] mlp <- - mlp/(2) rownames(mlp) <- c(\"dynaViTE\", \"2DSD\", \"PCRMt\") # conduct group BMS: group_BMS(mlp) #> $model_weights #>             alpha         r     ep    pep fx_prob #> dynaViTE 7.501539 0.6819581 0.9686 0.9686       0 #> 2DSD     1.998461 0.1816782 0.0237 0.0237       0 #> PCRMt    1.500000 0.1363636 0.0077 0.0077       1 #>  #> $summary_stats #>          bor           FE          FE0      FEfixed    bor_fixed bor_re_fixed  #>        0.000     1715.178   -13010.289   -13433.099        1.000        0.000  #>"},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"Probability densities random number generators response times, decisions confidence judgments independent Race Model (dIRM/rIRM) partially (anti-)correlated Race Model (dPCRM/rPCRM), .e. probability given response (response: winning accumulator (1 2)) given time (rt) confidence measure interval th1 th2 (Hellmann et al., 2023). definition confidence measure depends argument time_scaled (see Details). computations based Moreno-Bote (2010). parameters models mu1 mu2 drift rates, , b upper thresholds two accumulators s incremental standard deviation processes t0 st0  minimum range uniformly distributed non-decision times (including encoding motor time). computation confidence judgments, parameters th1 th2 lower upper bound interval confidence measure time_scaled TRUE weight parameters wx, wrt, wint computation confidence measure required (see Details).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"","code":"dIRM(rt, response = 1, mu1, mu2, a, b, th1, th2, wx = 1, wrt = 0,   wint = 0, t0 = 0, st0 = 0, s1 = 1, s2 = 1, s = NULL,   time_scaled = TRUE, precision = 6, step_width = NULL)  dIRM2(rt, response = 1, mu1, mu2, a, b, th1, th2, wx = 1, wrt = 0,   wint = 0, t0 = 0, st0 = 0, s1 = 1, s2 = 1, smu1 = 0, smu2 = 0,   sza = 0, szb = 0, s = NULL, time_scaled = TRUE, precision = 6,   step_width = NULL)  dIRM3(rt, response = 1, mu1, mu2, a, b, th1, th2, wx = 1, wrt = 0,   wint = 0, t0 = 0, st0 = 0, s1 = 1, s2 = 1, smu1 = 0, smu2 = 0,   s = NULL, time_scaled = TRUE, precision = 6, step_width = NULL)  dPCRM(rt, response = 1, mu1, mu2, a, b, th1, th2, wx = 1, wrt = 0,   wint = 0, t0 = 0, st0 = 0, s1 = 1, s2 = 1, s = NULL,   time_scaled = TRUE, precision = 6, step_width = NULL)  rIRM(n, mu1, mu2, a, b, wx = 1, wrt = 0, wint = 0, t0 = 0, st0 = 0,   s1 = 1, s2 = 1, s = NULL, smu1 = 0, smu2 = 0, sza = 0, szb = 0,   time_scaled = TRUE, delta = 0.01, maxrt = 15)  rPCRM(n, mu1, mu2, a, b, wx = 1, wrt = 0, wint = 0, t0 = 0, st0 = 0,   s1 = 1, s2 = 1, s = NULL, smu1 = 0, smu2 = 0, sza = 0, szb = 0,   time_scaled = TRUE, delta = 0.01, maxrt = 15)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"rt numeric vector RTs. convenience also data.frame columns rt response possible. response numeric vector values c(1, 2), giving accumulator hit boundary first. mu1 numeric. Drift rate first accumulator mu2 numeric. Drift rate second accumulator positive numeric. Distance starting point boundary first accumulator. b positive numeric. Distance starting point boundary second accumulator. th1 numeric. Lower bound interval range confidence measure. th2 numeric. Upper bound interval range confidence measure. wx numeric. Weight losing accumulator computation confidence measure. (Used time_scale=TRUE,  1) wrt numeric. Weight reaction time computation confidence measure. (Used time_scale=TRUE, Default 0) wint numeric. Weight interaction losing accumulator reaction time computation confidence measure. (Used time_scale=TRUE, Default 0) t0 numeric. Lower bound non-decision time component observable response times. Range: t0>=0. Default: 0. st0 numeric. Range uniform distribution non-decision time. Range: st0>=0. Default: 0. s1 numeric. Diffusion constant first accumulator.  Usually fixed 1 purposes scales parameters (see Details). Range: s1>0, Default: 1. s2 numeric. Diffusion constant second accumulator.  Usually fixed 1 purposes scales parameters (see Details). Range: s2>0, Default: 1. s numeric. Alternative way specify diffusion constants, assumed equal. (s1, s2 s) given, s1 s2 used. time_scaled logical. Whether confidence measure time-dependent. See Details. precision numerical scalar value. Precision calculation. Determines step size integration w.r.t. t0. Represents number decimals precisely computed average. Default 6. step_width numeric. Alternative way define precision integration w.r.t. t0 directly providing step size integration. smu1 numeric. -trial variability drift rate first accumulator. smu2 numeric. -trial variability drift rate second accumulator. sza numeric. -trial variability starting point first accumulator. szb numeric. -trial variability starting point second accumulator. n integer. number samples generated. delta numeric. Discretization step size simulations stochastic process maxrt numeric. Maximum decision time returned. simulation stochastic process exceeds decision time maxrt, response set 0 maxrt returned rt.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"dIRM dPCRM return numerical value probability density numerical vector length rt. rIRM dPCRM return data.frame four columns n rows. Column names rt (response time), response (1 2, indicating accumulator hit boundary first), xl (final state loosing accumulator), conf (value confidence measure; discretized!). race parameters (well response, th1, th2) recycled length result (either rt n). words, functions completely vectorized parameters even response.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"parameters formulated, s.t. accumulators start 0 trigger decision positive boundary b respectively. means, parameters positive. Internally computations adapt parametrization Moreno-Bote (2010). time_scaled determines whether confidence measure computed accordance Balance Evidence hypothesis (time_scaled=FALSE), .e. response 1 time T \\(X_2\\) second accumulator, $$conf = b - X_2(T)$$. Otherwise, time_scaled=TRUE (default), confidence computed linear combination Balance Evidence, decision time, interaction term, .e. $$conf = wx (b-X_2 (T)) + wrt\\frac{1}{\\sqrt{T}} + wint\\frac{b-X_2(T)}{\\sqrt{T}}.$$ Usually weights (wx, wrt, wint) sum 1, confidence thresholds (th1 th2) may scaled according sum. case, scaled accordingly internally! Usually, formula results lower confidence reaction time longer state second accumulator held constant. based optimal decision confidence Moreno-Bote (2010). convenience, likelihood function allows first argument data.frame containing information first second argument columns (.e., rt response). columns (well passing response separately argument) ignored. simulations done simulating normal variables discretized steps one process reaches boundary. boundary met within maximum time, response set 0.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"Similarly drift diffusion models (like ddiffusion ddynaViTE), s1 s2 scaling factors (s1 scales: mu1  , s2 scales: mu2 b, depending response: response=2, s1 scales th1,th2,wrt), otherwise s2 scaling factor. sometimes assumed (Moreno-Bote, 2010), noise terms equal, definitely fixed fitting.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292. Moreno-Bote, R. (2010). Decision confidence uncertainty diffusion models partially correlated neuronal integrators. Neural Computation, 22(7), 1786–1811. doi:10.1162/neco.2010.12-08-930","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"Sebastian Hellmann","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/RaceModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Independent and partially anti-correlated Race Model for Decision Confidence — RaceModels","text":"","code":"# Plot rt distribution ignoring confidence curve(dPCRM(x, 1, mu1=0.5, mu2=-0.5, a=1, b=1, th1=-Inf, th2=Inf, t0=0.1), xlim=c(0,2.5)) curve(dPCRM(x, 2, mu1=0.5, mu2=-0.5, a=1, b=1, th1=-Inf, th2=Inf, t0=0.1), col=\"red\", add=TRUE) curve(dIRM(x, 1, mu1=0.5, mu2=-0.5, a=1, b=1, th1=-Inf, th2=Inf, t0=0.1), lty=2,add=TRUE) curve(dIRM(x, 2, mu1=0.5, mu2=-0.5, a=1, b=1, th1=-Inf, th2=Inf, t0=0.1),       col=\"red\", lty=2, add=TRUE) # t0 indicates minimal response time possible abline(v=0.1)  ## Following example may be equivalently used for the IRM model functions. # Generate a random sample df1 <- rPCRM(5000,  mu1=0.2, mu2=-0.2, a=1, b=1, t0=0.1,             wx = 1) # Balance of Evidence # Same RT and response distribution but different confidence distribution df2 <- rPCRM(5000,  mu1=0.2, mu2=-0.2, a=1, b=1, t0=0.1,              wint = 0.2, wrt=0.8) head(df1) #>     rt response         xl     conf #> 1 0.85        2 -0.7063535 1.706354 #> 2 2.60        1 -0.8960838 1.896084 #> 3 2.66        1 -1.5737992 2.573799 #> 4 2.43        1 -1.6770023 2.677002 #> 5 0.85        1 -1.3350600 2.335060 #> 6 2.22        1 -3.7528246 4.752825  # Compute density with rt and response as separate arguments dPCRM(seq(0, 2, by =0.4), response= 2, mu1=0.2, mu2=-0.2, a=1, b=1, th1=0.5,          th2=2, wx = 0.3, wint=0.4, wrt=0.1, t0=0.1) #> [1] 0.00000000 0.26919023 0.20371811 0.10962250 0.06320931 0.03928042 # Compute density with rt and response in data.frame argument df1 <- subset(df1, response !=0) # drop trials where no accumulation hit its boundary dPCRM(df1[1:5,], mu1=0.2, mu2=-0.2, a=1, b=1, th1=0, th2=Inf, t0=0.1) #> [1] 0.21512158 0.04858269 0.04637073 0.05571430 0.33456555 # s1 and s2 scale other decision relevant parameters  s <- 2  # common (equal) standard deviation dPCRM(df1[1:5,], mu1=0.2*s, mu2=-0.2*s, a=1*s, b=1*s, th1=0, th2=Inf, t0=0.1, s1=s, s2=s) #> [1] 0.21512158 0.04858269 0.04637073 0.05571430 0.33456555 s1 <- 2  # different standard deviations s2 <- 1.5 dPCRM(df1[1:5,], mu1=0.2*s1, mu2=-0.2*s2, a=1*s1, b=1*s2, th1=0, th2=Inf, t0=0.1, s1=s1, s2=s2) #> [1] 0.21512158 0.04858269 0.04637073 0.05571430 0.33456555   # s1 and s2 scale also confidence parameters df1[1:5,]$response <- 2   # set response to 2 # for confidence it is important to scale confidence parameters with # the right variation parameter (the one of the loosing accumulator) dPCRM(df1[1:5,], mu1=0.2, mu2=-0.2, a=1, b=1,      th1=0.5, th2=2, wx = 0.3, wint=0.4, wrt=0.1, t0=0.1) #> [1] 0.18837588 0.02143073 0.02028593 0.02516631 0.18837588 dPCRM(df1[1:5,], mu1=0.2*s1, mu2=-0.2*s2, a=1*s1, b=1*s2,       th1=0.5, th2=2, wx = 0.3/s1, wint = 0.4/s1, wrt = 0.1, t0=0.1, s1=s1, s2=s2) #> [1] 0.18837588 0.02143073 0.02028593 0.02516631 0.18837588 dPCRM(df1[1:5,], mu1=0.2*s1, mu2=-0.2*s2, a=1*s1, b=1*s2,       th1=0.5*s1, th2=2*s1, wx = 0.3, wint = 0.4, wrt = 0.1*s1, t0=0.1, s1=s1, s2=s2) #> [1] 0.18837588 0.02143073 0.02028593 0.02516631 0.18837588  two_samples <- rbind(cbind(df1, ws=\"BoE\"),                    cbind(df2, ws=\"RT\")) # drop not finished decision processes two_samples <- two_samples[two_samples$response!=0,] # no difference in RT distributions boxplot(rt~ws+response, data=two_samples)  # but different confidence distributions boxplot(conf~ws+response, data=two_samples)  if (requireNamespace(\"ggplot2\", quietly = TRUE)) {  require(ggplot2)  ggplot(two_samples, aes(x=rt, y=conf))+      stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE, na.rm=TRUE) +       xlim(c(0.2, 1.3))+ ylim(c(0, 2.5))+       facet_grid(cols=vars(ws), rows=vars(response), labeller = \"label_both\") }  # Restricting to specific confidence region df1 <- df1[df1$conf >0 & df1$conf <1,] dPCRM(df1[1:5,], th1=0, th2=1,mu1=0.2, mu2=-0.2, a=1, b=1, t0=0.1,wx = 1 ) #> [1] 0.05990180 0.07576617 0.07576617 0.07169719 0.01821661"},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":null,"dir":"Reference","previous_headings":"","what":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"Likelihood function random number generator generalization 2DSD Model presented Pleskac & Busemeyer (2010). includes following parameters: DDM parameters: (threshold separation), z (starting point; relative), v (drift rate), t0 (non-decision time/ response time constant), d (differences speed response execution), sv (inter-trial-variability drift), st0 (inter-trial-variability non-decisional components), sz (inter-trial-variability relative starting point), s (diffusion constant).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"","code":"d2DSD(rt, response = \"upper\", th1, th2, a, v, t0 = 0, z = 0.5, d = 0,   sz = 0, sv = 0, st0 = 0, tau = 1, lambda = 0, s = 1,   simult_conf = FALSE, precision = 6, z_absolute = FALSE,   stop_on_error = TRUE, stop_on_zero = FALSE)  r2DSD(n, a, v, t0 = 0, z = 0.5, d = 0, sz = 0, sv = 0, st0 = 0,   tau = 1, lambda = 0, s = 1, delta = 0.01, maxrt = 15,   simult_conf = FALSE, z_absolute = FALSE, stop_on_error = TRUE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"rt vector RTs. convenience also data.frame columns rt response. response character vector, indicating decision, .e. boundary met first. Possible values c(\"upper\", \"lower\") (possibly abbreviated) \"upper\" default. Alternatively, numeric vector values 1=lower 2=upper -1=lower 1=upper, respectively. convenience, response converted via .numeric also allowing factors. Ignored first argument data.frame. th1 together th2: scalars numerical vectors giving lower upper bound interval, accumulator end time confidence judgment (.e. time rt+tau). values th2>=th1 accepted. th2 (see th1) threshold separation. Amount information considered decision. Large values indicate conservative decisional style. Typical range: 0.5 < < 2 v drift rate. Average slope information accumulation process. drift gives information speed direction accumulation information. Large (absolute) values drift indicate good performance. received information supports response linked upper threshold sign positive vice versa. Typical range: -5 < v < 5 t0 non-decision time response time constant (seconds). Lower bound duration non-decisional processes (encoding response execution). Typical range: 0.1 < t0 < 0.5. Default 0. z (default relative) starting point. Indicator priori bias decision making. relative starting point z deviates 0.5, amount information necessary decision differs response alternatives. Default 0.5 (.e., bias). d differences speed response execution (seconds). Positive values indicate response execution faster responses linked upper threshold responses linked lower threshold. Typical range: -0.1 < d < 0.1. Default 0. sz inter-trial-variability starting point. Range uniform distribution mean z describing distribution actual starting points specific trials. Values different 0 can predict fast errors (can slow computation considerably). Typical range: 0 < sz < 0.2. Default 0. (Given relative range .e. bounded 2*min(z, 1-z)) sv inter-trial-variability drift rate. Standard deviation normal distribution mean v describing distribution actual drift rates specific trials. Values different 0 can predict slow errors. Typical range: 0 < sv < 2. Default 0. st0 inter-trial-variability non-decisional components. Range uniform distribution mean t0 + st0/2 describing distribution actual t0 values across trials. Accounts response times t0. Reduces skew predicted RT distributions. Values different 0 can slow computation considerably. Typical range: 0 < st0 < 0.2. Default 0. tau post-decisional accumulation time. length time period decision made confidence judgment made. Range: tau>0. Default: tau=1. lambda power judgment time division confidence measure judgment time (Default: 0, .e. division version 2DSD proposed Pleskac Busemeyer) s diffusion constant. Standard deviation random noise diffusion process (.e., within-trial variability), scales , v, sv, th's. Needs fixed constant applications. Default 1. Note default used Ratcliff applications often 0.1. simult_conf logical. Whether experiment confidence reported simultaneously decision, decision confidence judgment assumed happened subsequent response computations different, observable interjudgment time (simult_conf FALSE). precision numerical scalar value. Precision calculation. Determines stepsize integration w.r.t. z t0. Represents number decimals precisely computed average. Default 6. z_absolute logical. Determines whether z treated absolute start point (TRUE) relative (FALSE; default) . stop_on_error diffusion functions return 0 parameters values outside allowed range (= FALSE) produce error case (= TRUE). stop_on_zero computation densities stop soon density value 0 occurs. may save lot time function used likelihood function. Default: FALSE n integer. number samples generated. delta numeric. Discretization step size simulations stochastic process maxrt numeric. Maximum decision time returned. simulation stochastic process exceeds decision time maxrt, response set 0 maxrt returned rt.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"d2DSD gives density/likelihood/probability diffusion process producing decision response time rt confidence judgment corresponding interval [ th1, th2]. value numeric vector length rt. r2DSD returns data.frame three columns n rows. Column names rt (response time), response (-1 (lower) 1 (upper), indicating bound hit), conf (value confidence measure; discretized!). distribution parameters (well response, tau, th1 th2) recycled length result. words, functions completely vectorized parameters even response boundary.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"confidence: tau (post-decisional accumulation time), lambda exponent judgment time division judgment time confidence measure, th1 th2 (lower upper thresholds confidence interval). Note parameterization defaults non-decision time variability st0 diffusion constant s differ often found literature. drift diffusion model (DDM; Ratcliff McKoon, 2008) mathematical model two-choice discrimination tasks. based assumption information accumulated continuously one two decision thresholds hit. introduction see Ratcliff McKoon (2008). 2DSD extension DDM explain confidence judgments based preceding decision. assumes post decisional period process continues accumulation information. end period confidence judgment (.e. judgment probability decision correct) made based state process. , use given interval, given th1 th2, assuming data given discrete judgments pre-processed, s.t. discrete ratings translated respective intervals. 2DSD Model proposed Pleskac Busemeyer (2010). functions fully vectorized across parameters well response match length rt (.e., output always length equal rt). allows trial wise parameters model parameter. convenience, function allows first argument data.frame containing information first second argument two columns (.e., rt response). columns (well passing response separately argument) ignored.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"parameterization non-decisional components, t0 st0, differs parameterization sometimes used literature. present case t0 lower bound uniform distribution length st0, midpoint. parameterization employed line functions rtdists package. default diffusion constant s 1 0.1 applications Roger Ratcliff others. Usually s specified parameters: , v, sv, may scaled produce distributions (done code). function code basically extension ddiffusion function package rtdists Ratcliff diffusion model.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"Pleskac, T. J., & Busemeyer, J. R. (2010). Two-Stage Dynamic Signal Detection: Theory Choice, Decision Time, Confidence, Psychological Review, 117(3), 864-901. doi:10.1037/a0019737 Ratcliff, R., & McKoon, G. (2008). diffusion decision model: Theory data two-choice decision tasks. Neural Computation, 20(4), 873-922.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"original rtdists package: Underlying C code Jochen Voss Andreas Voss. Porting R wrapping Matthew Gretton, Andrew Heathcote, Scott Brown, Henrik Singmann. qdiffusion Henrik Singmann. d2DSD function C code extended Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/d2DSD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pleskac and Busemeyer's 2DSD Model for Decision Confidence — d2DSD","text":"","code":"# Plot rt distribution ignoring confidence curve(d2DSD(x, \"upper\", -Inf, Inf, tau=1, a=2, v=0.4, sz=0.2, sv=0.9), xlim=c(0, 2), lty=2) curve(d2DSD(x, \"lower\", -Inf, Inf, tau=1, a=2, v=0.4, sz=0.2, sv=0.9), col=\"red\", lty=2, add=TRUE) curve(d2DSD(x, \"upper\", -Inf, Inf, tau=1, a=2, v=0.4),add=TRUE) curve(d2DSD(x, \"lower\", -Inf, Inf, tau=1, a=2, v=0.4), col=\"red\", add=TRUE)  # Generate a random sample dfu <- r2DSD(5000, a=2,v=0.5,t0=0,z=0.5,d=0,sz=0,sv=0, st0=0,  tau=1, s=1) # Same RT distribution but upper and lower responses changed dfl <- r2DSD(50, a=2,v=-0.5,t0=0,z=0.5,d=0,sz=0,sv=0, st0=0,  tau=1, s=1) head(dfu) #>     rt response     conf #> 1 0.38        1 3.124498 #> 2 0.42       -1 1.670015 #> 3 0.33        1 2.573722 #> 4 0.40        1 2.449366 #> 5 1.58        1 1.261206 #> 6 0.88        1 1.019089  d2DSD(dfu, th1=-Inf, th2=Inf, a=2, v=.5)[1:5] #> [1] 0.7182537 0.2564342 0.7317163 0.7084763 0.1513271 # Scaling diffusion parameters leads do same density values s <- 2 d2DSD(dfu, th1=-Inf, th2=Inf, a=2*s, v=.5*s, s=2)[1:5] #> [1] 0.7182537 0.2564342 0.7317163 0.7084763 0.1513271 if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   require(ggplot2)   ggplot(dfu, aes(x=rt, y=conf))+     stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE, na.rm=TRUE) +     facet_wrap(~response) }  boxplot(conf~response, data=dfu)   # Restricting to specific confidence region dfu <- dfu[dfu$conf >0 & dfu$conf <1,] d2DSD(dfu, th1=0, th2=1, a=2, v=0.5)[1:5] #> [1] 0.08213661 0.02864404 0.09000495 0.15876895 0.01361479  # If lower confidence threshold is higher than the upper, the function throws an error, # except when stop_on_error is FALSE d2DSD(dfu[1:5,], th1=1, th2=0, a=2, v=0.5, stop_on_error = FALSE) #> error: invalid parameter combination th1 = 1, th2 = 0 #> error: invalid parameter combination th1 = 1, th2 = 0 #> [1] 0 0 0 0 0"},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":null,"dir":"Reference","previous_headings":"","what":"Drift Diffusion Model with time-dependent confidence — dDDConf","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"Likelihood function random number generator Drift Diffusion Model confidence computed decision time. includes following parameters: DDM parameters: (threshold separation), z (starting point; relative), v (drift rate), t0 (non-decision time/ response time constant), d (differences speed response execution), sv (inter-trial-variability drift), st0 (inter-trial-variability non-decision components), sz (inter-trial-variability relative starting point), s (diffusion constant).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"","code":"dDDConf(rt, response = \"upper\", th1, th2, a, v, t0 = 0, z = 0.5, d = 0,   sz = 0, sv = 0, st0 = 1, s = 1, precision = 3,   z_absolute = FALSE, stop_on_error = TRUE, stop_on_zero = FALSE,   st0stepsize = 0.001)  rDDConf(n, a, v, t0 = 0, z = 0.5, d = 0, sz = 0, sv = 0, st0 = 2,   s = 1, delta = 0.01, maxrt = 15, z_absolute = FALSE,   stop_on_error = TRUE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"rt vector RTs. convenience also data.frame columns rt response. response character vector, indicating decision, .e. boundary met first. Possible values c(\"upper\", \"lower\") (possibly abbreviated) \"upper\" default. Alternatively, numeric vector values 1=lower 2=upper -1=lower 1=upper, respectively. convenience, response converted via .numeric also allowing factors. Ignored first argument data.frame. th1 together th2: scalars numerical vectors giving lower upper bound interval, accumulator end time confidence judgment (.e. time rt+tau). values th2>=th1 accepted. th2 (see th1) threshold separation. Amount information considered decision. Large values indicate conservative decisional style. Typical range: 0.5 < < 2 v drift rate. Average slope information accumulation process. drift gives information speed direction accumulation information. Large (absolute) values drift indicate good performance. received information supports response linked upper threshold sign positive vice versa. Typical range: -5 < v < 5 t0 non-decision time response time constant (seconds). Lower bound duration non-decisional processes (encoding response execution). Typical range: 0.1 < t0 < 0.5. Default 0. z (default relative) starting point. Indicator priori bias decision making. relative starting point z deviates 0.5, amount information necessary decision differs response alternatives. Default 0.5 (.e., bias). d differences speed response execution (seconds). Positive values indicate response execution faster responses linked upper threshold responses linked lower threshold. Typical range: -0.1 < d < 0.1. Default 0. sz inter-trial-variability starting point. Range uniform distribution mean z describing distribution actual starting points specific trials. Values different 0 can predict fast errors (can slow computation considerably). Typical range: 0 < sz < 0.2. Default 0. (Given relative range .e. bounded 2*min(z, 1-z)) sv inter-trial-variability drift rate. Standard deviation normal distribution mean v describing distribution actual drift rates specific trials. Values different 0 can predict slow errors. Typical range: 0 < sv < 2. Default 0. st0 inter-trial-variability non-decisional components. Range uniform distribution mean t0 + st0/2 describing distribution actual t0 values across trials. Accounts response times t0. Reduces skew predicted RT distributions. Values different 0 can slow computation considerably. Typical range: 0 < st0 < 0.2. Default 0. s diffusion constant. Standard deviation random noise diffusion process (.e., within-trial variability), scales , v, sv, th's. Needs fixed constant applications. Default 1. Note default used Ratcliff applications often 0.1. precision numerical scalar value. Precision calculation. Corresponds stepsize integration w.r.t. z. Default 1e-5. z_absolute logical. Determines whether z treated absolute start point (TRUE) relative (FALSE; default) . stop_on_error diffusion functions return 0 parameters values outside allowed range (= FALSE) produce error case (= TRUE). stop_on_zero computation densities stop soon density value 0 occurs. may save lot time function used likelihood function. Default: FALSE st0stepsize numerical scalar value. Stepsize integration t0. n integer. number samples generated. delta numeric. Discretization step size simulations stochastic process maxrt numeric. Maximum decision time returned. simulation stochastic process exceeds decision time maxrt, response set 0 maxrt returned rt.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"dDDConf gives density/likelihood/probability diffusion process producing decision response time rt confidence judgment corresponding interval [ th1, th2]. value numeric vector length rt. rDDConf returns data.frame three columns n rows. Column names rt (response time), response (-1 (lower) 1 (upper), indicating bound hit), conf decision time (without non-decision time component; discretized!). distribution parameters (well response, th1 th2) recycled length result. words, functions completely vectorized parameters even response boundary.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"confidence part: th1 th2 (lower upper thresholds decision time interval). Note parameterization defaults non-decision time variability st0 diffusion constant s differ often found literature. Ratcliff diffusion model (Ratcliff McKoon, 2008) mathematical model two-choice discrimination tasks. based assumption information accumulated continuously one two decision thresholds hit. introduction see Ratcliff McKoon (2008). model incorporates idea, decision time T informative stimulus difficulty thus confidence computed monotone function \\(\\frac{1}{\\sqrt{T}}\\). implementation, confidence decision time, directly. , use interval, given th1 th2, assuming data given discrete judgments pre-processed, s.t. discrete ratings translated respective intervals. functions fully vectorized across parameters well response match length rt (.e., output always length equal rt). allows trial wise parameters model parameter. convenience, function allows first argument data.frame containing information first second argument two columns (.e., rt response). columns (well passing response separately argument) ignored.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"parameterization non-decisional components, t0 st0, differs parameterization sometimes used literature. present case t0 lower bound uniform distribution length st0, midpoint. parameterization employed line functions rtdists package. default diffusion constant s 1 0.1 applications Roger Ratcliff others. Usually s specified parameters: , v, sv, may scaled produce distributions (done code). function code basically extension ddiffusion function package rtdists Ratcliff diffusion model.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"Ratcliff, R., & McKoon, G. (2008). diffusion decision model: Theory data two-choice decision tasks. Neural Computation, 20(4), 873-922. Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dDDConf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drift Diffusion Model with time-dependent confidence — dDDConf","text":"original rtdists package: Underlying C code Jochen Voss Andreas Voss. Porting R wrapping Matthew Gretton, Andrew Heathcote, Scott Brown, Henrik Singmann. qdiffusion Henrik Singmann. dDDConf function C code extended Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynConfiR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The dynConfiR Package — dynConfiR-package","title":"The dynConfiR Package — dynConfiR-package","text":"Dynamic Models Confidence Response Time Distributions","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynConfiR-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The dynConfiR Package — dynConfiR-package","text":"Provides response time confidence distributions (density/PDF) following models: dynaViTE,dynWEV, 2DSD, 2DSDT, IRM PCRM","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynConfiR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The dynConfiR Package — dynConfiR-package","text":"Sebastian Hellmann","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"Likelihood function random number generator dynaViTE dynWEV model (Hellmann et al., 2023). includes following parameters drift diffusion model: (threshold separation), z (starting point; relative), v (drift rate), t0 (non-decision time/response time constant), d (differences speed response execution), sv (inter-trial-variability drift), st0 (inter-trial-variability non-decisional components), sz (inter-trial-variability relative starting point) s (diffusion constant). computation confidence following parameters added: tau (post-decisional accumulation time), w (weight decision evidence (weight visibility (1-w))), muvis (mean drift rate visibility process), svis (diffusion constant visibility process), sigvis (variability drift rate visibility accumulator), th1 th2 (lower upper thresholds confidence interval). lambda dynaViTE , exponent judgment time division judgment time confidence measure, Note parametrization defaults non-decision time variability st0 diffusion constant s differ often found literature. Likelihood function random number generator dynaViTE dynWEV model (Hellmann et al., 2023). includes following parameters drift diffusion model: (threshold separation), z (starting point; relative), v (drift rate), t0 (non-decision time/response time constant), d (differences speed response execution), sv (inter-trial-variability drift), st0 (inter-trial-variability non-decisional components), sz (inter-trial-variability relative starting point) s (diffusion constant). computation confidence following parameters added: tau (post-decisional accumulation time), w (weight decision evidence (weight visibility (1-w))), muvis (mean drift rate visibility process), svis (diffusion constant visibility process), sigvis (variability drift rate visibility accumulator), th1 th2 (lower upper thresholds confidence interval). lambda dynaViTE , exponent judgment time division judgment time confidence measure, Note parametrization defaults non-decision time variability st0 diffusion constant s differ often found literature.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"","code":"dWEV(rt, response = \"upper\", th1, th2, a, v, t0 = 0, z = 0.5, d = 0,   sz = 0, sv = 0, st0 = 0, tau = 1, w = 0.5, muvis = NULL,   sigvis = 0, svis = 1, lambda = 0, s = 1, simult_conf = FALSE,   precision = 6, z_absolute = FALSE, stop_on_error = TRUE,   stop_on_zero = FALSE)  ddynaViTE(rt, response = \"upper\", th1, th2, a, v, t0 = 0, z = 0.5,   d = 0, sz = 0, sv = 0, st0 = 0, tau = 1, w = 0.5, muvis = NULL,   sigvis = 0, svis = 1, lambda = 0, s = 1, simult_conf = FALSE,   precision = 6, z_absolute = FALSE, stop_on_error = TRUE,   stop_on_zero = FALSE)  rdynaViTE(n, a, v, t0 = 0, z = 0.5, d = 0, sz = 0, sv = 0, st0 = 0,   tau = 1, w = 0.5, muvis = NULL, sigvis = 0, svis = 1, lambda = 0,   s = 1, delta = 0.01, maxrt = 15, simult_conf = FALSE,   z_absolute = FALSE, stop_on_error = TRUE, process_results = FALSE)  dWEV(rt, response = \"upper\", th1, th2, a, v, t0 = 0, z = 0.5, d = 0,   sz = 0, sv = 0, st0 = 0, tau = 1, w = 0.5, muvis = NULL,   sigvis = 0, svis = 1, lambda = 0, s = 1, simult_conf = FALSE,   precision = 6, z_absolute = FALSE, stop_on_error = TRUE,   stop_on_zero = FALSE)  rWEV(n, a, v, t0 = 0, z = 0.5, d = 0, sz = 0, sv = 0, st0 = 0,   tau = 1, w = 0.5, muvis = NULL, sigvis = 0, svis = 1, lambda = 0,   s = 1, delta = 0.01, maxrt = 15, simult_conf = FALSE,   z_absolute = FALSE, stop_on_error = TRUE, process_results = FALSE)  ddynaViTE(rt, response = \"upper\", th1, th2, a, v, t0 = 0, z = 0.5,   d = 0, sz = 0, sv = 0, st0 = 0, tau = 1, w = 0.5, muvis = NULL,   sigvis = 0, svis = 1, lambda = 0, s = 1, simult_conf = FALSE,   precision = 6, z_absolute = FALSE, stop_on_error = TRUE,   stop_on_zero = FALSE)  rdynaViTE(n, a, v, t0 = 0, z = 0.5, d = 0, sz = 0, sv = 0, st0 = 0,   tau = 1, w = 0.5, muvis = NULL, sigvis = 0, svis = 1, lambda = 0,   s = 1, delta = 0.01, maxrt = 15, simult_conf = FALSE,   z_absolute = FALSE, stop_on_error = TRUE, process_results = FALSE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"rt vector RTs. convenience also data.frame columns rt response. response character vector, indicating decision, .e. boundary met first. Possible values c(\"upper\", \"lower\") (possibly abbreviated) \"upper\" default. Alternatively, numeric vector values 1=lower 2=upper -1=lower 1=upper, respectively. convenience, response converted via .numeric also allowing factors. Ignored first argument data.frame. th1 together th2: scalars numerical vectors giving lower upper bound interval confidence measure (see Details). values th2>=th1 accepted. th2 (see th1) threshold separation. Amount information considered decision. Large values indicate conservative decisional style. Typical range: 0.5 < < 2 v drift rate decision process. Average slope information accumulation process. drift gives information speed direction accumulation information. Large (absolute) values drift indicate good performance. received information supports response linked upper threshold sign positive vice versa. Typical range: -5 < v < 5 t0 non-decision time response time constant (seconds). Lower bound duration non-decisional processes (encoding response execution). Typical range: 0.1 < t0 < 0.5. Default 0. z (default relative) starting point decision process. Indicator priori bias decision making. relative starting point z deviates 0.5, amount information necessary decision differs response alternatives. Default 0.5 (.e., bias). d differences speed response execution (seconds). Positive values indicate response execution faster responses linked upper threshold responses linked lower threshold. Typical range: -0.1 < d < 0.1. Default 0. sz inter-trial-variability starting point. Range uniform distribution mean z describing distribution actual starting points specific trials. Values different 0 can predict fast errors (can slow computation considerably). Typical range: 0 < sz < 0.2. Default 0. (Given relative range .e. bounded 2*min(z, 1-z)) sv inter-trial-variability drift rate decision process. Standard deviation normal distribution mean v describing distribution actual drift rates specific trials. Values different 0 can predict slow errors. Typical range: 0 < sv < 2. Default 0. st0 inter-trial-variability non-decisional components. Range uniform distribution mean t0 + st0/2 describing distribution actual t0 values across trials. Accounts response times t0. Reduces skew predicted RT distributions. Values different 0 can slow computation considerably. Typical range: 0 < st0 < 0.2. Default 0. tau post-decisional accumulation time; length time period decision made confidence judgment made. Range: tau>0. Default: tau=1. w weight put final state decision accumulator confidence computation. 1-w weight visibility accumulator. Range: 0<w<1. Default: w=0.5. muvis mean drift visibility process. NULL (default), muvis set absolute value v. sigvis variability drift rate visibility process (varies independently drift rate decision process). Range: sigvis>=0. Default: sigvis=0. svis diffusion constant visibility process. Range: svis>0. Default: svis=1. lambda power judgment time division confidence measure judgment time (Default: 0, .e. division version dynWEV proposed Hellmann et al., 2023) s diffusion constant decision process; standard deviation random noise diffusion process (.e., within-trial variability), scales parameters (see Note). Needs fixed constant applications. Default 1. Note default used Ratcliff applications often 0.1. simult_conf logical. Whether experiment confidence reported simultaneously decision. case decision confidence judgment assumed happened subsequent response. Therefore tau included response time. decision reported confidence report, simul_conf FALSE. precision numerical scalar value. Precision calculation. Determines step size integration w.r.t. z t0. Represents number decimals precisely computed average. Default 6. z_absolute logical. Determines whether z treated absolute start point (TRUE) relative (FALSE; default) . stop_on_error diffusion functions return 0 parameters values outside allowed range (= FALSE) produce error case (= TRUE). stop_on_zero computation densities stop soon density value 0 occurs. may save lot time function used likelihood function. Default: FALSE n integer. number samples generated. delta numeric. Discretization step size simulations stochastic process maxrt numeric. Maximum decision time returned. simulation stochastic process exceeds decision time maxrt, response set 0 maxrt returned rt. process_results logical. Whether output simulations contain final state decision (visibility) process additional column. Default FALSE, meaning additional columns final process states returned.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"ddynaViTE gives density/likelihood/probability diffusion process producing decision response time rt confidence judgment corresponding interval [ th1, th2]. value numeric vector length rt. rdynaViTE returns data.frame three columns n rows. Column names rt (response time), response (-1 (lower) 1 (upper), indicating bound hit), conf (value confidence measure; discretized!). distribution parameters (well response, tau, th1 th2, w sig) recycled length result. words, functions completely vectorized parameters even response boundary. ddynaViTE gives density/likelihood/probability diffusion process producing decision response time rt confidence judgment corresponding interval [ th1, th2]. value numeric vector length rt. rdynaViTE returns data.frame three columns n rows. Column names rt (response time), response (-1 (lower) 1 (upper), indicating bound hit), conf (value confidence measure; discretized!). distribution parameters (well response, tau, th1 th2, w sig) recycled length result. words, functions completely vectorized parameters even response boundary.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"function dWEV renamed ddynaViTE version 0.1.0 package. still reasons backwards compatibility. function just calls ddynaViTE function (produces deprecation warning). dynamical visibility, time, evidence (dynaViTE) model weighted evidence visibility model (dynWEV) extensions 2DSD model decision confidence (see d2DSD). assumes decision follows drift diffusion model two additional assumptions account confidence. First, post-decisional period evidence accumulation tau. Second, another accumulation process accrues information stimulus reliability (visibility process) including also evidence decision irrelevant features. See Hellmann et al. (2023) information. measure confidence weighted sum final state decision process X visibility process V power-function total accumulation time, .e. decision time T (response time), confidence variable $$conf = \\frac{wX(T+\\tau) + (1-w) V(T+\\tau)}{(T+\\tau)^\\lambda}.$$ dynWEV model special case dynaViTE, parameter lambda=0. functions fully vectorized across parameters well response match length rt (.e., output always length equal rt). allows trial wise parameters model parameter. convenience, function allows first argument data.frame containing information first second argument two columns (.e., rt response). columns (well passing response separately argument) ignored. functions dWEV rWEV renamed ddynaViTE rdynaViTE, respectively version 0.1.0 package. still reasons backwards compatibility. functions just calls counterpar ddynaViTE rdynaViTE (produce deprecation warning). dynamical visibility, time, evidence (dynaViTE) model weighted evidence visibility model (dynWEV) extensions 2DSD model decision confidence (see d2DSD). assumes decision follows drift diffusion model two additional assumptions account confidence. First, post-decisional period evidence accumulation tau. Second, another accumulation process accrues information stimulus reliability (visibility process) including also evidence decision irrelevant features. See Hellmann et al. (2023) information. measure confidence weighted sum final state decision process X visibility process V power-function total accumulation time, .e. decision time T (response time), confidence variable $$conf = \\frac{wX(T+\\tau) + (1-w) V(T+\\tau)}{(T+\\tau)^\\lambda}.$$ dynWEV model special case dynaViTE, parameter lambda=0. functions fully vectorized across parameters well response match length rt (.e., output always length equal rt). allows trial wise parameters model parameter. convenience, function allows first argument data.frame containing information first second argument two columns (.e., rt response). columns (well passing response separately argument) ignored.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"parameterization non-decisional components, t0 st0, differs parameterization sometimes used literature. present case t0 lower bound uniform distribution length st0, midpoint. parameterization employed line functions rtdists package. default diffusion constant s 1 0.1 applications Roger Ratcliff others. Usually s specified parameters: , v, sv, muvis, sigvis, svis respectively, may scaled produce distributions (done code). function code basically extension ddiffusion function package rtdists Ratcliff diffusion model. parameterization non-decisional components, t0 st0, differs parameterization sometimes used literature. present case t0 lower bound uniform distribution length st0, midpoint. parameterization employed line functions rtdists package. default diffusion constant s 1 0.1 applications Roger Ratcliff others. Usually s specified parameters: , v, sv, muvis, sigvis, svis respectively, may scaled produce distributions (done code). function code basically extension ddiffusion function package rtdists Ratcliff diffusion model.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292. Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"Sebastian Hellmann","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/dynaViTE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamical visibility, time, and evidence model (dynaViTE) and Dynamical weighted evidence and visibility model (dynWEV) — dynaViTE","text":"","code":"# Plot rt distribution ignoring confidence curve(ddynaViTE(x, \"upper\", -Inf, Inf, tau=1, a=2, v=0.4, sz=0.2, sv=0.9), xlim=c(0, 2), lty=2)  curve(ddynaViTE(x, \"lower\", -Inf, Inf,tau=1, a=2, v=0.4, sz=0.2, sv=0.9)) curve(ddynaViTE(x, \"upper\", -Inf, Inf,  tau=1, a=2, v=0.4),add=TRUE) curve(ddynaViTE(x, \"lower\", -Inf, Inf, tau=1, a=2, v=0.4), col=\"red\", add=TRUE)  # Generate a random sample df1 <- rdynaViTE(5000, a=2,v=0.5,t0=0,z=0.5,d=0,sz=0,sv=0, st0=0,  tau=1, s=1, w=0.9) # Same RT and response distribution but different confidence distribution df2 <- rdynaViTE(5000, a=2,v=0.5,t0=0,z=0.5,d=0,sz=0,sv=0, st0=0,  tau=1, s=1, w=0.1) head(df1) #>     rt response        conf #> 1 0.98       -1 -0.01655729 #> 2 0.48        1  2.69863781 #> 3 0.40       -1 -0.81784273 #> 4 0.26        1  1.52861156 #> 5 1.59        1  1.05645202 #> 6 0.53        1  1.67157406  # Scaling diffusion parameters leads do same density values ddynaViTE(df1[1:5,], th1=-Inf, th2=Inf, a=2, v=.5)[1:5] #> [1] 0.1257726 0.6568019 0.2606339 0.7019412 0.1492849 s <- 2 ddynaViTE(df1[1:5,], th1=-Inf, th2=Inf, a=2*s, v=.5*s, s=2)[1:5] #> [1] 0.1257726 0.6568019 0.2606339 0.7019412 0.1492849  # Diffusion constant also scales confidence parameters ddynaViTE(df1[1:5,], th1=0.2, th2=1, a=2, v=.5, sv=0.2, w=0.5, sigvis = 0.2, svis = 1)[1:5] #> [1] 0.04383528 0.20412830 0.10260065 0.23525681 0.03337382 s <- 2 ddynaViTE(df1[1:5,], th1=0.2*s, th2=1*s, a=2*s, v=.5*s, s=2,      sv=0.2*s, w=0.5, sigvis=0.2*s, svis=1*s)[1:5] #> [1] 0.04383528 0.20412830 0.10260065 0.23525681 0.03337382   two_samples <- rbind(cbind(df1, w=\"high\"),                      cbind(df2, w=\"low\")) # no difference in RT distributions boxplot(rt~w+response, data=two_samples)  # but different confidence distributions boxplot(conf~w+response, data=two_samples)  if (requireNamespace(\"ggplot2\", quietly = TRUE)) {  require(ggplot2)  ggplot(two_samples, aes(x=rt, y=conf))+   stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE, na.rm=TRUE) +   xlim(c(0, 2))+ ylim(c(-1.5, 4))+   facet_grid(cols=vars(w), rows=vars(response), labeller = \"label_both\") }   # Restricting to specific confidence region df1 <- df1[df1$conf >0 & df1$conf <1,] ddynaViTE(df1[1:5,], th1=0, th2=1, a=2, v=0.5)[1:5] #> [1] 0.25388325 0.19546697 0.08222319 0.10804081 0.17762746  # If lower confidence threshold is higher than the upper, the function throws an error, # except when stop_on_error is FALSE ddynaViTE(df1[1:5,], th1=1, th2=0, a=2, v=0.5, stop_on_error = FALSE) #> error: invalid parameter combination th1 = 1, th2 = 0 #> error: invalid parameter combination th1 = 1, th2 = 0 #> [1] 0 0 0 0 0  # Plot rt distribution ignoring confidence curve(ddynaViTE(x, \"upper\", -Inf, Inf, tau=1, a=2, v=0.4,                     sz=0.2, sv=0.9),       xlim=c(0, 2), lty=2) curve(ddynaViTE(x, \"lower\", -Inf, Inf,tau=1, a=2, v=0.4,                     sz=0.2, sv=0.9),      col=\"red\", lty=2, add=TRUE) curve(ddynaViTE(x, \"upper\", -Inf, Inf,  tau=1, a=2, v=0.4), add=TRUE) curve(ddynaViTE(x, \"lower\", -Inf, Inf, tau=1, a=2, v=0.4), add=TRUE)  # Generate a random sample df1 <- rdynaViTE(5000, a=2,v=0.5,t0=0,z=0.5,d=0,sz=0,sv=0, st0=0,  tau=1, s=1, w=0.9) # Same RT and response distribution but different confidence distribution df2 <- rdynaViTE(5000, a=2,v=0.5,t0=0,z=0.5,d=0,sz=0,sv=0, st0=0,  tau=1, s=1, w=0.1) head(df1) #>     rt response      conf #> 1 0.19        1 0.6127601 #> 2 0.87        1 1.1658631 #> 3 0.62       -1 0.4252639 #> 4 0.57        1 2.9902668 #> 5 2.46       -1 1.3804732 #> 6 0.83       -1 0.5802698  # Scaling diffusion parameters leads do same density values ddynaViTE(df1[1:5,], th1=-Inf, th2=Inf, a=2, v=.5)[1:5] #> [1] 0.55812592 0.39685119 0.20380705 0.59043553 0.01684051 s <- 2 ddynaViTE(df1[1:5,], th1=-Inf, th2=Inf, a=2*s, v=.5*s, s=2)[1:5] #> [1] 0.55812592 0.39685119 0.20380705 0.59043553 0.01684051  # Diffusion constant also scales confidence parameters ddynaViTE(df1[1:5,], th1=0.2, th2=1, a=2, v=.5, sv=0.2, w=0.5, sigvis = 0.2, svis = 1)[1:5] #> [1] 0.191772195 0.108890598 0.076615181 0.178125667 0.004375886 s <- 2 ddynaViTE(df1[1:5,], th1=0.2*s, th2=1*s, a=2*s, v=.5*s, s=2,      sv=0.2*s, w=0.5, sigvis=0.2*s, svis=1*s)[1:5] #> [1] 0.191772195 0.108890598 0.076615181 0.178125667 0.004375886   two_samples <- rbind(cbind(df1, w=\"high\"),                      cbind(df2, w=\"low\")) # no difference in RT distributions boxplot(rt~w+response, data=two_samples)  # but different confidence distributions boxplot(conf~w+response, data=two_samples)  if (requireNamespace(\"ggplot2\", quietly = TRUE)) {  require(ggplot2)  ggplot(two_samples, aes(x=rt, y=conf))+   stat_density_2d(aes(fill = after_stat(density)), geom = \"raster\", contour = FALSE, na.rm=TRUE) +   xlim(c(0, 2))+ ylim(c(-1.5, 4))+   facet_grid(cols=vars(w), rows=vars(response), labeller = \"label_both\") }   # Restricting to specific confidence region df1 <- df1[df1$conf >0 & df1$conf <1,] ddynaViTE(df1[1:5,], th1=0, th2=1, a=2, v=0.5)[1:5] #> [1] 0.22100188 0.09291237 0.06716650 0.02746697 0.22777846  # If lower confidence threshold is higher than the upper, the function throws an error, # except when stop_on_error is FALSE ddynaViTE(df1[1:5,], th1=1, th2=0, a=2, v=0.5, stop_on_error = FALSE) #> error: invalid parameter combination th1 = 1, th2 = 0 #> error: invalid parameter combination th1 = 1, th2 = 0 #> [1] 0 0 0 0 0"},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for fitting sequential sampling confidence models — fitRTConf","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"Fits parameters different models response time confidence, including 2DSD model (Pleskac & Busemeyer, 2010), dynWEV, DDConf, various flavors race models (Hellmann et al., 2023). model fit specified argument model. ML method implemented. See ddynaViTE, d2DSD, dRM, dMTLNR information parameters Details -fitted parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"","code":"fitRTConf(data, model = \"dynWEV\", fixed = list(sym_thetas = FALSE),   init_grid = NULL, grid_search = TRUE, data_names = list(),   nRatings = NULL, restr_tau = Inf, precision = 3, logging = FALSE,   opts = list(), optim_method = \"bobyqa\", useparallel = FALSE,   n.cores = NULL, ...)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"data data.frame row one trial, containing following variables (column names can changed passing additional arguments form condition=\"contrast\"): condition (necessary; different levels stimulus quality, transformed factor), rating (discrete confidence judgments, given integer vector; otherwise transformed integer), rt (giving reaction times decision task), either 2 following (see details information accepted formats): stimulus (encoding stimulus category binary choice task), response (encoding decision response), correct (encoding whether decision correct; values 0, 1) sbj participant (optional; giving subject ID; relevant logging = TRUE; unique ID used saved files interim results logging messages; non-unique missing logging =TRUE, 999 used ) model character scalar. One \"dynWEV\", \"2DSD\", \"IRM\", \"PCRM\", \"IRMt\", \"PCRMt\", \"MTLNR\", \"DDConf\" model fit. fixed list. List parameter-value pairs parameters fitted. See Details. init_grid data.frame NULL. Grid initial parameter search. row one parameter constellation. See details information. NULL default grid used. grid_search logical. FALSE, grid search optimization algorithm omitted. fitting started mean parameter set default grid (init_grid=NULL) directly rows init_grid, NULL. (Default: TRUE) data_names named list (e.g. c(rating=\"confidence\")). Alternative possibility giving column names variables data. default column names identical ones given data argument description. nRatings integer. Number rating categories. NULL, maximum rating length(unique(rating)) used. argument especially important data sets whole range rating categories realized. given, ratings given factor integer. restr_tau numerical Inf \"simult_conf\". 2DSD dynWEV . Upper bound tau. Fits interval (0,restr_tau). FALSE tau unbound. \"simult_conf\", see documentation d2DSD ddynaViTE precision numeric. Precision calculation density functions (see ddynaViTE dPCRM information). logging logical. TRUE, folder 'autosave/fitmodel' created messages process printed logging file console (depending OS). Additionally intermediate results saved .RData file participant ID name. opts list. list control options optimization routines (depending optim_method). See details information. optim_method character. Determines optimization function used parameter estimation. Either \"bobyqa\" (default), \"L-BFGS-B\" \"Nelder-Mead\". \"bobyqa\" uses box-constrained optimization quadratic interpolation. (See bobyqa information.) first two use box-constraint optimization. Nelder-Mead transfinite function rescaling used (.e. constrained arguments suitably transformed whole real line). useparallel logical. TRUE grid search beginning done parallel back-end, using parallel package. n.cores integer NULL. Number cores used parallelization. NULL (default) number available cores -1 used. ... Possibility giving alternative variable names data frame (form condition = \"SOA\", response=\"pressedKey\").","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"Gives one-row data frame columns different parameters fitted result well additional information fit (negLogLik (final parameters), k (number parameters), N (number data rows), BIC, AICc AIC) column fixed, includes information fixed fitted parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"fitting involves first grid search computation likelihood initial grid possible sets parameters start optimization routine. best nAttempts parameter sets chosen optimization, done algorithm, depending argument optim-method. Nelder-Mead algorithm uses R function optim. optimization routine restarted nRestarts times starting parameter set equal best parameters previous routine. stimulus, response correct. Two columns must given data. three given, correct effect (checked!). stimulus can always given numerical format values -1 1. response can always given character vector \"lower\" \"upper\" values. Correct must always given 0-1-vector. stimulus column given together response column match format, need values/levels (factor). case stimulus/response given format together correct, unique values sorted increasingly first value encoded \"lower\"/-1 second \"upper\"/+1. fixed. Parameters fitted kept constant. dropped initial grid search present output, keep parameters prediction result. Includes possibility symmetric confidence thresholds alternative (sym_thetas=logical). examples z =.5, sv=0, st0=0, sz=0. race models, possibility setting ='b' (vice versa) leads identical upper bounds decision processes, equivalence z=.5 diffusion process. Parameters fitted. models get developed continuously changes adopted fitting function instantly. Following parameters currently included fitting routine: race models: sza, szb, smu1, smu2 init_grid. row one parameter set check. column names include parameters desired model, following 2DSD: , vmin vmax (equidistantly spanned across conditions), sv, z (relative starting point 0 ), sz (also relative terms), t0, st0, theta0 (minimal threshold), thetamax (maximal threshold; others equidistantly spanned symmetrically decisions), tau. dynWEV, additionally w , svis, sigvis required. race models parameters : vmin, vmax (equidistantly spanned across conditions), b (decision thresholds), t0, st0, theta0 (minimal threshold), thetamax (maximal threshold; others equidistantly spanned symmetrically decisions), time-dependent confidence race models additionally wrt wint (weights compared wx=1). multiple-threshold log-normal race model (MTLNR) parameters : vmin, vmax (equidistantly spanned across conditions), mu_d1 mu_d2 (mean pars boundary distance), s_v1, s_v2, s_d1, s_d2 (variance parameters accumulation rates (v) boundary distances (d)), rho_v rho_d (correlation parameters correlation accumulation rates boundary distances accumulators), t0, st0, theta0 (minimal threshold), thetamax (maximal threshold; others equidistantly spanned symmetrically decisions). opts. list numerical values. Possible options listed (together optimization method used ). nAttempts () number best performing initial parameter sets used optimization; default 5, grid_search TRUE. grid_search FALSE init_grid NULL, nAttempts set 1 (input ignored). grid_search FALSE init_grid NULL, rows init_grid used top bottom (since initial grid search done) nAttempts rows used. nRestarts () number successive optim routines starting parameter sets; default 5, maxfun ('bobyqa') maximum number function evaluations; default: 5000, maxit ('Nelder-Mead' 'L-BFGS-B') maximum iterations; default: 2000, reltol ('Nelder-Mead') relative tolerance; default:  1e-6), factr ('L-BFGS-B') tolerance terms reduction factor objective, default: 1e-10)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292. https://nashjc.wordpress.com/2016/11/10/-optim----date/ https://www.damtp.cam.ac.uk/user/na/NA_papers/NA2009_06.pdf","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for fitting sequential sampling confidence models — fitRTConf","text":"","code":"# We use one of the implemented models, \"dynWEV\" # 1. Generate data # data with positive drift (stimulus = \"upper\") data <- rdynaViTE(20, a=2,v=0.5,t0=0.2,z=0.5, sz=0.1,sv=0.1, st0=0,  tau=4, s=1, w=0.3) data$stimulus <- \"upper\" # data with negtive drift (stimulus = \"lower\") but same intensity data2 <- rdynaViTE(100, a=2,v=-0.5,t0=0.2,z=0.5,sz=0.1,sv=0.1, st0=0,  tau=4, s=1, w=0.3) data2$stimulus <- \"lower\" data <- rbind(data, data2) # Transfer response column and add dummy condition column data$response <- ifelse(data$response==1, \"upper\", \"lower\") data$condition <- 1 # Take some confidence thresholds for discrete ratings threshs <- c(-Inf, 1, 2, Inf) data$rating <- as.numeric(cut(data$conf, breaks = threshs, include.lowest = TRUE)) head(data) #>     rt response      conf stimulus condition rating #> 1 3.23    upper 0.4455081    upper         1      1 #> 2 2.51    upper 1.9373025    upper         1      2 #> 3 6.31    upper 9.4040388    upper         1      3 #> 4 0.45    upper 4.6879129    upper         1      3 #> 5 1.07    upper 3.0843956    upper         1      3 #> 6 0.64    upper 1.4316841    upper         1      2  # 2. Use fitting function # Fitting the model with these opts results in a pretty bad fit # (especially because of omitting the grid_search) # \\donttest{    fitRTConf(data, \"dynWEV\", fixed=list(sym_thetas=TRUE, z=0.5, st0=0),             grid_search = FALSE, logging=FALSE,             opts = list(nAttempts=1, nRestarts=2, maxfun=2000)) #>         v1       sv        a   z          sz        t0 st0  theta1   theta2 #> 1 1.172035 1.440472 2.713945 0.5 1.09681e-05 0.1975105   0 3.07273 3.731652 #>       tau         w         svis    sigvis lambda #> 1 1.90583 0.4827312 1.079601e-06 0.3595828      0 #>                                     fixed negLogLik   N  k      BIC     AICc #> 1 sym_thetas=TRUE, z=0.5, st0=0, lambda=0  290.5894 120 11 633.8413 605.2159 #>        AIC #> 1 603.1789  # }"},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"function wrapper function fitConfModel (see information). calls function every possible combination model participant/subject model data respectively. Also, see ddynaViTE, d2DSD, dDDConf, dRM, dMTLNR information parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"","code":"fitRTConfModels(data, models = c(\"dynaViTE\", \"2DSD\", \"PCRMt\"),   nRatings = NULL, fixed = list(sym_thetas = FALSE), restr_tau = Inf,   grid_search = TRUE, opts = list(), optim_method = \"bobyqa\",   logging = FALSE, precision = 3, parallel = TRUE, n.cores = NULL, ...)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"data data.frame row one trial, containing following variables (column names can changed passing additional arguments form condition=\"contrast\"): condition (necessary; different levels stimulus quality, transformed factor), rating (discrete confidence judgments, given integer vector; otherwise transformed integer), rt (giving reaction times decision task), either 2 following (see details information accepted formats): stimulus (encoding stimulus category binary choice task), response (encoding decision response), correct (encoding whether decision correct; values 0, 1) sbj alternatively subject participant (giving subject ID; models given second argument fitted subject individually. (Furthermore, logging = TRUE, ID used files saved interim results logging messages.) output data frame reused name column input (.e. output contains subject column, input contains subject instead sbj).) models character vector following possible elements \"dynWEV\", \"2DSD\", \"IRM\", \"PCRM\", \"IRMt\", \"PCRMt\", \"MTLNR\"  models fit. nRatings integer. Number rating categories. NULL, maximum rating length(unique(rating)) used. argument especially important data sets whole range rating categories realized. given, ratings given factor integer. fixed list. List parameter value pairs parameters fitted. (see Details). restr_tau numerical Inf \"simult_conf\". Used 2DSD dynWEV . Upper bound tau. Fits interval (0,restr_tau). FALSE tau unbound. \"simult_conf\", see documentation d2DSD ddynaViTE grid_search logical. FALSE, grid search optimization algorithm omitted. fitting started mean parameter set default grid. (Default: TRUE) opts list. list control options optimization routines (depending optim_method). See details information. optim_method character. Determines optimization function used parameter estimation. Either \"bobyqa\" (default), \"L-BFGS-B\" \"Nelder-Mead\". \"bobyqa\" uses box-constrained optimization quadratic interpolation. (See bobyqa information.) first two use box-constraint optimization. Nelder-Mead transfinite function rescaling used (.e. constrained arguments suitably transformed whole real line). logging logical. TRUE, folder 'autosave/fitmodel' created messages process printed logging file console (depending OS). Additionally intermediate results saved .RData file participant/subject ID name. precision numerical numeric. Precision calculation density functions (see ddynaViTE dPCRM information). parallel \"models\", \"single\", \"\" FALSE. FALSE parallelization used fitting process. \"models\" fitting process parallelized participants models (.e. calls fitting functions). \"single\" parallelization used within fitting processes (initial grid search optimization processes different start points, see fitRTConf). \"\", parallelization done hierarchical. small number models participants \"single\" \"\" preferable. Otherwise, may use \"models\". n.cores integer vector NULL. parallel \"models\" \"single\", single integer number cores used parallelization required. parallel \"\", two values required. first number parallel model-participant combinations second parallel processes within fitting procedures (may specified match nAttemps-Value opts argument. NULL (default) number available cores -1 used. NULL parallel \"\", cores used model-participant-parallelization, . ... Possibility giving alternative variable names data frame (form condition = \"SOA\", response=\"pressedKey\").","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"Gives data frame rows model-participant combination columns different parameters fitted result well additional information fit (negLogLik (final parameters), k (number parameters), N (number data rows), BIC, AICc AIC)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"fitting involves first grid search initial grid. best nAttempts parameter sets chosen optimization, done algorithm, depending argument optim-method. Nelder-Mead algorithm uses R function optim. optimization routine restarted nRestarts times starting parameter set equal best parameters previous routine. stimulus, response correct. Two columns must given data. three given, correct effect (checked!). stimulus can always given numerical format values -1 1. response can always given character vector \"lower\" \"upper\" values. Correct must always given 0-1-vector. stimulus given together response match format, need values/levels (factor). case stimulus/response given format together correct, unique values sorted increasingly first value encoded \"lower\"/-1 second \"upper\"/+1. fixed. Parameters fitted kept constant. dropped initial grid search present output, keep parameters prediction result. Includes possibility symmetric confidence thresholds alternative (sym_thetas=logical). examples z =.5, sv=0, st0=0, sz=0. race models, possibility setting ='b' (vice versa) leads identical upper bounds decision processes, equivalence z=.5 diffusion process opts. list numerical values. Possible options listed (together optimization method used ). nAttempts () number best performing initial parameter sets used optimization; default 5 nRestarts () number successive optim routines starting parameter sets; default 5, maxfun ('bobyqa') maximum number function evaluations; default: 5000, maxit ('Nelder-Mead' 'L-BFGS-B') maximum iterations; default: 2000, reltol ('Nelder-Mead') relative tolerance; default:  1e-6), factr ('L-BFGS-B') tolerance terms reduction factor objective, default: 1e-10)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"Sebastian Hellmann, sebastian.hellmann@ku.de","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/fitRTConfModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for fitting several sequential sampling confidence models in parallel — fitRTConfModels","text":"","code":"# 1. Generate data from two artificial participants # Get random drift direction (i.e. stimulus category) and # stimulus discriminability (two steps: hard, easy) stimulus <- sample(c(-1, 1), 400, replace=TRUE) discriminability <- sample(c(1, 2), 400, replace=TRUE)  # generate data for participant 1 data <- rdynaViTE(400, a=2, v=stimulus*discriminability*0.5,              t0=0.2, z=0.5, sz=0.1, sv=0.1, st0=0,  tau=4, s=1, w=0.3) # discretize confidence ratings (only 2 steps: unsure vs. sure) data$rating <- as.numeric(cut(data$conf, breaks = c(-Inf, 1, Inf), include.lowest = TRUE)) data$participant = 1 data$stimulus <- stimulus data$discriminability <- discriminability # generate data for participant 2 data2 <- rdynaViTE(400, a=2.5, v=stimulus*discriminability*0.7,              t0=0.1, z=0.7, sz=0, sv=0.2, st0=0,  tau=2, s=1, w=0.5) data2$rating <- as.numeric(cut(data$conf, breaks = c(-Inf, 0.3, Inf), include.lowest = TRUE)) data2$participant = 2 data2$stimulus <- stimulus data2$discriminability <- discriminability  # bind data from participants data <- rbind(data, data2) data <- data[data$response!=0, ] # drop not finished decision processes data <- data[,-3] # drop conf measure (unobservable variable) head(data) #>     rt response rating participant stimulus discriminability #> 1 0.40        1      2           1        1                2 #> 2 0.46       -1      2           1       -1                2 #> 3 1.06       -1      2           1       -1                2 #> 4 1.92       -1      2           1       -1                2 #> 5 0.77       -1      2           1       -1                1 #> 6 0.75        1      2           1        1                2   # 2. Use fitting function if (FALSE) { # \\dontrun{   # Fitting takes very long to run and uses multiple (6) cores with this   # call:   fitRTConfModels(data, models=c(\"dynWEV\", \"PCRM\"), nRatings = 2,                 logging=FALSE, parallel=\"both\",                 n.cores = c(2,3), # fit two participant-model combination in parallel                 condition=\"discriminability\")# tell which column is \"condition\" } # }"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"predictDDConf_Conf predicts categorical response distribution decision confidence ratings, predictDDConf_RT computes RT distribution (density) drift diffusion confidence model (Hellmann et al., 2023), given specific parameter constellations. See dDDConf information model parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"","code":"predictDDConf_Conf(paramDf, maxrt = Inf, subdivisions = 100L,   stop.on.error = FALSE, .progress = TRUE)  predictDDConf_RT(paramDf, maxrt = 9, subdivisions = 100L, minrt = NULL,   scaled = FALSE, DistConf = NULL, .progress = TRUE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"paramDf list data frame one row. Column names match names DDConf model parameter names. different stimulus quality/mean drift rates, names v1, v2, v3,.... Different sv /s parameters possible sv1, sv2, sv3... (s1, s2, s3,... respectively) equally many steps drift rates. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... maxrt numeric. maximum RT integration/density computation. Default: 15 (predictDDConf_Conf (integration)), 9 (predictDDConf_RT). subdivisions integer (default: 100). predictDDConf_Conf used argument inner integral routine. predictDDConf_RT number points density computed. stop..error logical. Argument directly passed integrate. Default FALSE, since densities invoked may lead slow convergence integrals (still quite accurate) causes R throw error. .progress logical. TRUE (default) progress bar drawn console. minrt numeric NULL(default). minimum rt density computation. scaled logical. predictDDConf_RT. Whether computed density scaled integrate one (additional column densscaled). Otherwise output contains defective density (.e. integral equal probability response 1). TRUE, argument DistConf given, available. Default: FALSE. DistConf NULL data.frame. data.frame matrix column names, giving distribution response rating choices different conditions stimulus categories form output predictDDConf_Conf. necessary, scaled=TRUE, probabilities used scaling. scaled=TRUE DistConf=NULL, computed function predictDDConf_Conf, takes time function throw message. Default: NULL","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"predictDDConf_Conf returns data.frame/tibble columns: condition, stimulus, response, rating, correct, p, info, err. p predicted probability response rating, given stimulus category condition. info err refer respective outputs integration routine used computation. predictDDConf_RT returns data.frame/tibble columns: condition, stimulus, response, rating, correct, rt dens (densscaled, scaled=TRUE).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"function predictDDConf_Conf consists merely integration response time density, dDDConf, response time reasonable interval (0 maxrt). function predictDDConf_RT wraps density functions parameter set input data.frame output. argument paramDf, output fitting function fitRTConf DDConf model may used.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"Different parameters different conditions allowed drift rate v, drift rate variability sv, process variability s. Otherwise, s required paramDf set 1 default. parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictDDConf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of Confidence Rating and Reaction Time Distribution in the drift diffusion confidence model — predictDDConf","text":"","code":"# 1. Define some parameter set in a data.frame paramDf <- data.frame(a=2,v1=0.5, v2=1, t0=0.1,z=0.55,                       sz=0,sv=0.2, st0=0, theta1=0.8)  # 2. Predict discrete Choice x Confidence distribution: preds_Conf <- predictDDConf_Conf(paramDf,  maxrt = 15) head(preds_Conf) #>   condition stimulus response correct rating          p info          err #> 1         1       -1       -1       1      1 0.32260885   OK 9.980641e-06 #> 2         2       -1       -1       1      1 0.32597348   OK 2.002264e-05 #> 3         1        1       -1       0      1 0.11438204   OK 3.269940e-06 #> 4         2        1       -1       0      1 0.04054175   OK 2.148754e-06 #> 5         1       -1        1       1      1 0.12691602   OK 1.552460e-06 #> 6         2       -1        1       1      1 0.04961359   OK 6.704916e-07  # 3. Compute RT density preds_RT <- predictDDConf_RT(paramDf, maxrt=4, subdivisions=200) #(scaled=FALSE) # same output with scaled density column: preds_RT <- predictDDConf_RT(paramDf, maxrt=4, subdivisions=200,                               scaled=TRUE, DistConf = preds_Conf) head(preds_RT) #>   condition stimulus response correct rating        rt dens densscaled #> 1         1       -1       -1       1      1 0.1000000    0          0 #> 2         1       -1       -1       1      1 0.1195980    0          0 #> 3         1       -1       -1       1      1 0.1391960    0          0 #> 4         1       -1       -1       1      1 0.1587940    0          0 #> 5         1       -1       -1       1      1 0.1783920    0          0 #> 6         1       -1       -1       1      1 0.1979899    0          0  # \\donttest{   # Example of visualization   library(ggplot2)   preds_Conf$rating <- factor(preds_Conf$rating, labels=c(\"unsure\", \"sure\"))   preds_RT$rating <- factor(preds_RT$rating, labels=c(\"unsure\", \"sure\"))   ggplot(preds_Conf, aes(x=interaction(rating, response), y=p))+     geom_bar(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")    ggplot(preds_RT, aes(x=rt, color=interaction(rating, response), y=dens))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")+     theme(legend.position = \"bottom\")    ggplot(aggregate(densscaled~rt+correct+rating+condition, preds_RT, mean),          aes(x=rt, color=rating, y=densscaled))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(condition), rows=vars(correct), labeller = \"label_both\")+     theme(legend.position = \"bottom\")  # } # Use PDFtoQuantiles to get predicted RT quantiles head(PDFtoQuantiles(preds_RT, scaled = FALSE)) #> # A tibble: 6 × 7 #>   condition stimulus response correct rating     p     q #>       <int>    <dbl>    <dbl>   <dbl> <fct>  <dbl> <dbl> #> 1         1       -1       -1       1 unsure   0.1 0.962 #> 2         1       -1       -1       1 unsure   0.3 1.16  #> 3         1       -1       -1       1 unsure   0.5 1.39  #> 4         1       -1       -1       1 unsure   0.7 1.75  #> 5         1       -1       -1       1 unsure   0.9 2.49  #> 6         1       -1       -1       1 sure     0.1 0.335"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"predictMTLNR_Conf predicts categorical response distribution decision confidence ratings, predictMTLNR_RT computes RT distribution (density) multiple-threshold log-normal noise race model (Reynolds et al., 2020), given specific parameter constellations. See dMTLNR information models parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"","code":"predictMTLNR_Conf(paramDf, maxrt = Inf, subdivisions = 100L,   stop.on.error = FALSE, .progress = TRUE)  predictMTLNR_RT(paramDf, maxrt = 9, subdivisions = 100L, minrt = NULL,   scaled = FALSE, DistConf = NULL, .progress = TRUE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"paramDf list data frame one row. Column names match names dMTLNR parameter names (mu_v1 mu_v2 used context replaced parameter v). different stimulus quality/mean drift rates, names v1, v2, v3,.... Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... (see Details correspondence data) maxrt numeric. maximum RT integration/density computation. Default: 15 (predictMTLNR_Conf (integration)), 9 (predictMTLNR_RT). subdivisions integer (default: 100). predictMTLNR_Conf used argument inner integral routine. predictMTLNR_RT number points density computed. stop..error logical. Argument directly passed integrate. Default FALSE, since densities invoked may lead slow convergence integrals (still quite accurate) causes R throw error. .progress logical. TRUE (default) progress bar drawn console. minrt numeric NULL(default). minimum rt density computation. scaled logical. predictMTLNR_RT. Whether computed density scaled integrate one (additional column densscaled). Otherwise output contains defective density (.e. integral equal probability response 1). TRUE, argument DistConf given, available. Default: FALSE. DistConf NULL data.frame. data.frame matrix column names, giving distribution response rating choices different conditions stimulus categories form output predictMTLNR_Conf. necessary, scaled=TRUE, probabilities used scaling. scaled=TRUE DistConf=NULL, computed function predictMTLNR_Conf, takes time function throw message. Default: NULL","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"predictMTLNR_Conf returns data.frame/tibble columns: condition, stimulus, response, rating, correct, p, info, err. p predicted probability response rating, given stimulus category condition. info err refer respective outputs integration routine used computation. predictMTLNR_RT returns data.frame/tibble columns: condition, stimulus, response, rating, correct, rt dens (densscaled, scaled=TRUE).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"function predictMTLNR_Conf consists merely integration response time density, dMTLNR, response time reasonable interval (0 maxrt). function predictMTLNR_RT wraps density functions parameter set input data.frame output. argument paramDf, output fitting function fitRTConf respective model may used. names accumulation rate parameters differ used dMTLNR accumulation rates two options depend stimulus condition. , mean parameter accumulation rate correct accumulator v (v1, v2,... respectively) paramDf one mean parameter 0.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"Different parameters different conditions allowed drift rate, v. parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"Reynolds, ., Kvam, P. D., Osth, . F., & Heathcote, . (2020). Correlated racing evidence accumulator models. Journal Mathematical Psychology, 96, 102331. doi: doi: 10.1016/j.jmp.2020.102331","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictMTLNR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of Confidence Rating and Reaction Time Distribution in the multiple-threshold log-normal noise race model — predictMTLNR","text":"","code":"# 1. Define some parameter set in a data.frame paramDf <- data.frame(v1=0.5, v2=1.0, t0=0.1, st0=0,                       mu_d1=1, mu_d2=1,                       s_v1=0.5, s_v2=0.5,                       s_d1=0.3, s_d2=0.3,                       rho_v=0.2, rho_d=0.1,                       theta1=0.8, theta2=1.5)  # 2. Predict discrete Choice x Confidence distribution: preds_Conf <- predictMTLNR_Conf(paramDf, maxrt=7, subdivisions=50) head(preds_Conf) #>   condition stimulus response correct rating          p info          err #> 1         1        1        1       1      1 0.40261536   OK 8.139278e-07 #> 2         2        1        1       1      1 0.30366063   OK 2.334342e-05 #> 3         1        2        1       0      1 0.21062110   OK 8.047182e-08 #> 4         2        2        1       0      1 0.08291896   OK 3.123715e-06 #> 5         1        1        2       0      1 0.21062110   OK 8.047182e-08 #> 6         2        1        2       0      1 0.08291896   OK 3.123715e-06  # 3. Compute RT density preds_RT <- predictMTLNR_RT(paramDf, maxrt=7, subdivisions=50) # same output with scaled density column: preds_RT <- predictMTLNR_RT(paramDf, maxrt=7, subdivisions=50,                          scaled=TRUE, DistConf = preds_Conf) head(preds_RT) #>   condition stimulus response correct rating        rt         dens #> 1         1        1        1       1      1 0.1000000 0.000000e+00 #> 2         1        1        1       1      1 0.2408163 8.369956e-07 #> 3         1        1        1       1      1 0.3816327 5.247208e-04 #> 4         1        1        1       1      1 0.5224490 7.734335e-03 #> 5         1        1        1       1      1 0.6632653 3.234912e-02 #> 6         1        1        1       1      1 0.8040816 7.480043e-02 #>     densscaled #> 1 0.000000e+00 #> 2 2.078896e-06 #> 3 1.303281e-03 #> 4 1.921023e-02 #> 5 8.034747e-02 #> 6 1.857863e-01 # \\donttest{   # produces a warning, if scaled=TRUE and DistConf missing   preds_RT <- predictMTLNR_RT(paramDf, maxrt=7, subdivisions=50,                            scaled=TRUE) #> scaled is TRUE and DistConf is NULL. The rating distribution will be computed, which will take additional time. # }  # \\donttest{   # Example of visualization   library(ggplot2)   preds_Conf$rating <- factor(preds_Conf$rating, labels=c(\"unsure\", \"medium\", \"sure\"))   preds_RT$rating <- factor(preds_RT$rating, labels=c(\"unsure\", \"medium\", \"sure\"))   ggplot(preds_Conf, aes(x=interaction(rating, response), y=p))+     geom_bar(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")    ggplot(preds_RT, aes(x=rt, color=interaction(rating, response), y=dens))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")+     theme(legend.position = \"bottom\")    ggplot(aggregate(densscaled~rt+correct+rating+condition, preds_RT, mean),          aes(x=rt, color=rating, y=densscaled))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(condition), rows=vars(correct), labeller = \"label_both\")+     theme(legend.position = \"bottom\")  # } # \\donttest{   # Use PDFtoQuantiles to get predicted RT quantiles   # (produces warning because of few rt steps (--> inaccurate calculations))   PDFtoQuantiles(preds_RT, scaled = FALSE) #> Warning: There are only 50 rows for at least one subgroup of the data set.  #> Consider refining the rt-grid for more accurate computations. #> # A tibble: 120 × 7 #>    condition stimulus response correct rating     p     q #>        <int>    <dbl>    <dbl>   <dbl> <fct>  <dbl> <dbl> #>  1         1        1        1       1 unsure   0.1 1.09  #>  2         1        1        1       1 unsure   0.3 1.51  #>  3         1        1        1       1 unsure   0.5 1.79  #>  4         1        1        1       1 unsure   0.7 2.35  #>  5         1        1        1       1 unsure   0.9 3.20  #>  6         1        1        1       1 medium   0.1 0.804 #>  7         1        1        1       1 medium   0.3 1.09  #>  8         1        1        1       1 medium   0.5 1.37  #>  9         1        1        1       1 medium   0.7 1.65  #> 10         1        1        1       1 medium   0.9 2.35  #> # ℹ 110 more rows # }  # Example with asymmetric confidence thresholds paramDf_asym <- data.frame(v1=0.5, v2=1.0, t0=0.1, st0=0,                           mu_d1=1, mu_d2=1,                           s_v1=0.5, s_v2=0.5,                           s_d1=0.3, s_d2=0.3,                           rho_v=0.2, rho_d=0.1,                           thetaLower1=0.5, thetaLower2=1.2,                           thetaUpper1=0.7, thetaUpper2=1.8)  preds_Conf_asym <- predictMTLNR_Conf(paramDf_asym, maxrt=7, subdivisions=50) head(preds_Conf_asym) #>   condition stimulus response correct rating          p info          err #> 1         1        1        1       1      1 0.24718299   OK 1.669805e-07 #> 2         2        1        1       1      1 0.16124674   OK 6.257019e-06 #> 3         1        2        1       0      1 0.16097535   OK 1.241295e-07 #> 4         2        2        1       0      1 0.06839111   OK 1.582488e-06 #> 5         1        1        2       0      1 0.19735343   OK 4.172561e-09 #> 6         2        1        2       0      1 0.07941819   OK 2.778639e-06  # Example with multiple conditions paramDf_multi <- data.frame(v1=0.3, v2=0.6, v3=1.2, t0=0.1, st0=0,                            mu_d1=1, mu_d2=1,                            s_v1=0.5, s_v2=0.5,                            s_d1=0.3, s_d2=0.3,                            rho_v=0.2, rho_d=0.1,                            theta1=0.8, theta2=1.5)  preds_Conf_multi <- predictMTLNR_Conf(paramDf_multi, maxrt=7, subdivisions=50) head(preds_Conf_multi) #>   condition stimulus response correct rating          p info          err #> 1         1        1        1       1      1 0.40207742   OK 1.096812e-07 #> 2         2        1        1       1      1 0.39311988   OK 2.923146e-06 #> 3         3        1        1       1      1 0.24208572   OK 8.452775e-06 #> 4         1        2        1       0      1 0.27256417   OK 1.021176e-07 #> 5         2        2        1       0      1 0.18063605   OK 3.876010e-07 #> 6         3        2        1       0      1 0.05089761   OK 3.140383e-06"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"predictRM_Conf predicts categorical response distribution decision confidence ratings, predictRM_RT computes RT distribution (density) independent partially anti-correlated race models  (Hellmann et al., 2023), given specific parameter constellations. See RaceModels information models parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"","code":"predictRM_Conf(paramDf, model = \"IRM\", time_scaled = FALSE, maxrt = Inf,   subdivisions = 100L, stop.on.error = FALSE, .progress = TRUE)  predictRM_RT(paramDf, model = \"IRM\", time_scaled = FALSE, maxrt = 9,   subdivisions = 100L, minrt = NULL, scaled = FALSE, DistConf = NULL,   .progress = TRUE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"paramDf list data frame one row. Column names match names RaceModels parameter names (mu1 mu2 used context replaced parameter v). different stimulus quality/mean drift rates, names v1, v2, v3,.... Different s parameters possible s1, s2, s3,... equally many steps drift rates. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... model character scalar. One \"IRM\" \"PCRM\". (\"IRMt\" \"PCRMt\" also accepted. case, time_scaled set TRUE.) time_scaled logical. Whether confidence measure scaled 1/sqrt(rt). Default: FALSE. (set TRUE, model \"IRMt\" \"PCRMt\") maxrt numeric. maximum RT integration/density computation. Default: 15 (predictRM_Conf (integration)), 9 (predictRM_RT). subdivisions integer (default: 100). predictRM_Conf used argument inner integral routine. predictRM_RT number points density computed. stop..error logical. Argument directly passed integrate. Default FALSE, since densities invoked may lead slow convergence integrals (still quite accurate) causes R throw error. .progress logical. TRUE (default) progress bar drawn console. minrt numeric NULL(default). minimum rt density computation. scaled logical. predictRM_RT. Whether computed density scaled integrate one (additional column densscaled). Otherwise output contains defective density (.e. integral equal probability response 1). TRUE, argument DistConf given, available. Default: FALSE. DistConf NULL data.frame. data.frame matrix column names, giving distribution response rating choices different conditions stimulus categories form output predictRM_Conf. necessary, scaled=TRUE, probabilities used scaling. scaled=TRUE DistConf=NULL, computed function predictRM_Conf, takes time function throw message. Default: NULL","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"predictRM_Conf returns data.frame/tibble columns: condition, stimulus, response, rating, correct, p, info, err. p predicted probability response rating, given stimulus category condition. info err refer respective outputs integration routine used computation. predictRM_RT returns data.frame/tibble columns: condition, stimulus, response, rating, correct, rt dens (densscaled, scaled=TRUE).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"function predictRM_Conf consists merely integration response time density, dIRM dPCRM, response time reasonable interval (0 maxrt). function predictRM_RT wraps density functions parameter set input data.frame output. argument paramDf, output fitting function fitRTConf respective model may used. drift rate parameters differ used dIRM/dPCRM since many perceptual decision experiments drift one accumulator assumed negative . drift rate correct accumulator v (v1, v2, ... respectively) paramDf.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"Different parameters different conditions allowed drift rate, v, process variability s. parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of Confidence Rating and Reaction Time Distribution in race models of confidence — predictRM","text":"","code":"# Examples for \"PCRM\" model (equivalent applicable for \"IRM\" model) # 1. Define some parameter set in a data.frame paramDf <- data.frame(a=2,b=2, v1=0.5, v2=1, t0=0.1,st0=0,                       wx=0.6, wint=0.2, wrt=0.2,                       theta1=4)  # 2. Predict discrete Choice x Confidence distribution: preds_Conf <- predictRM_Conf(paramDf, \"PCRM\", time_scaled=TRUE) # equivalent: preds_Conf <- predictRM_Conf(paramDf, \"PCRMt\") head(preds_Conf) #>   condition stimulus response correct rating          p info          err #> 1         1        1        1       1      1 0.74431586   OK 4.685177e-05 #> 2         2        1        1       1      1 0.81572926   OK 4.983466e-05 #> 3         1        2        1       0      1 0.09342758   OK 6.084905e-05 #> 4         2        2        1       0      1 0.01477360   OK 4.904424e-05 #> 5         1        1        2       0      1 0.09342758   OK 6.084905e-05 #> 6         2        1        2       0      1 0.01477360   OK 4.904424e-05  # 3. Compute RT density preds_RT <- predictRM_RT(paramDf, \"PCRMt\", maxrt=7, subdivisions=50) # same output with scaled density column: preds_RT <- predictRM_RT(paramDf, \"PCRMt\", maxrt=7, subdivisions=50,                          scaled=TRUE, DistConf = preds_Conf) head(preds_RT) #>   condition stimulus response correct rating        rt         dens #> 1         1        1        1       1      1 0.1000000 0.000000e+00 #> 2         1        1        1       1      1 0.2408163 1.452459e-05 #> 3         1        1        1       1      1 0.3816327 1.059180e-02 #> 4         1        1        1       1      1 0.5224490 6.297245e-02 #> 5         1        1        1       1      1 0.6632653 1.322892e-01 #> 6         1        1        1       1      1 0.8040816 1.892959e-01 #>     densscaled #> 1 0.000000e+00 #> 2 1.951401e-05 #> 3 1.423025e-02 #> 4 8.460447e-02 #> 5 1.777326e-01 #> 6 2.543220e-01 # \\donttest{   # produces a warning, if scaled=TRUE and DistConf missing   preds_RT <- predictRM_RT(paramDf, \"PCRMt\", maxrt=7, subdivisions=50,                            scaled=TRUE) #> scaled is TRUE and DistConf is NULL. The rating distribution will be computed, which will take additional time. # }  # \\donttest{   # Example of visualization   library(ggplot2)   preds_Conf$rating <- factor(preds_Conf$rating, labels=c(\"unsure\", \"sure\"))   preds_RT$rating <- factor(preds_RT$rating, labels=c(\"unsure\", \"sure\"))   ggplot(preds_Conf, aes(x=interaction(rating, response), y=p))+     geom_bar(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")    ggplot(preds_RT, aes(x=rt, color=interaction(rating, response), y=dens))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")+     theme(legend.position = \"bottom\")    ggplot(aggregate(densscaled~rt+correct+rating+condition, preds_RT, mean),          aes(x=rt, color=rating, y=densscaled))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(condition), rows=vars(correct), labeller = \"label_both\")+     theme(legend.position = \"bottom\")  # } # \\donttest{   # Use PDFtoQuantiles to get predicted RT quantiles   # (produces warning because of few rt steps (--> inaccurate calculations))   PDFtoQuantiles(preds_RT, scaled = FALSE) #> Warning: There are only 50 rows for at least one subgroup of the data set.  #> Consider refining the rt-grid for more accurate computations. #> # A tibble: 80 × 7 #>    condition stimulus response correct rating     p     q #>        <int>    <dbl>    <dbl>   <dbl> <fct>  <dbl> <dbl> #>  1         1        1        1       1 unsure   0.1 0.945 #>  2         1        1        1       1 unsure   0.3 1.51  #>  3         1        1        1       1 unsure   0.5 2.07  #>  4         1        1        1       1 unsure   0.7 3.06  #>  5         1        1        1       1 unsure   0.9 4.75  #>  6         1        1        1       1 sure     0.1 1.51  #>  7         1        1        1       1 sure     0.3 2.63  #>  8         1        1        1       1 sure     0.5 3.76  #>  9         1        1        1       1 sure     0.7 4.89  #> 10         1        1        1       1 sure     0.9 6.16  #> # ℹ 70 more rows # }"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"predictConf predicts categorical response distribution decision confidence ratings, predictRT computes predicted RT distribution (density) sequential sampling confidence model specified argument model, given specific parameter constellations. function calls respective functions diffusion based models (dynWEV 2DSD: predictWEV) race models (IRM, PCRM, IRMt, PCRMt: predictRM; MTLNR: predictMTLNR).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"","code":"predictConf(paramDf, model = NULL, maxrt = Inf, subdivisions = 100L,   simult_conf = FALSE, stop.on.error = FALSE, .progress = TRUE)  predictRT(paramDf, model = NULL, maxrt = 9, subdivisions = 100L,   minrt = NULL, simult_conf = FALSE, scaled = FALSE, DistConf = NULL,   .progress = TRUE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"paramDf list dataframe one row. Column names match names respective model parameters. different stimulus quality/mean drift rates, names v1, v2, v3,.... Different s parameters possible s1, s2, s3... equally many steps drift rates (sv parameter dynWEV 2DSD), except MTLNR. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... model character scalar. One \"2DSD\", \"dynWEV\", \"IRM\", \"PCRM\", \"IRMt\", \"PCRMt\", \"MTLNR\". maxrt numeric. maximum RT integration/density computation. Default: 15 (predictConf (integration)), 9 (predictRT). subdivisions integer (default: 100). predictConf used argument inner integral routine. predictRT number points density computed. simult_conf logical, relevant dynWEV 2DSD. Whether experiment confidence reported simultaneously decision, decision confidence judgment assumed happened subsequent response computations different, observable interjudgment time (simult_conf FALSE). stop..error logical. Argument directly passed integrate. Default FALSE, since densities invoked may lead slow convergence integrals (still quite accurate) causes R throw error. .progress logical. TRUE (default) progress bar drawn console. minrt numeric NULL(default). minimum rt density computation. scaled logical. predictRT. Whether computed density scaled integrate one (additional column densscaled). Otherwise output contains defective density (.e. integral equal probability response 1). TRUE, argument DistConf given, available. Default: FALSE. DistConf NULL data.frame. data.frame matrix column names, giving distribution response rating choices different conditions stimulus categories form output predictConf. necessary, scaled=TRUE, probabilities used scaling. scaled=TRUE DistConf=NULL, computed function predictRM_Conf, takes time function throw message. Default: NULL","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"predictConf returns data.frame/tibble columns: condition, stimulus, response, rating, correct, p, info, err. p predicted probability response rating, given stimulus category condition. info err refer respective outputs integration routine used computation. predictRT returns data.frame/tibble columns: condition, stimulus, response, rating, correct, rt dens (densscaled, scaled=TRUE).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"function predictConf consists merely integration reaction time density given model, {d*model*}, response time reasonable interval (0 maxrt). function predictRT wraps density functions parameter set input data.frame output. argument paramDf, output fitting function fitRTConf respective model may used.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"Different parameters different conditions allowed drift rate, v, drift rate variability, sv (dynWEV 2DSD), process variability s (MTLNR). parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of confidence rating and response time distribution for sequential sampling confidence models — predictRTConf","text":"","code":"# Examples for \"dynWEV\" model (equivalent applicable for # all other models (with different parameters!))  # 1. Define some parameter set in a data.frame paramDf <- data.frame(a=1.5,v1=0.2, v2=1, t0=0.1,z=0.52,                       sz=0.3,sv=0.4, st0=0,  tau=3, w=0.5,                       theta1=1, svis=0.5, sigvis=0.8)  # 2. Predict discrete Choice x Confidence distribution: preds_Conf <- predictConf(paramDf, \"dynWEV\", maxrt = 25, simult_conf=TRUE) head(preds_Conf) #>   condition stimulus response correct rating          p info          err #> 1         1        1        1       1      1 0.27537242   OK 8.340330e-06 #> 2         2        1        1       1      1 0.05679751   OK 2.342414e-06 #> 3         1       -1        1       0      1 0.26810961   OK 6.340627e-06 #> 4         2       -1        1       0      1 0.11943534   OK 1.422487e-06 #> 5         1        1       -1       0      1 0.24155220   OK 2.584314e-05 #> 6         2        1       -1       0      1 0.10112033   OK 1.140122e-05   # 3. Compute RT density preds_RT <- predictRT(paramDf, \"dynWEV\") #(scaled=FALSE) # same output with default rt-grid and without scaled density column: preds_RT <- predictRT(paramDf, \"dynWEV\", maxrt=5, subdivisions=200,                       minrt=paramDf$tau+paramDf$t0, simult_conf = TRUE,                       scaled=TRUE, DistConf = preds_Conf) head(preds_RT) #>   condition stimulus response correct rating       rt         dens   densscaled #> 1         1        1        1       1      1 3.100000 0.000000e+00 0.000000e+00 #> 2         1        1        1       1      1 3.109548 4.118833e-06 1.495732e-05 #> 3         1        1        1       1      1 3.119095 4.288681e-03 1.557411e-02 #> 4         1        1        1       1      1 3.128643 3.575798e-02 1.298532e-01 #> 5         1        1        1       1      1 3.138191 9.614377e-02 3.491409e-01 #> 6         1        1        1       1      1 3.147739 1.678287e-01 6.094606e-01 # \\donttest{   # produces a warning, if scaled=TRUE and DistConf missing   preds_RT <- predictRT(paramDf, \"dynWEV\",                            scaled=TRUE) #> scaled is TRUE and DistConf is NULL. The rating distribution will be computed, which will take additional time. # }  # \\donttest{   # Example of visualization   library(ggplot2)   preds_Conf$rating <- factor(preds_Conf$rating, labels=c(\"unsure\", \"sure\"))   preds_RT$rating <- factor(preds_RT$rating, labels=c(\"unsure\", \"sure\"))   ggplot(preds_Conf, aes(x=interaction(rating, response), y=p))+     geom_bar(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")    ggplot(preds_RT, aes(x=rt, color=interaction(rating, response), y=densscaled))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")+     theme(legend.position = \"bottom\")+ ggtitle(\"Scaled Densities\")    ggplot(aggregate(dens~rt+correct+rating+condition, preds_RT, mean),          aes(x=rt, color=rating, y=dens))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(condition), rows=vars(correct), labeller = \"label_both\")+     theme(legend.position = \"bottom\")+ ggtitle(\"Non-Scaled Densities\")  # } # Use PDFtoQuantiles to get predicted RT quantiles head(PDFtoQuantiles(preds_RT, scaled = FALSE)) #> # A tibble: 6 × 7 #>   condition stimulus response correct rating     p     q #>       <int>    <dbl>    <dbl>   <dbl> <fct>  <dbl> <dbl> #> 1         1       -1       -1       1 unsure   0.1 0.190 #> 2         1       -1       -1       1 unsure   0.3 0.370 #> 3         1       -1       -1       1 unsure   0.5 0.549 #> 4         1       -1       -1       1 unsure   0.7 0.729 #> 5         1       -1       -1       1 unsure   0.9 1.18  #> 6         1       -1       -1       1 sure     0.1 0.280"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"function wrapper around functions predictRTConf (see information). calls respective function predicting response distribution (discrete decision rating outcomes) rt density (density decision, rating response time) every model participant/subject combination paramDf. Also, see ddynaViTE, d2DSD, dMTLNR, dRM information parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"","code":"predictConfModels(paramDf, maxrt = Inf, subdivisions = 100L,   simult_conf = FALSE, stop.on.error = FALSE, .progress = TRUE,   parallel = FALSE, n.cores = NULL)  predictRTModels(paramDf, maxrt = 9, subdivisions = 100L, minrt = NULL,   simult_conf = FALSE, scaled = FALSE, DistConf = NULL,   .progress = TRUE, parallel = FALSE, n.cores = NULL)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"paramDf dataframe one row per combination model participant/parameter set. Columns may include participant (sbj, subject) column, must include model column names model parameters. different stimulus quality/mean drift rates, names v1, v2, v3,.... Different s parameters possible s1, s2, s3... equally many steps drift rates (sv parameter dynWEV 2DSD), except MTLNR. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... maxrt numeric. maximum RT integration/density computation. Default: 15 (predictConfModels (integration)) 9 (predictRTModels). subdivisions integer (default: 100). predictConfModels used argument inner integral routine. predictRTModels number points density computed. simult_conf logical, relevant dynWEV 2DSD. Whether experiment confidence reported simultaneously decision, decision confidence judgment assumed happened subsequent response computations different, observable interjudgment time (simult_conf FALSE). stop..error logical. Argument directly passed integrate. Default FALSE, since densities invoked may lead slow convergence integrals (still quite accurate) causes R throw error. .progress logical. TRUE (default) progress bar drawn console. (Works OS parallel=FALSE.) parallel logical. TRUE, prediction parallelized participants models (.e. calls respective predictRTConf functions). n.cores integer. parallel TRUE, number cores used parallelization required. NULL (default) number available cores -1 used. minrt numeric NULL(default). minimum rt density computation. NULL, minimal possible response time possible given parameters used (min(t0)). scaled logical. Whether computed density scaled integrate one (additional column densscaled). Otherwise output contains defective density (.e. integral equal probability response 1). TRUE, argument DistConf given, available. Default: FALSE. DistConf NULL data.frame. data.frame participant model columns columns, giving distribution response rating choices different conditions stimulus categories form output predictConfModels. necessary scaled=TRUE, probabilities used scaling. scaled=TRUE DistConf=NULL, computed function predictConfModels, takes time function throw message. Default: NULL","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"predictConfModels returns data.frame/tibble columns: participant (sbj, subject depending input), model, condition, stimulus, response, rating, correct, p, info, err. p predicted probability response rating, given stimulus category condition. info err refer respective outputs integration routine used computation. predictRTModels returns data.frame/tibble columns: participant (sbj/subject depending input), model, condition, stimulus, response, rating, correct, rt dens (densscaled, scaled=TRUE).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"functions merely split input data frame model participants combinations, call equivalent predictRTConf functions individual parameter sets bind outputs together. included convenience easy parallelization, facilitates speeding computations considerably. argument paramDf, output fitting function fitRTConfModels respective models participants may used. function predictConf (called predictConfModels) consists merely integration reaction time density given model, {d*model*}, reaction time reasonable interval (0 maxrt). function predictRT (called predictRTModels) wraps density functions parameter set input data.frame output. ' Note, encoding stimulus identity different diffusion based models (2DSD, dynWEV) race models (IRM(t), PCRM(t), MTLNR). Therefore, columns stimulus response mix encodings: -1/1 diffusion based models 1/2 race models. , usually important, since aggregation models mixed.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"Different parameters different conditions allowed drift rate v, drift rate variability sv (dynWEV 2DSD), process variability s (MTLNR). parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictRTConfModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of confidence and RT distributions for several sequential sampling confidence models and parameter constellations in parallel — predictRTConfModels","text":"","code":"# First example for 2 participant and the \"dynWEV\" model # (equivalent applicable for # all other models (with different parameters!)) # 1. Define two parameter sets from different participants paramDf <- data.frame(participant = c(1,2), model=\"dynWEV\",                       a=c(1.5, 2),v1=c(0.2,0.1), v2=c(1, 1.5),                       t0=c(0.1, 0.2),z=c(0.52,0.45),                       sz=c(0.0,0.3),sv=c(0.4,0.7), st0=c(0,0.01),                       tau=c(2,3), w=c(0.5,0.2),                       theta1=c(1,1.5), svis=c(0.5,0.1), sigvis=c(0.8, 1.2)) paramDf #>   participant  model   a  v1  v2  t0    z  sz  sv  st0 tau   w theta1 svis #> 1           1 dynWEV 1.5 0.2 1.0 0.1 0.52 0.0 0.4 0.00   2 0.5    1.0  0.5 #> 2           2 dynWEV 2.0 0.1 1.5 0.2 0.45 0.3 0.7 0.01   3 0.2    1.5  0.1 #>   sigvis #> 1    0.8 #> 2    1.2 # 2. Predict discrete Choice x Confidence distribution: # model is not an extra argument but must be a column of paramDf preds_Conf <- predictConfModels(paramDf, maxrt = 15, simult_conf=TRUE,                                 .progress=TRUE, parallel = FALSE) # 3. Compute RT density preds_RT <- predictRTModels(paramDf, maxrt=6, subdivisions=100,                       scaled=TRUE, DistConf = preds_Conf,                       parallel=FALSE, .progress = TRUE) head(preds_RT) #>   condition stimulus response correct rating        rt      dens densscaled #> 1         1        1        1       1      1 0.1000000 0.0000000  0.0000000 #> 2         1        1        1       1      1 0.1595960 0.1645173  0.5293651 #> 3         1        1        1       1      1 0.2191919 0.5064871  1.6297166 #> 4         1        1        1       1      1 0.2787879 0.5633260  1.8126064 #> 5         1        1        1       1      1 0.3383838 0.5203048  1.6741774 #> 6         1        1        1       1      1 0.3979798 0.4576166  1.4724665 #>    model participant #> 1 dynWEV           1 #> 2 dynWEV           1 #> 3 dynWEV           1 #> 4 dynWEV           1 #> 5 dynWEV           1 #> 6 dynWEV           1 # \\donttest{   # produces a warning, if scaled=TRUE and DistConf missing   preds_RT <- predictRTModels(paramDf, scaled=TRUE) #> scaled is TRUE and DistConf is NULL. #> Confidence distribution is calculated before computing the RT densities, #> this takes considerable additional time... #> ...finished computation of confidence distribution. # } # Use PDFtoQuantiles to get predicted RT quantiles head(PDFtoQuantiles(preds_RT, scaled = FALSE)) #> # A tibble: 6 × 9 #>   condition stimulus response correct rating model  participant     p     q #>       <int>    <dbl>    <dbl>   <dbl>  <int> <chr>        <dbl> <dbl> <dbl> #> 1         1       -1       -1       1      1 dynWEV           1   0.1 0.280 #> 2         1       -1       -1       1      1 dynWEV           1   0.3 0.370 #> 3         1       -1       -1       1      1 dynWEV           1   0.5 0.549 #> 4         1       -1       -1       1      1 dynWEV           1   0.7 0.729 #> 5         1       -1       -1       1      1 dynWEV           1   0.9 1.18  #> 6         1       -1       -1       1      1 dynWEV           2   0.1 0.370  # Second Example: only one parameter set but for two different models # \\donttest{   paramDf1 <- data.frame(model=\"dynWEV\", a=1.5,v1=0.2, v2=1, t0=0.1,z=0.52,                         sz=0.3,sv=0.4, st0=0,  tau=3, w=0.5,                         theta1=1, svis=0.5, sigvis=0.8)   paramDf2 <- data.frame(model=\"PCRMt\", a=2,b=2, v1=0.5, v2=1, t0=0.1,st0=0,                         wx=0.6, wint=0.2, wrt=0.2, theta1=4)   paramDf <- dplyr::full_join(paramDf1, paramDf2) #> Joining with `by = join_by(model, a, v1, v2, t0, st0, theta1)`   paramDf  # each model parameters sets hat its relevant parameters #>    model   a  v1 v2  t0    z  sz  sv st0 tau   w theta1 svis sigvis  b  wx wint #> 1 dynWEV 1.5 0.2  1 0.1 0.52 0.3 0.4   0   3 0.5      1  0.5    0.8 NA  NA   NA #> 2  PCRMt 2.0 0.5  1 0.1   NA  NA  NA   0  NA  NA      4   NA     NA  2 0.6  0.2 #>   wrt #> 1  NA #> 2 0.2   predictConfModels(paramDf, parallel=FALSE, .progress=TRUE) #>    condition stimulus response correct rating            p info          err #> 1          1        1        1       1      1 2.753724e-01   OK 2.295258e-05 #> 2          2        1        1       1      1 5.679751e-02   OK 6.160096e-06 #> 3          1       -1        1       0      1 2.681096e-01   OK 2.300382e-05 #> 4          2       -1        1       0      1 1.194353e-01   OK 1.140607e-05 #> 5          1        1       -1       0      1 2.415522e-01   OK 1.297594e-05 #> 6          2        1       -1       0      1 1.011203e-01   OK 1.020735e-04 #> 7          1       -1       -1       1      1 2.525716e-01   OK 1.371182e-05 #> 8          2       -1       -1       1      1 5.262161e-02   OK 3.489823e-05 #> 9          1        1        1       1      2 3.103598e-01   OK 2.172831e-05 #> 10         2        1        1       1      2 7.521661e-01   OK 6.074326e-05 #> 11         1       -1        1       0      2 1.837505e-01   OK 9.683325e-06 #> 12         2       -1        1       0      2 1.004053e-01   OK 1.279651e-05 #> 13         1        1       -1       0      2 1.727156e-01   OK 7.955309e-05 #> 14         2        1       -1       0      2 8.991603e-02   OK 5.907873e-05 #> 15         1       -1       -1       1      2 2.955683e-01   OK 1.358866e-05 #> 16         2       -1       -1       1      2 7.275378e-01   OK 3.705280e-05 #> 17         1        1        1       1      1 7.443159e-01   OK 4.685177e-05 #> 18         2        1        1       1      1 8.157293e-01   OK 4.983466e-05 #> 19         1        2        1       0      1 9.342758e-02   OK 6.084905e-05 #> 20         2        2        1       0      1 1.477360e-02   OK 4.904424e-05 #> 21         1        1        2       0      1 9.342758e-02   OK 6.084905e-05 #> 22         2        1        2       0      1 1.477360e-02   OK 4.904424e-05 #> 23         1        2        2       1      1 7.443159e-01   OK 4.685177e-05 #> 24         2        2        2       1      1 8.157293e-01   OK 4.983466e-05 #> 25         1        1        1       1      2 1.600872e-01   OK 2.708790e-05 #> 26         2        1        1       1      2 1.694080e-01   OK 8.276688e-06 #> 27         1        2        1       0      2 2.169329e-03   OK 9.443649e-06 #> 28         2        2        1       0      2 8.921261e-05   OK 3.114930e-06 #> 29         1        1        2       0      2 2.169329e-03   OK 9.443649e-06 #> 30         2        1        2       0      2 8.921261e-05   OK 3.114930e-06 #> 31         1        2        2       1      2 1.600872e-01   OK 2.708790e-05 #> 32         2        2        2       1      2 1.694080e-01   OK 8.276688e-06 #>     model sbj #> 1  dynWEV   1 #> 2  dynWEV   1 #> 3  dynWEV   1 #> 4  dynWEV   1 #> 5  dynWEV   1 #> 6  dynWEV   1 #> 7  dynWEV   1 #> 8  dynWEV   1 #> 9  dynWEV   1 #> 10 dynWEV   1 #> 11 dynWEV   1 #> 12 dynWEV   1 #> 13 dynWEV   1 #> 14 dynWEV   1 #> 15 dynWEV   1 #> 16 dynWEV   1 #> 17  PCRMt   1 #> 18  PCRMt   1 #> 19  PCRMt   1 #> 20  PCRMt   1 #> 21  PCRMt   1 #> 22  PCRMt   1 #> 23  PCRMt   1 #> 24  PCRMt   1 #> 25  PCRMt   1 #> 26  PCRMt   1 #> 27  PCRMt   1 #> 28  PCRMt   1 #> 29  PCRMt   1 #> 30  PCRMt   1 #> 31  PCRMt   1 #> 32  PCRMt   1 # }"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"predictWEV_Conf predicts categorical response distribution decision confidence ratings, predictWEV_RT computes predicted RT distribution (density) 2DSD Model (Pleskac & Busemeyer, 2010) dynWEV model (Hellmann et al., 2023), given specific parameter constellations. See ddynaViTE d2DSD information parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"","code":"predictWEV_Conf(paramDf, model = \"dynaViTE\", maxrt = Inf,   subdivisions = 100L, simult_conf = FALSE, stop.on.error = FALSE,   precision = 3, .progress = TRUE)  predictWEV_RT(paramDf, model = NULL, maxrt = 9, subdivisions = 100L,   minrt = NULL, simult_conf = FALSE, scaled = FALSE, DistConf = NULL,   precision = 3, .progress = TRUE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"paramDf list dataframe one row. Column names match names dynaViTE 2DSD model specific parameter names. different stimulus quality/mean drift rates, names v1, v2, v3,.... Different sv /s parameters possible sv1, sv2, sv3... (s1, s2, s3,... respectively) equally many steps drift rates. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... model character scalar. One \"dynaViTE\", \"dynWEV\", \"2DSD\". maxrt numeric. maximum RT integration/density computation. Default: 15 (predictWEV_Conf (integration)), 9 (predictWEV_RT). subdivisions integer (default: 100). predictWEV_Conf used argument inner integral routine. predictWEV_RT number points density computed. simult_conf logical. Whether experiment confidence reported simultaneously decision, decision confidence judgment assumed happened subsequent response computations different, observable interjudgment time (simult_conf FALSE). stop..error logical. Argument directly passed integrate. Default FALSE, since densities invoked may lead slow convergence integrals (still quite accurate) causes R throw error. precision numerical scalar value. Precision calculation. Corresponds step size integration w.r.t. z t0. Default 1e-5. .progress logical. TRUE (default) progress bar drawn console. minrt numeric NULL(default). minimum rt density computation. scaled logical. predictWEV_RT. Whether computed density scaled integrate one (additional column densscaled). Otherwise output contains defective density (.e. integral equal probability response 1). TRUE, argument DistConf given, available. Default: FALSE. DistConf NULL data.frame. data.frame matrix column names, giving distribution response rating choices different conditions stimulus categories form output predictWEV_Conf. necessary, scaled=TRUE, probabilities used scaling. scaled=TRUE DistConf=NULL, computed function predictWEV_Conf, takes time function throw message. Default: NULL","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"predictWEV_Conf returns data.frame/tibble columns: condition, stimulus, response, rating, correct, p, info, err. p predicted probability response rating, given stimulus category condition. info err refer respective outputs integration routine used computation. predictWEV_RT returns data.frame/tibble columns: condition, stimulus, response, rating, correct, rt dens (densscaled, scaled=TRUE).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"function predictWEV_Conf consists merely integration response time density, ddynaViTE d2DSD, response time reasonable interval (t0 maxrt). function predictWEV_RT wraps density functions parameter set input data.frame output. argument paramDf, output fitting function fitRTConf respective model may used.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"Different parameters different conditions allowed drift rate v, drift rate variability sv, process variability s. Otherwise, s required paramDf set 1 default. parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292. Pleskac, T. J., & Busemeyer, J. R. (2010). Two-Stage Dynamic Signal Detection: Theory Choice, Decision Time, Confidence, Psychological Review, 117(3), 864-901. doi:10.1037/a0019737","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/predictWEV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of Confidence Rating and Response Time Distribution in dynaViTE, dynWEV, and 2DSD confidence models — predictWEV","text":"","code":"# Examples for \"dynWEV\" model (equivalent applicable for \"2DSD\" model (with less parameters)) # 1. Define some parameter set in a data.frame paramDf <- data.frame(a=2.5,v1=0.5, v2=1, t0=0.1,z=0.55,                       sz=0,sv=0.2, st0=0,  tau=3, w=0.3,                       theta1=0.8, svis=0.5, sigvis=0.8)  # 2. Predict discrete Choice x Confidence distribution: preds_Conf <- predictWEV_Conf(paramDf, \"dynWEV\", maxrt = 15) head(preds_Conf) #>   condition stimulus response correct rating          p info          err #> 1         1        1        1       1      1 0.22413378   OK 3.643298e-06 #> 2         2        1        1       1      1 0.08306176   OK 2.343204e-06 #> 3         1       -1        1       0      1 0.11181226   OK 2.052870e-06 #> 4         2       -1        1       0      1 0.02919229   OK 1.178054e-06 #> 5         1        1       -1       0      1 0.07659838   OK 1.588271e-05 #> 6         2        1       -1       0      1 0.01620841   OK 5.775923e-05 # \\donttest{   # To set simult_conf=TRUE makes a minor difference in the discrete distribution,   # because we integrate over response times (we just adapt maxrt for comparison)   preds_Conf2 <- predictWEV_Conf(paramDf, \"dynWEV\", simult_conf = TRUE, maxrt = 15+paramDf$tau)   summary(preds_Conf$p-preds_Conf2$p) # difference in predicted probabilities #>       Min.    1st Qu.     Median       Mean    3rd Qu.       Max.  #> -1.609e-06 -2.617e-07  2.548e-10 -2.090e-07  7.731e-10  8.196e-09  # }  # 3. Compute RT density preds_RT <- predictWEV_RT(paramDf, \"dynWEV\", maxrt=4, subdivisions=200) #(scaled=FALSE) # same output with scaled density column: preds_RT <- predictWEV_RT(paramDf, \"dynWEV\", maxrt=4, subdivisions=200,                          scaled=TRUE, DistConf = preds_Conf) head(preds_RT) #>   condition stimulus response correct rating        rt         dens #> 1         1        1        1       1      1 0.1000000 0.000000e+00 #> 2         1        1        1       1      1 0.1195980 7.844018e-13 #> 3         1        1        1       1      1 0.1391960 2.838316e-06 #> 4         1        1        1       1      1 0.1587940 3.346474e-04 #> 5         1        1        1       1      1 0.1783920 3.193339e-03 #> 6         1        1        1       1      1 0.1979899 1.144218e-02 #>     densscaled #> 1 0.000000e+00 #> 2 3.499704e-12 #> 3 1.266349e-05 #> 4 1.493070e-03 #> 5 1.424747e-02 #> 6 5.105068e-02 # \\donttest{   # produces a warning, if scaled=TRUE and DistConf missing   preds_RT <- predictWEV_RT(paramDf, \"dynWEV\", maxrt=4, subdivisions=200,                            scaled=TRUE) #> scaled is TRUE and DistConf is NULL. The rating distribution will be computed, which will take additional time. # }  # \\donttest{   # Example of visualization   library(ggplot2)   preds_Conf$rating <- factor(preds_Conf$rating, labels=c(\"unsure\", \"sure\"))   preds_RT$rating <- factor(preds_RT$rating, labels=c(\"unsure\", \"sure\"))   ggplot(preds_Conf, aes(x=interaction(rating, response), y=p))+     geom_bar(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")    ggplot(preds_RT, aes(x=rt, color=interaction(rating, response), y=dens))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(stimulus), rows=vars(condition), labeller = \"label_both\")+     theme(legend.position = \"bottom\")    ggplot(aggregate(densscaled~rt+correct+rating+condition, preds_RT, mean),          aes(x=rt, color=rating, y=densscaled))+     geom_line(stat=\"identity\")+     facet_grid(cols=vars(condition), rows=vars(correct), labeller = \"label_both\")+     theme(legend.position = \"bottom\")  # } # Use PDFtoQuantiles to get predicted RT quantiles head(PDFtoQuantiles(preds_RT, scaled = FALSE)) #> # A tibble: 6 × 7 #>   condition stimulus response correct rating     p     q #>       <int>    <dbl>    <dbl>   <dbl> <fct>  <dbl> <dbl> #> 1         1       -1       -1       1 unsure   0.1 0.531 #> 2         1       -1       -1       1 unsure   0.3 0.845 #> 3         1       -1       -1       1 unsure   0.5 1.20  #> 4         1       -1       -1       1 unsure   0.7 1.71  #> 5         1       -1       -1       1 unsure   0.9 2.67  #> 6         1       -1       -1       1 sure     0.1 0.531"},{"path":"https://sehellmann.github.io/dynConfiR/reference/rLCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","title":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","text":"Simulates decision responses, reaction times state loosing accumulator together confidence measure leaky competing accumulator model. Optionally, post-decisional accumulation period, processes continues.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/rLCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","text":"","code":"rLCA(n, mu1, mu2, th1, th2, k = 0, beta = 0, SPV = 0, tau = 0,   wx = 1, wrt = 0, wint = 0, t0 = 0, st0 = 0, pi = 0, sig = 1,   time_scaled = TRUE, simult_conf = FALSE, delta = 0.01, maxrt = 15)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/rLCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","text":"n integer. number samples. mu1 mean momentary evidence alternative 1 mu2 mean momentary evidence alternative 2 th1 decision threshold alternative 1 th2 decision threshold alternative 2 k leakage (default: 0) beta inhibition  (default: 0) SPV variation starting points  (default: 0) tau fixed post decisional accumulation period  (default: 0) wx weight balance evidence confidence measure  (default: 1) wrt weight RT confidence measure  (default: 0) wint weight interaction evidence RT confidence measure (default: 0) t0 minimal non-decision time (default: 0) st0 range uniform distribution non-decision time (default: 0) pi factor input dependent noise infinitesimal variance processes (default: 0) sig input independent component infinitesimal variance processes (default: 1) time_scaled logical. Whether time_scaled transformation confidence measure used. simult_conf logical. Whether experiment confidence reported simultaneously decision. case decision confidence judgment assumed happened subsequent response. Therefore tau included response time. decision reported confidence report, simul_conf FALSE. delta numerical. Size steps discretized simulation (see details). maxrt numerical. Maximum reaction time simulated (see details). Default: 15.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/rLCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","text":"Returns data.frame three columns n rows. Column names rt (response time), response (1 2, indicating accumulator hit boundary first), conf (value confidence measure; discretized!).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/rLCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","text":"simulation done simulating discretized steps one process reaches boundary update rule: $$\\delta X_i(t) = \\max (0, X_i(t) + \\delta_t ((k-1)X_i(t)-\\beta X_{j=} (t) + \\mu_i + \\varepsilon_i (t)),$$ \\(\\varepsilon_i(t) \\sim N(0, (\\pi \\mu_i)^2 + \\sigma^2 )\\). boundary met within maximum time, response set 0. decision, accumulation continues time period (tau), final state used computation confidence.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/rLCA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/rLCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of confidence ratings and RTs in leaky competing accumulator model — rLCA","text":"","code":"# minimal arguments simus<- rLCA(n=20, mu1=1, mu2=-0.5, th1=1, th2=0.8) head(simus) #>     rt response        xl        x1        x2       conf #> 1 0.13        2 0.3959609 0.3959609 0.8104973 -0.3959609 #> 2 0.79        1 0.0000000 1.1019010 0.0000000  0.0000000 #> 3 0.18        2 0.0000000 0.0000000 0.8650580  0.0000000 #> 4 0.66        1 0.4349276 1.1130583 0.4349276 -0.4349276 #> 5 0.29        2 0.7820767 0.7820767 0.9219732 -0.7820767 #> 6 0.96        1 0.2407891 1.0284946 0.2407891 -0.2407891  # specifying all relevant parameters simus <- rLCA(n=1000, mu1 = 2.5, mu2=1, th1=1.5, th2=1.6,                k=0.1, beta=0.1, SPV=0.2, tau=0.1,                wx=0.8, wrt=0.2, wint=0, t0=0.2, st0=0.1,                pi=0.2, sig=1) if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   if (requireNamespace(\"MASS\", quietly = TRUE)) {     require(MASS)     require(ggplot2)     ggplot(simus, aes(x=rt, y=conf))+       geom_bin2d()+       facet_wrap(~response)   } } #> Loading required package: MASS #> `stat_bin2d()` using `bins = 30`. Pick better value `binwidth`.  boxplot(conf~response, data=simus)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"Simulates decision responses reaction times together discrete confidence judgment MTLNR (Reynolds et al., 2020), given specific parameter constellations. See dMTLNR information parameters. Also computes Gamma rank correlation confidence ratings condition (task difficulty), reaction times accuracy simulated output. Basically, function wrapper rMTLNR application confidence experiments manipulation specific parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"","code":"simulateMTLNR(paramDf, n = 10000, gamma = FALSE, agg_simus = FALSE,   stimulus = c(1, 2), seed = NULL)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"paramDf list dataframe one row. Column names match names MTLNR model specific parameter names. different stimulus quality/mean drift rates, names v1, v2, v3,.... Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... n integer. number samples (per condition stimulus direction) generated. Total number samples n*nConditions*length(stimulus). gamma logical. TRUE, gamma correlation confidence ratings, rt accuracy computed. agg_simus logical. Simulation done trial basis RTs outcome. TRUE, simulations aggregated RTs return distribution response confidence ratings. Default: FALSE. stimulus numeric vector. Either 1, 2 c(1,2) (default). Together condition represents experimental situation. binary decision task presented stimulus belongs one two categories. default setting trials categories presented simulated one can choose simulate trials stimulus coming one category (1 category associated positive drift decision process 1 responses considered correct 2 correspondingly negative drifts 2 correct decisions). seed numerical. Seeding non-random data generation.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"Depending gamma agg_simus. gamma FALSE, returns data.frame columns: condition, stimulus, response, correct, rt, conf (continuous confidence measure) rating (discrete confidence rating), dec vis (process_results=TRUE) final states accumulators simulation (agg_simus=TRUE): condition, stimulus,response, correct, rating p (probability response rating, given condition stimulus). gamma TRUE, returns list elements: simus (simulated data frame) gamma, list elements condition, rt correct, tibble two columns (see details information).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"Simulation done simulating normally distributed logarithms boundary crossing times accumulators based MTLNR model. smaller time determines decision time response (.e. winning accumulator). confidence variable computed based log-ratio loosing boundary crossing time winning boundary crossing time. confidence values binned according given thresholds. output fitting function fitRTConf respective model fits argument paramDf simulation. Gamma coefficients computed separately correct/incorrect responses correlation confidence ratings condition rt separately conditions correlation accuracy confidence. resulting data frames output thus two columns. One grouping variable one Gamma coefficient.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"Different parameters different conditions allowed drift rate, v. parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"Reynolds, ., Kvam, P. D., Osth, . F., & Heathcote, . (2020). Correlated racing evidence accumulator models. Journal Mathematical Psychology, 96, 102331. doi: doi: 10.1016/j.jmp.2020.102331","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateMTLNR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of confidence ratings and RTs in the Multiple-threshold Log-normal Race Model — simulateMTLNR","text":"","code":"# 1. Define some parameter set in a data.frame paramDf <- data.frame(v1=0.5, v2=1.0, t0=0.1, st0=0,                       mu_d1=1, mu_d2=1,                       s_v1=0.5, s_v2=0.5,                       s_d1=0.3, s_d2=0.3,                       rho_v=0.2, rho_d=0.1,                       theta1=0.8, theta2=1.5)  # 2. Simulate trials for both stimulus categories and all conditions (2) simus <- simulateMTLNR(paramDf) head(simus) #>   condition stimulus response correct       rt      conf rating #> 1         1        1        1       1 1.409151 0.1876165      1 #> 2         1        1        2       0 1.754091 0.3726012      1 #> 3         1        1        2       0 1.010123 1.2091607      2 #> 4         1        1        1       1 1.027987 0.9755949      2 #> 5         1        1        1       1 0.861481 0.3906267      1 #> 6         1        1        2       0 1.532251 1.0072157      2 # \\donttest{   library(ggplot2)   simus <- simus[simus$response != 0, ]   simus$rating <- factor(simus$rating, labels = c(\"unsure\", \"medium\", \"sure\"))   ggplot(simus, aes(x = rt, group = interaction(correct, rating),                     color = as.factor(correct), linetype = rating)) +     geom_density(linewidth = 1.2) + xlim(c(0, 5)) +     facet_grid(rows = vars(condition), labeller = \"label_both\") #> Warning: Removed 205 rows containing non-finite outside the scale range #> (`stat_density()`).  # }  # automatically aggregate simulation distribution # to get only accuracy x confidence rating distribution for # all conditions agg_simus <- simulateMTLNR(paramDf, agg_simus = TRUE) head(agg_simus) #> # A tibble: 6 × 4 #>   rating correct condition      p #>    <dbl>   <dbl>     <int>  <dbl> #> 1      1       0         1 0.207  #> 2      1       0         2 0.0802 #> 3      1       1         1 0.405  #> 4      1       1         2 0.304  #> 5      2       0         1 0.0378 #> 6      2       0         2 0.0073 # \\donttest{   agg_simus$rating <- factor(agg_simus$rating, labels = c(\"unsure\", \"medium\", \"sure\"))   library(ggplot2)   ggplot(agg_simus, aes(x = rating, group = correct, fill = as.factor(correct), y = p)) +     geom_bar(stat = \"identity\", position = \"dodge\") +     facet_grid(cols = vars(condition), labeller = \"label_both\")  # } # \\donttest{   # Compute Gamma correlation coefficients between   # confidence and other behavioral measures   # output will be a list   simu_list <- simulateMTLNR(paramDf, n = 400, gamma = TRUE)   simu_list #> $simus #>      condition stimulus response correct        rt         conf rating #> 1            1        1        1       1 1.0045523 0.1684455181      1 #> 2            1        1        1       1 1.1858908 0.8800550424      2 #> 3            1        1        2       0 1.2210437 1.1093241517      2 #> 4            1        1        1       1 1.8454052 0.6539777067      1 #> 5            1        1        1       1 1.7689330 0.4363427481      1 #> 6            1        1        1       1 1.3299747 0.5792274019      1 #> 7            1        1        2       0 1.2695289 0.4712349565      1 #> 8            1        1        1       1 2.3698643 0.5279360511      1 #> 9            1        1        2       0 2.6777301 0.1102462154      1 #> 10           1        1        1       1 2.4569184 0.4142843352      1 #> 11           1        1        1       1 3.9277820 0.2060656619      1 #> 12           1        1        1       1 1.2522219 0.6000859426      1 #> 13           1        1        1       1 1.4706539 0.6942028622      1 #> 14           1        1        1       1 1.5247003 0.0848002941      1 #> 15           1        1        2       0 3.3404587 0.1050826258      1 #> 16           1        1        1       1 0.7975751 0.5587083811      1 #> 17           1        1        1       1 1.9645638 1.2006909785      2 #> 18           1        1        2       0 1.6043104 0.1444707577      1 #> 19           1        1        2       0 1.8026049 0.3058146178      1 #> 20           1        1        1       1 2.0919179 0.9126484026      2 #> 21           1        1        1       1 0.9222696 1.3853767960      2 #> 22           1        1        1       1 3.0872321 0.7044146544      1 #> 23           1        1        2       0 2.4343058 0.4642924377      1 #> 24           1        1        2       0 2.6433066 0.2798904402      1 #> 25           1        1        1       1 1.3040754 1.0810219408      2 #> 26           1        1        1       1 2.8238207 0.2674284721      1 #> 27           1        1        2       0 0.9834175 0.0148501466      1 #> 28           1        1        1       1 2.3309537 0.9671195995      2 #> 29           1        1        1       1 2.9297697 0.6666776393      1 #> 30           1        1        1       1 0.8028448 1.4941340697      2 #> 31           1        1        1       1 2.2008267 0.9535197804      2 #> 32           1        1        1       1 1.1965005 1.7524191040      3 #> 33           1        1        1       1 1.5769748 0.8458454945      2 #> 34           1        1        1       1 1.4042808 0.2455804282      1 #> 35           1        1        1       1 1.0016079 2.1669455401      3 #> 36           1        1        1       1 2.5585875 0.4821965776      1 #> 37           1        1        1       1 2.0048799 0.5765475296      1 #> 38           1        1        2       0 1.9077146 0.5575504388      1 #> 39           1        1        1       1 2.8413891 0.3137192627      1 #> 40           1        1        2       0 1.1767614 0.3007794045      1 #> 41           1        1        1       1 1.6101164 1.2160720504      2 #> 42           1        1        1       1 2.5761970 0.6331529411      1 #> 43           1        1        2       0 2.1414248 0.0902396408      1 #> 44           1        1        1       1 1.3067058 0.4395283105      1 #> 45           1        1        1       1 0.8851846 1.7617292926      3 #> 46           1        1        1       1 2.5506538 0.3488044372      1 #> 47           1        1        2       0 2.8248897 0.3932300176      1 #> 48           1        1        2       0 2.0674579 0.4769696842      1 #> 49           1        1        1       1 0.9334965 0.1695111642      1 #> 50           1        1        2       0 1.3379343 0.9095491890      2 #> 51           1        1        1       1 2.3326427 0.0949436905      1 #> 52           1        1        1       1 2.6119280 0.0096571264      1 #> 53           1        1        2       0 2.6553925 0.0658626228      1 #> 54           1        1        2       0 1.7359485 0.1533595281      1 #> 55           1        1        1       1 0.9905512 1.1978949408      2 #> 56           1        1        1       1 1.6805182 0.2858029993      1 #> 57           1        1        1       1 1.3471102 0.4263145712      1 #> 58           1        1        2       0 1.9805025 0.4173546664      1 #> 59           1        1        1       1 1.4532882 0.5906768919      1 #> 60           1        1        1       1 1.6074733 0.9978098273      2 #> 61           1        1        1       1 2.2469652 0.8218676657      2 #> 62           1        1        1       1 0.8388866 1.2549892794      2 #> 63           1        1        1       1 2.0004265 1.5803179404      3 #> 64           1        1        2       0 2.7791598 0.3883728161      1 #> 65           1        1        1       1 2.7090484 0.1720303421      1 #> 66           1        1        1       1 2.6758149 0.7233813541      1 #> 67           1        1        1       1 0.9454853 2.1043034969      3 #> 68           1        1        1       1 1.1565565 0.1760687266      1 #> 69           1        1        1       1 1.2087286 0.9935726816      2 #> 70           1        1        1       1 1.8980819 0.5276482481      1 #> 71           1        1        2       0 2.3318151 0.2657642930      1 #> 72           1        1        1       1 0.3534559 1.7773529694      3 #> 73           1        1        1       1 2.3700892 0.0061472500      1 #> 74           1        1        1       1 1.8316484 0.4914380133      1 #> 75           1        1        1       1 1.4973875 0.3915035797      1 #> 76           1        1        2       0 0.9483205 0.9871411057      2 #> 77           1        1        1       1 0.9108975 1.4571093832      2 #> 78           1        1        2       0 1.3376008 0.7215209971      1 #> 79           1        1        1       1 1.0387173 0.4487518857      1 #> 80           1        1        1       1 1.5136632 1.6686220431      3 #> 81           1        1        2       0 4.4557020 0.0290370916      1 #> 82           1        1        1       1 1.3469360 1.8157840956      3 #> 83           1        1        1       1 1.3424566 0.6707554831      1 #> 84           1        1        1       1 1.6506414 0.5985480644      1 #> 85           1        1        2       0 2.3022295 0.1983461274      1 #> 86           1        1        1       1 2.3164381 0.5794982338      1 #> 87           1        1        2       0 2.9165411 0.6938116094      1 #> 88           1        1        2       0 1.0558580 1.2571380976      2 #> 89           1        1        1       1 1.8530902 0.4421047378      1 #> 90           1        1        2       0 1.6975099 0.3130048162      1 #> 91           1        1        1       1 1.7803647 0.4570948393      1 #> 92           1        1        1       1 2.5838551 1.4674819357      2 #> 93           1        1        1       1 1.7313056 0.3195092214      1 #> 94           1        1        1       1 1.2325930 0.0719113636      1 #> 95           1        1        1       1 1.3106479 0.3164231573      1 #> 96           1        1        1       1 0.9060826 1.1805286042      2 #> 97           1        1        1       1 1.6047148 0.4131101576      1 #> 98           1        1        2       0 2.7566189 0.4869923474      1 #> 99           1        1        1       1 2.0252490 0.0023400069      1 #> 100          1        1        1       1 1.5746487 1.2777211062      2 #> 101          1        1        2       0 1.4436095 0.9599208539      2 #> 102          1        1        1       1 7.4261224 0.8175409815      2 #> 103          1        1        1       1 0.9777957 0.9220912053      2 #> 104          1        1        1       1 1.7608285 0.6834671014      1 #> 105          1        1        1       1 1.0648108 1.0439093467      2 #> 106          1        1        1       1 0.9226271 0.2938563260      1 #> 107          1        1        1       1 0.9691781 1.5157974165      3 #> 108          1        1        2       0 3.7372577 0.1630283757      1 #> 109          1        1        1       1 1.4388048 0.0256561657      1 #> 110          1        1        1       1 2.2548706 0.6062087604      1 #> 111          1        1        1       1 2.4386520 0.1444961172      1 #> 112          1        1        2       0 1.1114198 0.7125797839      1 #> 113          1        1        2       0 2.5387139 0.9156893326      2 #> 114          1        1        1       1 1.2458127 0.4292980690      1 #> 115          1        1        1       1 1.2657375 0.7011279760      1 #> 116          1        1        2       0 2.0682406 0.0748419729      1 #> 117          1        1        2       0 2.3531891 0.1051445252      1 #> 118          1        1        1       1 1.1663892 1.1968970488      2 #> 119          1        1        1       1 0.8403129 1.8365824579      3 #> 120          1        1        1       1 2.2209509 0.1760099166      1 #> 121          1        1        2       0 1.2729129 0.3055128634      1 #> 122          1        1        1       1 0.9832164 1.0262420846      2 #> 123          1        1        1       1 0.6171973 2.2624213028      3 #> 124          1        1        1       1 2.1033089 1.0591114315      2 #> 125          1        1        1       1 1.4062334 1.4932898669      2 #> 126          1        1        1       1 5.0332369 0.3629556864      1 #> 127          1        1        1       1 1.9432549 1.3532163759      2 #> 128          1        1        1       1 2.2785829 0.0291134215      1 #> 129          1        1        1       1 2.1907250 0.0027354824      1 #> 130          1        1        1       1 1.8578283 0.3629317272      1 #> 131          1        1        1       1 1.2311600 0.4171114006      1 #> 132          1        1        1       1 2.7753599 0.3478407859      1 #> 133          1        1        2       0 2.7845600 0.3155782829      1 #> 134          1        1        1       1 0.8373573 1.0255364522      2 #> 135          1        1        1       1 0.6341979 1.4615628309      2 #> 136          1        1        1       1 1.4833027 1.2411987884      2 #> 137          1        1        1       1 2.5325583 0.1839254104      1 #> 138          1        1        1       1 0.9334415 1.9560998602      3 #> 139          1        1        2       0 1.9602572 0.0394882104      1 #> 140          1        1        2       0 1.7324900 0.5513131165      1 #> 141          1        1        1       1 1.7969106 0.6402199657      1 #> 142          1        1        1       1 2.1619565 0.4755258267      1 #> 143          1        1        1       1 2.0998375 1.7197863481      3 #> 144          1        1        1       1 1.9435545 0.6032029799      1 #> 145          1        1        2       0 1.2161430 0.2135274363      1 #> 146          1        1        1       1 1.1338767 1.1229196553      2 #> 147          1        1        2       0 1.8032743 0.0661848296      1 #> 148          1        1        1       1 1.8890676 0.9967735464      2 #> 149          1        1        1       1 2.8640763 0.1400154152      1 #> 150          1        1        2       0 1.0727548 0.0106634043      1 #> 151          1        1        1       1 2.5171201 0.0398765076      1 #> 152          1        1        1       1 3.2646018 0.5548952523      1 #> 153          1        1        1       1 1.9900224 0.0613506095      1 #> 154          1        1        1       1 4.9800984 0.3674671257      1 #> 155          1        1        1       1 1.3051756 1.2433024800      2 #> 156          1        1        1       1 1.6108045 0.6123572985      1 #> 157          1        1        1       1 1.5360708 0.3445817939      1 #> 158          1        1        1       1 0.8805422 2.2931985030      3 #> 159          1        1        1       1 1.6932887 0.5308429042      1 #> 160          1        1        2       0 1.3947683 0.9822102578      2 #> 161          1        1        1       1 1.0769901 2.2026794403      3 #> 162          1        1        2       0 3.8198521 0.4087128734      1 #> 163          1        1        2       0 1.6971574 0.1016937904      1 #> 164          1        1        1       1 2.1488256 0.7046319649      1 #> 165          1        1        1       1 2.0946205 0.2305875155      1 #> 166          1        1        1       1 1.0680664 1.0719673953      2 #> 167          1        1        2       0 2.7369284 0.0778234025      1 #> 168          1        1        1       1 2.2401626 0.0041604455      1 #> 169          1        1        1       1 1.1561601 1.0113680827      2 #> 170          1        1        1       1 1.4219258 0.0941229580      1 #> 171          1        1        2       0 4.6081251 0.0005523004      1 #> 172          1        1        2       0 2.1630600 0.3192819723      1 #> 173          1        1        1       1 1.6981554 0.1197501532      1 #> 174          1        1        1       1 1.0440799 0.9779436842      2 #> 175          1        1        2       0 1.3544592 0.1284632938      1 #> 176          1        1        1       1 2.8830052 0.6863769722      1 #> 177          1        1        1       1 1.4634954 1.1807902031      2 #> 178          1        1        1       1 3.4543080 0.0056241894      1 #> 179          1        1        1       1 1.2623696 0.7131435143      1 #> 180          1        1        1       1 1.4622754 0.8129509973      2 #> 181          1        1        1       1 1.7494494 0.2832111712      1 #> 182          1        1        1       1 1.5734815 0.4043414819      1 #> 183          1        1        1       1 1.2447516 0.8106430404      2 #> 184          1        1        1       1 0.8165637 2.1384759206      3 #> 185          1        1        1       1 1.1662140 0.7470387752      1 #> 186          1        1        2       0 1.2273115 1.0678501694      2 #> 187          1        1        2       0 2.9900058 0.4862300445      1 #> 188          1        1        1       1 1.9214155 0.4138617948      1 #> 189          1        1        1       1 1.7396505 0.2745915449      1 #> 190          1        1        1       1 2.7812866 0.3753197834      1 #> 191          1        1        1       1 0.5589959 2.1779982258      3 #> 192          1        1        1       1 4.2698295 0.5515456928      1 #> 193          1        1        1       1 2.0310646 0.6510199467      1 #> 194          1        1        2       0 1.6277196 0.6216312866      1 #> 195          1        1        1       1 1.3493866 0.8601692316      2 #> 196          1        1        2       0 2.3293532 0.1333160165      1 #> 197          1        1        1       1 1.4186220 0.5297087013      1 #> 198          1        1        1       1 1.7052082 1.0842867431      2 #> 199          1        1        1       1 2.1591314 0.7849122753      1 #> 200          1        1        1       1 1.7071286 1.3313688135      2 #> 201          1        1        1       1 1.1453600 1.6674073494      3 #> 202          1        1        1       1 3.7151400 1.0027410470      2 #> 203          1        1        1       1 1.1157136 1.4904934809      2 #> 204          1        1        2       0 1.5850979 0.6272907635      1 #> 205          1        1        1       1 0.6390782 0.5333031598      1 #> 206          1        1        1       1 2.1547601 0.0309620006      1 #> 207          1        1        1       1 2.3630386 0.6039312824      1 #> 208          1        1        1       1 2.6085453 0.9279047038      2 #> 209          1        1        1       1 1.0511655 0.5886114221      1 #> 210          1        1        2       0 2.5744567 0.4550683780      1 #> 211          1        1        1       1 1.3545272 0.0311637424      1 #> 212          1        1        1       1 1.6251946 0.5994309762      1 #> 213          1        1        2       0 1.7629064 0.0357478625      1 #> 214          1        1        2       0 1.9418274 0.8898035652      2 #> 215          1        1        1       1 1.2859150 0.9407124113      2 #> 216          1        1        1       1 2.1495268 0.4753319283      1 #> 217          1        1        1       1 1.4354814 0.3193549949      1 #> 218          1        1        1       1 2.0901657 0.4799691032      1 #> 219          1        1        1       1 1.0431742 0.4490111829      1 #> 220          1        1        1       1 1.5066868 0.3472872412      1 #> 221          1        1        1       1 0.8222935 0.8609055066      2 #> 222          1        1        1       1 2.5795679 1.0334709427      2 #> 223          1        1        1       1 1.8903415 0.0329720099      1 #> 224          1        1        1       1 1.4814696 0.3177084131      1 #> 225          1        1        1       1 1.6870741 0.0506057954      1 #> 226          1        1        1       1 0.7459723 0.6673879966      1 #> 227          1        1        1       1 0.5345594 2.1087547046      3 #> 228          1        1        2       0 1.3430254 0.3548812336      1 #> 229          1        1        1       1 1.0915409 0.5838740002      1 #> 230          1        1        1       1 0.7108479 0.7178603629      1 #> 231          1        1        1       1 1.1692167 0.7079125633      1 #> 232          1        1        2       0 1.4322736 0.2462905970      1 #> 233          1        1        1       1 0.8159003 0.7800111679      1 #> 234          1        1        1       1 2.6023604 1.4438150606      2 #> 235          1        1        1       1 2.0642793 0.6772831116      1 #> 236          1        1        2       0 1.8368692 0.8062803041      2 #> 237          1        1        1       1 1.2068834 1.8598883347      3 #> 238          1        1        2       0 1.7327291 0.0756831085      1 #> 239          1        1        1       1 1.1419113 1.6639960865      3 #> 240          1        1        1       1 0.8699010 0.9130113739      2 #> 241          1        1        2       0 3.5889706 0.5213287632      1 #> 242          1        1        1       1 1.8551148 0.4271993372      1 #> 243          1        1        2       0 0.9649666 0.7029919770      1 #> 244          1        1        1       1 1.1367756 0.6697953127      1 #> 245          1        1        1       1 3.0219250 0.6033885518      1 #> 246          1        1        1       1 1.9006801 0.7196098479      1 #> 247          1        1        2       0 1.2636631 0.9396869727      2 #> 248          1        1        2       0 1.3104890 0.0297777241      1 #> 249          1        1        1       1 2.9020951 0.0178530495      1 #> 250          1        1        1       1 2.0188962 1.2976662618      2 #> 251          1        1        1       1 1.4260994 0.7363295405      1 #> 252          1        1        1       1 0.7161114 1.1069798183      2 #> 253          1        1        1       1 0.7776313 1.2846014106      2 #> 254          1        1        1       1 1.0053957 0.6315412415      1 #> 255          1        1        1       1 1.4650083 0.0743279389      1 #> 256          1        1        1       1 1.8034546 0.2692101391      1 #> 257          1        1        1       1 1.4728406 2.0169882518      3 #> 258          1        1        1       1 1.7718772 0.5887959118      1 #> 259          1        1        2       0 1.5427109 0.0925078819      1 #> 260          1        1        1       1 2.0738374 0.4190848852      1 #> 261          1        1        2       0 3.0855334 0.1711776748      1 #> 262          1        1        1       1 1.4424086 1.8357091245      3 #> 263          1        1        1       1 2.2183145 0.7719459607      1 #> 264          1        1        1       1 3.3296046 0.6471565571      1 #> 265          1        1        1       1 3.0189597 0.6170609882      1 #> 266          1        1        1       1 1.1986018 1.2801928214      2 #> 267          1        1        1       1 0.9751560 0.4215905056      1 #> 268          1        1        2       0 1.1852603 0.6646774583      1 #> 269          1        1        1       1 2.3414753 0.0426408604      1 #> 270          1        1        2       0 0.8414754 0.4259416726      1 #> 271          1        1        1       1 1.4942895 0.1638440373      1 #> 272          1        1        1       1 1.6132844 1.5109835171      3 #> 273          1        1        2       0 1.8303244 0.0041566804      1 #> 274          1        1        1       1 1.3120827 1.6348471174      3 #> 275          1        1        2       0 2.8997951 0.3551411202      1 #> 276          1        1        1       1 1.7517140 0.8938687016      2 #> 277          1        1        1       1 2.7624410 0.4291179977      1 #> 278          1        1        1       1 2.1915297 0.0029982955      1 #> 279          1        1        1       1 1.4948434 0.4820574538      1 #> 280          1        1        1       1 1.5771776 1.2137931107      2 #> 281          1        1        1       1 0.7992438 0.5347695065      1 #> 282          1        1        1       1 1.0015821 1.0119068009      2 #> 283          1        1        1       1 1.5501170 0.1948036808      1 #> 284          1        1        1       1 2.6343592 0.2787108154      1 #> 285          1        1        1       1 2.3730720 0.3980727929      1 #> 286          1        1        2       0 0.9069929 0.8309882648      2 #> 287          1        1        1       1 1.8296169 1.5947864867      3 #> 288          1        1        2       0 1.2955506 0.5992198582      1 #> 289          1        1        1       1 4.6869231 1.0159983487      2 #> 290          1        1        1       1 1.4139631 1.2310298643      2 #> 291          1        1        1       1 1.9971878 1.0829458643      2 #> 292          1        1        1       1 1.2035518 1.2655308769      2 #> 293          1        1        2       0 1.9960959 0.0238310106      1 #> 294          1        1        1       1 1.8736388 1.0415256295      2 #> 295          1        1        1       1 1.7076684 0.5155657270      1 #> 296          1        1        2       0 2.9928886 0.0991328491      1 #> 297          1        1        1       1 1.2413968 1.4787953329      2 #> 298          1        1        1       1 1.2016122 1.2709053002      2 #> 299          1        1        2       0 0.8145458 0.6462045669      1 #> 300          1        1        1       1 2.5640494 0.6438166817      1 #> 301          1        1        1       1 2.4368772 0.5988603045      1 #> 302          1        1        1       1 3.2348212 0.6346966034      1 #> 303          1        1        1       1 1.8491003 0.8893544772      2 #> 304          1        1        1       1 2.0481789 1.2715029253      2 #> 305          1        1        2       0 2.4428265 0.3964565737      1 #> 306          1        1        1       1 1.3130078 0.2621051770      1 #> 307          1        1        1       1 1.6438239 0.6176255949      1 #> 308          1        1        2       0 2.0561455 0.5238549925      1 #> 309          1        1        1       1 1.0814139 2.0953591866      3 #> 310          1        1        2       0 1.0449121 0.7224069426      1 #> 311          1        1        1       1 0.8710070 0.5504134531      1 #> 312          1        1        1       1 2.0141453 0.3096113519      1 #> 313          1        1        2       0 0.6765781 0.2374163877      1 #> 314          1        1        1       1 2.4240503 0.0474985836      1 #> 315          1        1        1       1 1.2343454 0.6490082184      1 #> 316          1        1        1       1 1.3373657 0.6384070879      1 #> 317          1        1        1       1 2.1763844 0.3069825314      1 #> 318          1        1        1       1 0.9549203 1.3798827747      2 #> 319          1        1        2       0 1.5849591 0.4895593637      1 #> 320          1        1        1       1 1.0302778 2.0594028070      3 #> 321          1        1        1       1 0.8408227 2.6544519932      3 #> 322          1        1        1       1 0.9119098 1.2974309424      2 #> 323          1        1        1       1 1.5972081 0.4408590894      1 #> 324          1        1        1       1 0.8486757 1.4330609316      2 #> 325          1        1        2       0 1.9170635 0.5385631125      1 #> 326          1        1        1       1 1.9881709 0.2899142258      1 #> 327          1        1        2       0 1.7014339 0.2998092852      1 #> 328          1        1        2       0 1.1350023 0.3093016599      1 #> 329          1        1        2       0 0.5749509 1.4785002495      2 #> 330          1        1        2       0 2.2268547 0.4874895950      1 #> 331          1        1        2       0 1.7875432 0.1070284310      1 #> 332          1        1        1       1 1.6163149 0.6687446591      1 #> 333          1        1        1       1 0.8250048 0.8675852455      2 #> 334          1        1        1       1 1.7830816 0.9633924879      2 #> 335          1        1        1       1 1.1842682 0.2156678071      1 #> 336          1        1        1       1 1.9050489 1.3621873932      2 #> 337          1        1        1       1 2.0143271 0.0622737968      1 #> 338          1        1        1       1 1.6463752 0.2470271783      1 #> 339          1        1        1       1 1.1982370 1.8185425002      3 #> 340          1        1        1       1 1.6267291 0.3840542764      1 #> 341          1        1        1       1 0.7698846 2.0746314705      3 #> 342          1        1        1       1 3.0418519 0.8561751807      2 #> 343          1        1        1       1 2.5702074 0.9747360560      2 #> 344          1        1        1       1 1.0594332 1.2034201540      2 #> 345          1        1        1       1 1.3619987 0.7004916871      1 #> 346          1        1        1       1 0.3831660 2.8382342464      3 #> 347          1        1        1       1 0.9967938 1.0048408780      2 #> 348          1        1        1       1 2.3062006 1.1215691233      2 #> 349          1        1        2       0 1.7204978 0.3728740752      1 #> 350          1        1        2       0 1.1190248 0.4856804859      1 #> 351          1        1        1       1 1.6941389 1.5567579083      3 #> 352          1        1        1       1 2.0640407 0.9613599636      2 #> 353          1        1        1       1 1.5304105 0.9551870947      2 #> 354          1        1        1       1 1.5423361 1.6872466206      3 #> 355          1        1        2       0 1.1005745 0.6248715972      1 #> 356          1        1        1       1 0.5455582 1.6641119099      3 #> 357          1        1        1       1 2.2152768 0.0760724881      1 #> 358          1        1        1       1 2.0806240 0.6655672692      1 #> 359          1        1        1       1 0.7377586 2.2354786005      3 #> 360          1        1        1       1 0.8596794 1.2250140163      2 #> 361          1        1        1       1 1.7720538 0.3735068777      1 #> 362          1        1        1       1 1.0380053 1.1169825103      2 #> 363          1        1        1       1 2.0059316 1.1024441948      2 #> 364          1        1        1       1 1.9134706 1.3903315913      2 #> 365          1        1        2       0 1.2375985 0.4085741867      1 #> 366          1        1        1       1 2.2438480 0.1586243687      1 #> 367          1        1        2       0 1.9501764 1.1344944364      2 #> 368          1        1        1       1 0.7028526 0.6953498529      1 #> 369          1        1        1       1 1.8687524 0.4111028125      1 #> 370          1        1        1       1 1.3770990 0.9840671150      2 #> 371          1        1        2       0 2.3073752 0.3493150809      1 #> 372          1        1        2       0 1.7560369 0.0603625043      1 #> 373          1        1        2       0 5.2069043 0.1129468544      1 #> 374          1        1        2       0 2.1340811 0.6862154125      1 #> 375          1        1        1       1 2.0107274 0.2263382103      1 #> 376          1        1        2       0 1.0035378 0.0694614766      1 #> 377          1        1        1       1 2.2632162 0.6657520150      1 #> 378          1        1        2       0 1.9465957 0.9302008391      2 #> 379          1        1        1       1 1.9912034 0.3760929855      1 #> 380          1        1        2       0 2.0334159 0.9329709132      2 #> 381          1        1        2       0 1.2521970 0.7226644623      1 #> 382          1        1        1       1 1.0241339 0.8133241053      2 #> 383          1        1        2       0 0.9666418 0.7918147992      1 #> 384          1        1        1       1 0.4427551 0.6284260477      1 #> 385          1        1        1       1 1.5058779 0.7306923564      1 #> 386          1        1        1       1 2.2912532 0.3428159952      1 #> 387          1        1        2       0 1.9790754 0.8135911176      2 #> 388          1        1        1       1 2.0948272 0.7578489564      1 #> 389          1        1        1       1 0.7532410 1.1693611588      2 #> 390          1        1        1       1 1.9995841 1.3113980752      2 #> 391          1        1        1       1 1.1218003 0.5733689689      1 #> 392          1        1        1       1 1.3385607 0.5580509002      1 #> 393          1        1        1       1 2.6516973 0.0779945215      1 #> 394          1        1        2       0 1.8844818 0.3799632699      1 #> 395          1        1        1       1 1.7101132 0.4668324205      1 #> 396          1        1        1       1 0.6635779 1.6131600405      3 #> 397          1        1        1       1 2.5053980 1.1376232932      2 #> 398          1        1        1       1 2.3465580 1.2749180663      2 #> 399          1        1        1       1 2.2366091 0.6779808207      1 #> 400          1        1        1       1 1.6067492 1.2089011114      2 #> 401          2        1        1       1 0.6413963 1.9585081872      3 #> 402          2        1        1       1 0.7192418 1.9605079344      3 #> 403          2        1        1       1 0.4712916 1.7127542409      3 #> 404          2        1        1       1 1.3973123 1.8417869456      3 #> 405          2        1        1       1 0.6755427 0.8175299273      2 #> 406          2        1        1       1 2.0705468 1.3662269296      2 #> 407          2        1        1       1 0.9567521 1.6238254801      3 #> 408          2        1        1       1 0.8472514 0.5025135698      1 #> 409          2        1        1       1 0.5520630 0.9803584656      2 #> 410          2        1        1       1 1.6580152 0.9916282678      2 #> 411          2        1        1       1 0.9544732 1.9386129211      3 #> 412          2        1        1       1 0.6663644 1.0621606497      2 #> 413          2        1        1       1 0.6715521 1.4554755862      2 #> 414          2        1        1       1 0.5133948 2.6478343040      3 #> 415          2        1        1       1 0.7842805 2.2244513623      3 #> 416          2        1        1       1 0.4792551 2.4838873458      3 #> 417          2        1        1       1 0.7014908 0.8849988621      2 #> 418          2        1        1       1 0.6704917 0.4087937986      1 #> 419          2        1        1       1 0.8907350 0.4782833457      1 #> 420          2        1        1       1 0.7709105 1.9356649061      3 #> 421          2        1        1       1 1.1736342 1.5097873877      3 #> 422          2        1        1       1 0.6001306 0.9054820043      2 #> 423          2        1        1       1 0.9458732 1.6383006155      3 #> 424          2        1        1       1 1.1473095 0.8942154612      2 #> 425          2        1        2       0 2.1697812 0.9404874254      2 #> 426          2        1        1       1 1.1340485 1.2354763191      2 #> 427          2        1        1       1 3.2261011 0.0710602503      1 #> 428          2        1        1       1 1.6755237 0.2993763542      1 #> 429          2        1        2       0 1.7764123 0.2085643436      1 #> 430          2        1        1       1 0.3674046 0.6532882338      1 #> 431          2        1        1       1 1.3835540 0.9187489062      2 #> 432          2        1        1       1 0.3067035 3.0393349211      3 #> 433          2        1        1       1 1.7198342 0.6496047368      1 #> 434          2        1        1       1 1.9868016 0.4483233031      1 #> 435          2        1        2       0 2.4818455 0.0322463736      1 #> 436          2        1        2       0 1.1308533 0.6346576842      1 #> 437          2        1        1       1 1.4491019 1.0284281834      2 #> 438          2        1        1       1 0.5897171 1.5645636709      3 #> 439          2        1        1       1 0.4253447 1.4724254899      2 #> 440          2        1        1       1 0.9206480 1.1685570637      2 #> 441          2        1        1       1 0.5530299 1.5695243079      3 #> 442          2        1        1       1 0.5861819 1.1358701043      2 #> 443          2        1        1       1 0.8434824 0.5573932294      1 #> 444          2        1        1       1 1.5780543 0.5611185396      1 #> 445          2        1        1       1 0.6958823 1.4143320331      2 #> 446          2        1        1       1 1.1599936 1.1817436848      2 #> 447          2        1        1       1 0.7954567 0.7994879854      1 #> 448          2        1        1       1 0.8546649 0.9482578793      2 #> 449          2        1        1       1 2.4289351 0.6533165765      1 #> 450          2        1        1       1 1.3272578 0.8475569606      2 #> 451          2        1        1       1 1.0764963 1.0068220500      2 #> 452          2        1        2       0 2.9057915 0.0348915540      1 #> 453          2        1        1       1 0.6810294 2.3462274789      3 #> 454          2        1        1       1 1.3924352 0.7296367741      1 #> 455          2        1        1       1 1.3940936 0.6826368699      1 #> 456          2        1        1       1 1.6878045 0.8029540275      2 #> 457          2        1        1       1 0.9026964 0.7480947912      1 #> 458          2        1        2       0 2.2329798 0.3623883631      1 #> 459          2        1        1       1 0.8443659 1.1777445460      2 #> 460          2        1        1       1 0.5876195 1.0527053414      2 #> 461          2        1        1       1 0.5404186 1.2409129227      2 #> 462          2        1        1       1 0.5892798 1.1130061455      2 #> 463          2        1        1       1 0.5948423 1.7048313482      3 #> 464          2        1        1       1 0.9641529 2.1081850583      3 #> 465          2        1        1       1 0.6941453 1.7535880886      3 #> 466          2        1        1       1 2.0192700 1.7374135727      3 #> 467          2        1        1       1 0.7903033 0.9980676624      2 #> 468          2        1        1       1 1.8716214 1.3123344767      2 #> 469          2        1        1       1 1.0553420 2.4836445660      3 #> 470          2        1        1       1 0.4525332 1.9017260341      3 #> 471          2        1        1       1 1.6385088 0.3279592368      1 #> 472          2        1        2       0 1.4025856 0.6801694289      1 #> 473          2        1        1       1 0.5917614 1.6318284539      3 #> 474          2        1        2       0 1.1486110 0.1994481610      1 #> 475          2        1        1       1 2.1672277 0.3777240320      1 #> 476          2        1        1       1 0.7547038 1.0579819752      2 #> 477          2        1        1       1 0.5181007 2.3379818296      3 #> 478          2        1        2       0 1.2610428 0.3888267043      1 #> 479          2        1        1       1 0.5942090 1.9622101458      3 #> 480          2        1        1       1 3.7840935 1.0672223756      2 #> 481          2        1        1       1 1.2072024 0.5155537337      1 #> 482          2        1        1       1 0.5913969 1.8047902546      3 #> 483          2        1        1       1 0.9526473 1.4895462002      2 #> 484          2        1        1       1 0.7669644 2.0418760766      3 #> 485          2        1        1       1 0.6502801 0.9299032513      2 #> 486          2        1        1       1 1.1098517 1.5643245050      3 #> 487          2        1        1       1 3.0263842 0.0052264002      1 #> 488          2        1        2       0 1.2015500 0.0071765212      1 #> 489          2        1        1       1 0.9144705 2.0719348320      3 #> 490          2        1        1       1 1.5605300 0.5243228899      1 #> 491          2        1        1       1 0.7103941 1.9940713761      3 #> 492          2        1        1       1 1.4516297 1.1388703229      2 #> 493          2        1        1       1 1.8680205 0.1416643868      1 #> 494          2        1        1       1 1.2047480 1.8161677412      3 #> 495          2        1        1       1 1.6539101 0.6464910707      1 #> 496          2        1        1       1 1.3372842 0.2167426602      1 #> 497          2        1        1       1 1.4002221 1.3018199476      2 #> 498          2        1        1       1 0.9858888 0.5998776215      1 #> 499          2        1        1       1 1.7416797 1.7647040730      3 #> 500          2        1        1       1 0.3614503 2.2410828760      3 #> 501          2        1        1       1 1.5267638 1.2348942599      2 #> 502          2        1        1       1 0.7313308 1.2110274215      2 #> 503          2        1        1       1 0.5718543 2.3280114826      3 #> 504          2        1        1       1 3.9830466 0.4213768974      1 #> 505          2        1        1       1 0.9028738 0.9024122410      2 #> 506          2        1        1       1 0.5609185 2.1493542429      3 #> 507          2        1        1       1 1.9666633 0.6289141060      1 #> 508          2        1        1       1 0.4181608 2.5676703211      3 #> 509          2        1        1       1 1.1178396 0.6870132733      1 #> 510          2        1        1       1 1.8774586 0.3433093033      1 #> 511          2        1        1       1 0.8103348 0.3268231150      1 #> 512          2        1        1       1 1.3671726 1.4061122211      2 #> 513          2        1        1       1 0.8318721 0.9582368010      2 #> 514          2        1        2       0 0.9881849 0.1265287380      1 #> 515          2        1        1       1 1.0439191 0.6327547694      1 #> 516          2        1        1       1 0.8178969 1.5211841045      3 #> 517          2        1        1       1 1.6905357 1.1064986299      2 #> 518          2        1        1       1 1.2840824 0.6612270217      1 #> 519          2        1        1       1 0.5121506 0.2086349963      1 #> 520          2        1        1       1 0.6192984 0.4489303801      1 #> 521          2        1        1       1 1.0630134 1.8078840749      3 #> 522          2        1        1       1 0.5921268 0.8820327483      2 #> 523          2        1        1       1 0.4948146 2.3159203606      3 #> 524          2        1        2       0 2.3098075 0.0360622202      1 #> 525          2        1        1       1 0.6344931 2.4841332939      3 #> 526          2        1        1       1 0.5129433 2.4902131207      3 #> 527          2        1        1       1 0.8255539 1.8460441632      3 #> 528          2        1        1       1 1.1572733 1.2688436219      2 #> 529          2        1        1       1 0.8890515 0.8052120129      2 #> 530          2        1        1       1 1.1274102 0.2932978222      1 #> 531          2        1        1       1 1.6181349 0.2346731657      1 #> 532          2        1        1       1 0.6876273 1.2167896613      2 #> 533          2        1        1       1 1.0203640 1.1919232028      2 #> 534          2        1        1       1 0.9231670 1.0930656104      2 #> 535          2        1        1       1 3.2594560 0.6590818964      1 #> 536          2        1        1       1 0.9586739 1.4366862667      2 #> 537          2        1        1       1 0.7111631 1.7182174513      3 #> 538          2        1        1       1 1.3852801 0.9468237029      2 #> 539          2        1        1       1 0.5705209 1.9464668326      3 #> 540          2        1        1       1 0.9116326 1.0146343275      2 #> 541          2        1        1       1 0.9189126 1.8067656259      3 #> 542          2        1        1       1 0.7291441 0.7741112564      1 #> 543          2        1        2       0 1.9714865 0.6505264523      1 #> 544          2        1        1       1 0.5022089 1.5199920861      3 #> 545          2        1        1       1 1.1848410 1.6128360632      3 #> 546          2        1        1       1 1.6687138 0.3296879338      1 #> 547          2        1        1       1 1.2031294 1.0027217387      2 #> 548          2        1        1       1 0.5777905 2.0824010371      3 #> 549          2        1        1       1 0.2879056 1.6342022498      3 #> 550          2        1        1       1 0.6441194 1.5879943876      3 #> 551          2        1        1       1 0.3884805 2.7498000691      3 #> 552          2        1        1       1 1.0750222 1.4125636605      2 #> 553          2        1        1       1 0.7872843 1.4084739350      2 #> 554          2        1        1       1 1.0937542 0.7671779354      1 #> 555          2        1        1       1 1.7723604 1.1426774880      2 #> 556          2        1        1       1 0.6581931 0.8349249307      2 #> 557          2        1        1       1 0.6845367 0.7543415071      1 #> 558          2        1        1       1 0.6652555 2.5313026866      3 #> 559          2        1        1       1 1.0028884 0.6488329040      1 #> 560          2        1        1       1 2.3069355 0.4838820322      1 #> 561          2        1        1       1 0.7404437 1.2427654941      2 #> 562          2        1        1       1 0.9816588 0.8739065775      2 #> 563          2        1        1       1 1.2486590 0.5803736401      1 #> 564          2        1        1       1 1.1405093 0.5407345554      1 #> 565          2        1        1       1 1.3055273 1.0821637370      2 #> 566          2        1        1       1 0.8198307 1.6767541205      3 #> 567          2        1        1       1 1.3964618 1.0802816431      2 #> 568          2        1        1       1 0.5512471 2.4406581223      3 #> 569          2        1        1       1 0.5192863 1.4637795223      2 #> 570          2        1        1       1 0.4150036 1.1217217560      2 #> 571          2        1        1       1 0.8648943 1.3948966265      2 #> 572          2        1        1       1 0.8403057 1.9908182493      3 #> 573          2        1        1       1 1.2816542 1.0149830278      2 #> 574          2        1        1       1 2.7121561 1.1400743116      2 #> 575          2        1        1       1 0.5966813 1.1608805478      2 #> 576          2        1        1       1 0.4521012 1.8033988146      3 #> 577          2        1        1       1 0.4161662 1.4079348764      2 #> 578          2        1        1       1 0.7106229 1.6674321632      3 #> 579          2        1        1       1 0.8982369 0.5767165143      1 #> 580          2        1        1       1 0.8924202 0.9671402024      2 #> 581          2        1        1       1 0.4515266 2.4737228110      3 #> 582          2        1        1       1 0.9126802 1.4883237943      2 #> 583          2        1        1       1 0.7103453 1.7245487033      3 #> 584          2        1        1       1 0.7998333 0.6956142914      1 #> 585          2        1        2       0 1.1355229 0.5231728273      1 #> 586          2        1        1       1 0.6954551 0.4780719236      1 #> 587          2        1        1       1 0.9061721 1.7153960952      3 #> 588          2        1        1       1 0.7506442 1.6581568102      3 #> 589          2        1        1       1 0.5070967 1.5748881204      3 #> 590          2        1        1       1 1.8259635 0.8552063520      2 #> 591          2        1        1       1 1.1370696 1.4079994164      2 #> 592          2        1        1       1 0.6903399 2.1197207083      3 #> 593          2        1        2       0 1.8153565 0.3927152898      1 #> 594          2        1        1       1 2.0305351 0.0456361167      1 #> 595          2        1        1       1 1.1440358 0.0349746884      1 #> 596          2        1        1       1 1.9550393 1.0395762885      2 #> 597          2        1        1       1 0.9248172 1.1587125775      2 #> 598          2        1        1       1 0.6514573 1.6712484674      3 #> 599          2        1        1       1 1.4032888 0.6100400820      1 #> 600          2        1        1       1 1.0004866 0.7452729183      1 #> 601          2        1        1       1 2.7510789 0.2935265557      1 #> 602          2        1        1       1 1.2357498 0.9050054094      2 #> 603          2        1        1       1 1.5043389 1.4870512718      2 #> 604          2        1        1       1 0.8041912 0.4824357836      1 #> 605          2        1        1       1 1.4001878 0.9620382538      2 #> 606          2        1        1       1 1.5537175 1.1979242185      2 #> 607          2        1        1       1 1.0322318 1.3671804952      2 #> 608          2        1        1       1 0.8468866 0.7920317838      1 #> 609          2        1        1       1 0.8304795 1.1656023057      2 #> 610          2        1        1       1 1.5276670 1.4292006373      2 #> 611          2        1        1       1 0.9895493 1.1386664165      2 #> 612          2        1        1       1 1.4568779 1.4997786653      2 #> 613          2        1        1       1 0.7189259 1.1432379396      2 #> 614          2        1        1       1 1.2591127 1.5656463665      3 #> 615          2        1        2       0 0.9065848 0.4389475770      1 #> 616          2        1        1       1 2.1042374 1.0738566775      2 #> 617          2        1        1       1 1.1331859 1.4508213509      2 #> 618          2        1        1       1 1.1653582 0.7840359667      1 #> 619          2        1        1       1 0.8009221 2.3618653571      3 #> 620          2        1        1       1 1.0374331 1.4782005684      2 #> 621          2        1        1       1 1.3363968 1.2295999450      2 #> 622          2        1        1       1 1.1962655 2.0480474390      3 #> 623          2        1        1       1 1.1389531 0.2512502991      1 #> 624          2        1        1       1 0.5112705 1.8517291018      3 #> 625          2        1        1       1 1.2554294 1.7729597186      3 #> 626          2        1        1       1 0.9226661 1.5293505180      3 #> 627          2        1        1       1 1.2128918 1.3792933689      2 #> 628          2        1        1       1 1.7589461 0.8017835038      2 #> 629          2        1        1       1 1.0619601 1.8689873599      3 #> 630          2        1        1       1 0.4218952 2.3299447365      3 #> 631          2        1        1       1 1.4454711 1.0110670162      2 #> 632          2        1        2       0 1.2596355 0.1772234099      1 #> 633          2        1        1       1 1.2794898 0.8564819174      2 #> 634          2        1        1       1 0.6133285 0.7276860901      1 #> 635          2        1        1       1 0.7587153 0.7336899865      1 #> 636          2        1        1       1 0.8977129 0.9323428360      2 #> 637          2        1        2       0 1.3745621 0.0776427990      1 #> 638          2        1        1       1 1.4416167 0.9896901591      2 #> 639          2        1        1       1 1.0120206 1.8643276078      3 #> 640          2        1        1       1 0.9435062 1.4086140251      2 #> 641          2        1        1       1 1.2462007 0.6968661235      1 #> 642          2        1        1       1 1.1588807 0.5720922332      1 #> 643          2        1        1       1 0.9677437 1.1911033737      2 #> 644          2        1        1       1 0.4940952 1.7485896227      3 #> 645          2        1        1       1 0.7999638 0.5967641062      1 #> 646          2        1        1       1 0.7814134 0.8024977011      2 #> 647          2        1        1       1 1.8768150 0.2464847579      1 #> 648          2        1        1       1 0.3382048 1.4537698416      2 #> 649          2        1        1       1 0.4879758 2.3499411659      3 #> 650          2        1        1       1 0.8662430 0.1806945978      1 #> 651          2        1        1       1 1.4079979 0.7888775993      1 #> 652          2        1        1       1 1.9511561 1.1842077342      2 #> 653          2        1        1       1 1.4232745 0.8395880888      2 #> 654          2        1        1       1 1.6745192 0.6480168804      1 #> 655          2        1        1       1 0.9826712 2.1771602456      3 #> 656          2        1        1       1 0.7716789 0.6226004131      1 #> 657          2        1        1       1 1.1892163 0.4205185491      1 #> 658          2        1        1       1 1.1970923 0.5848147648      1 #> 659          2        1        1       1 0.5461105 1.9821578185      3 #> 660          2        1        1       1 1.0743760 0.9468640310      2 #> 661          2        1        1       1 1.1520691 0.4728226967      1 #> 662          2        1        1       1 1.3676770 1.8578528021      3 #> 663          2        1        1       1 1.3383079 1.3557181663      2 #> 664          2        1        1       1 3.0433261 0.0052334075      1 #> 665          2        1        2       0 2.0069895 0.3509054713      1 #> 666          2        1        1       1 1.4951411 1.4276858722      2 #> 667          2        1        1       1 1.6155062 0.7462584677      1 #> 668          2        1        1       1 0.9903932 1.1741896761      2 #> 669          2        1        1       1 1.7960503 1.2298778179      2 #> 670          2        1        1       1 0.3823118 2.1162296465      3 #> 671          2        1        1       1 1.2513498 0.7715523879      1 #> 672          2        1        1       1 1.2252284 0.4167913102      1 #> 673          2        1        1       1 1.4535806 1.6060468148      3 #> 674          2        1        1       1 0.8624478 1.1457997996      2 #> 675          2        1        1       1 2.5143458 0.0877619609      1 #> 676          2        1        1       1 1.0458310 1.7912131715      3 #> 677          2        1        1       1 0.7436163 0.7034304759      1 #> 678          2        1        1       1 1.0524913 1.6594813900      3 #> 679          2        1        1       1 0.8715139 1.1160606150      2 #> 680          2        1        1       1 0.5768637 1.7622777820      3 #> 681          2        1        1       1 2.9946525 0.0182123982      1 #> 682          2        1        1       1 1.2498656 1.0130764032      2 #> 683          2        1        1       1 1.3950251 0.1097761579      1 #> 684          2        1        1       1 0.7688413 1.2302465706      2 #> 685          2        1        1       1 0.4278354 2.4128274183      3 #> 686          2        1        1       1 0.7702030 1.3867217849      2 #> 687          2        1        1       1 0.6143115 1.7506025497      3 #> 688          2        1        1       1 0.8417731 1.7192126317      3 #> 689          2        1        1       1 1.6152389 0.7542423624      1 #> 690          2        1        2       0 1.2830571 0.3372705973      1 #> 691          2        1        1       1 0.7066445 1.4119404757      2 #> 692          2        1        1       1 0.3955329 1.9030533241      3 #> 693          2        1        2       0 1.2672850 0.3934605660      1 #> 694          2        1        1       1 1.2509520 1.2777339170      2 #> 695          2        1        1       1 0.6890783 1.2593113226      2 #> 696          2        1        1       1 0.9004795 1.1248545039      2 #> 697          2        1        1       1 1.7312416 0.4659266829      1 #> 698          2        1        1       1 0.8323394 2.3939892960      3 #> 699          2        1        1       1 1.1728150 1.5904526229      3 #> 700          2        1        1       1 0.7191186 1.4175889880      2 #> 701          2        1        1       1 1.1382974 2.1428522945      3 #> 702          2        1        2       0 4.0270428 0.1728445498      1 #> 703          2        1        1       1 0.7183872 0.9107589304      2 #> 704          2        1        2       0 1.6310020 0.0220264909      1 #> 705          2        1        1       1 1.0244663 0.9874631474      2 #> 706          2        1        1       1 1.9732330 0.0339355058      1 #> 707          2        1        1       1 1.7249436 0.2265398458      1 #> 708          2        1        1       1 0.3580934 2.7722779193      3 #> 709          2        1        1       1 2.7375892 0.6044592176      1 #> 710          2        1        2       0 1.1560658 0.3578086993      1 #> 711          2        1        1       1 0.4616164 1.5341325930      3 #> 712          2        1        1       1 0.7469318 1.8253619655      3 #> 713          2        1        1       1 0.6935355 1.1778013037      2 #> 714          2        1        1       1 1.7060748 1.6315347723      3 #> 715          2        1        1       1 2.0129333 0.4489499242      1 #> 716          2        1        2       0 1.3951852 0.5896116223      1 #> 717          2        1        1       1 1.7992726 1.7765084314      3 #> 718          2        1        1       1 1.3948790 0.1149888497      1 #> 719          2        1        1       1 0.8471311 1.3561233863      2 #> 720          2        1        1       1 1.1008051 0.6162371871      1 #> 721          2        1        1       1 1.8787268 0.5808638335      1 #> 722          2        1        1       1 1.0708760 0.3195283430      1 #> 723          2        1        1       1 1.6279791 1.3053671916      2 #> 724          2        1        1       1 1.3895349 0.2174260111      1 #> 725          2        1        1       1 0.5326535 1.1356652890      2 #> 726          2        1        2       0 0.6976625 0.4431579418      1 #> 727          2        1        1       1 1.2859875 1.1175679233      2 #> 728          2        1        1       1 1.1899398 0.4231622340      1 #> 729          2        1        1       1 0.4996863 2.2710391366      3 #> 730          2        1        1       1 1.5059738 0.1627137757      1 #> 731          2        1        1       1 1.2001060 1.5620602739      3 #> 732          2        1        1       1 2.9877804 0.1029596451      1 #> 733          2        1        1       1 3.1132764 0.1490276483      1 #> 734          2        1        1       1 1.5731668 0.9337983793      2 #> 735          2        1        1       1 0.8531387 1.0808437685      2 #> 736          2        1        1       1 0.5148526 2.2110456807      3 #> 737          2        1        1       1 1.5852830 0.5960246384      1 #> 738          2        1        1       1 1.1116307 1.7284498289      3 #> 739          2        1        1       1 1.8725684 0.6942475881      1 #> 740          2        1        1       1 0.7960143 1.0101357795      2 #> 741          2        1        1       1 0.6733037 1.7749718077      3 #> 742          2        1        2       0 0.9692382 0.6236116210      1 #> 743          2        1        1       1 0.6330466 1.5924145480      3 #> 744          2        1        1       1 1.0897691 1.2855213194      2 #> 745          2        1        1       1 1.1653410 0.8399287794      2 #> 746          2        1        1       1 1.3980993 0.1022457392      1 #> 747          2        1        1       1 1.1380236 0.7047481602      1 #> 748          2        1        1       1 0.6741540 0.7228842555      1 #> 749          2        1        1       1 1.4672087 0.2279428993      1 #> 750          2        1        1       1 1.7480945 1.3768567663      2 #> 751          2        1        1       1 1.4384392 0.8217827868      2 #> 752          2        1        1       1 1.2997140 0.9286255545      2 #> 753          2        1        1       1 0.9246119 1.9723875411      3 #> 754          2        1        1       1 0.9218231 2.0079067300      3 #> 755          2        1        1       1 1.4391822 1.4655179544      2 #> 756          2        1        1       1 0.7651203 1.3382879505      2 #> 757          2        1        1       1 1.4339862 0.4601605533      1 #> 758          2        1        1       1 1.1452926 0.8016420994      2 #> 759          2        1        1       1 0.6023091 2.1597231313      3 #> 760          2        1        1       1 2.9272088 0.2843677831      1 #> 761          2        1        1       1 1.1042975 0.6985577163      1 #> 762          2        1        1       1 1.1235536 0.7147632991      1 #> 763          2        1        1       1 0.6426573 1.9319642431      3 #> 764          2        1        1       1 1.3663941 1.2174037070      2 #> 765          2        1        2       0 1.3978698 0.2945436036      1 #> 766          2        1        1       1 1.2648236 0.2460060991      1 #> 767          2        1        1       1 1.7169718 1.1462594876      2 #> 768          2        1        1       1 0.5262178 1.3303585603      2 #> 769          2        1        1       1 1.3052214 1.4969480875      2 #> 770          2        1        1       1 0.6102127 1.9822110628      3 #> 771          2        1        1       1 0.5099389 2.7884275443      3 #> 772          2        1        1       1 1.1593349 1.2249274898      2 #> 773          2        1        1       1 0.9456844 0.9040332512      2 #> 774          2        1        2       0 1.6788313 0.0100350646      1 #> 775          2        1        1       1 1.9011791 0.4031523126      1 #> 776          2        1        1       1 1.7028689 0.6284503301      1 #> 777          2        1        1       1 1.6026769 1.4642680106      2 #> 778          2        1        2       0 2.7719922 0.3497051782      1 #> 779          2        1        1       1 1.2144210 0.5294396512      1 #> 780          2        1        1       1 2.3852878 0.4408938135      1 #> 781          2        1        2       0 0.5730899 1.1554242013      2 #> 782          2        1        1       1 0.8470816 1.4501654653      2 #> 783          2        1        1       1 0.7006216 1.0015705672      2 #> 784          2        1        1       1 1.2564345 1.0187222289      2 #> 785          2        1        1       1 0.6113314 1.1016882864      2 #> 786          2        1        1       1 1.3978618 1.0135993512      2 #> 787          2        1        1       1 0.6848610 1.7525822484      3 #> 788          2        1        1       1 0.5153226 0.6876846064      1 #> 789          2        1        1       1 0.9043174 0.5152105870      1 #> 790          2        1        1       1 0.5740575 2.7014236318      3 #> 791          2        1        1       1 2.0968984 0.8796374651      2 #> 792          2        1        2       0 1.1399569 0.4368707192      1 #> 793          2        1        1       1 1.4735331 1.4267606805      2 #> 794          2        1        1       1 1.4386128 0.5364925157      1 #> 795          2        1        1       1 1.5259756 0.9617792607      2 #> 796          2        1        1       1 1.7133888 0.7010613338      1 #> 797          2        1        1       1 1.3483261 0.8092126743      2 #> 798          2        1        1       1 0.6056324 1.6228664410      3 #> 799          2        1        1       1 1.6523820 0.9582032273      2 #> 800          2        1        2       0 1.0392721 1.0066365754      2 #> 801          1        2        2       1 2.0107697 0.4112127887      1 #> 802          1        2        2       1 1.8355170 0.0406615837      1 #> 803          1        2        2       1 1.2883355 1.1913980336      2 #> 804          1        2        2       1 2.2358178 0.2856449604      1 #> 805          1        2        2       1 1.5340133 1.1147050597      2 #> 806          1        2        2       1 1.2325194 1.6776016081      3 #> 807          1        2        2       1 1.1068935 1.0746221476      2 #> 808          1        2        1       0 1.1797577 0.1846198294      1 #> 809          1        2        2       1 1.6155537 0.8748175141      2 #> 810          1        2        2       1 2.1349071 0.4559840723      1 #> 811          1        2        1       0 3.5297000 0.2064275757      1 #> 812          1        2        2       1 2.9331207 0.0496551429      1 #> 813          1        2        2       1 1.9196438 0.2370355561      1 #> 814          1        2        2       1 2.1157331 0.6262939973      1 #> 815          1        2        2       1 1.0329687 0.9908948118      2 #> 816          1        2        2       1 2.3574452 0.7886965093      1 #> 817          1        2        2       1 2.0723344 0.6375882029      1 #> 818          1        2        2       1 1.3174955 0.6441990802      1 #> 819          1        2        2       1 1.2279009 1.6777883935      3 #> 820          1        2        2       1 2.9861186 0.2655895461      1 #> 821          1        2        2       1 2.1500304 0.1353440892      1 #> 822          1        2        2       1 2.8772123 0.2701569382      1 #> 823          1        2        1       0 0.7546150 0.1701032888      1 #> 824          1        2        2       1 1.0145275 0.7489767810      1 #> 825          1        2        2       1 1.2116662 0.6427455350      1 #> 826          1        2        2       1 1.5428855 0.3000058130      1 #> 827          1        2        2       1 2.2728245 1.1987856881      2 #> 828          1        2        2       1 1.2052713 0.0705321282      1 #> 829          1        2        2       1 1.4441682 0.5173246445      1 #> 830          1        2        2       1 1.4465707 1.4258426000      2 #> 831          1        2        2       1 1.9886231 0.5036793884      1 #> 832          1        2        2       1 2.3068819 0.3071752920      1 #> 833          1        2        2       1 1.8190913 0.4545187107      1 #> 834          1        2        2       1 2.5091203 0.4712782439      1 #> 835          1        2        2       1 0.9797962 1.6129442135      3 #> 836          1        2        2       1 1.5361278 0.0179281341      1 #> 837          1        2        2       1 0.8371935 1.4853750456      2 #> 838          1        2        2       1 1.2447045 0.8083307637      2 #> 839          1        2        1       0 2.3327449 0.0969369926      1 #> 840          1        2        2       1 1.8050354 0.9234481100      2 #> 841          1        2        2       1 2.2190241 1.0574299885      2 #> 842          1        2        1       0 2.6849367 0.1001076473      1 #> 843          1        2        2       1 2.2646105 0.5970477296      1 #> 844          1        2        2       1 1.8096621 0.6370274937      1 #> 845          1        2        2       1 1.9456443 1.1268967671      2 #> 846          1        2        2       1 1.6258380 0.0132348401      1 #> 847          1        2        1       0 1.1588461 0.4026571593      1 #> 848          1        2        1       0 0.9559819 0.2246739812      1 #> 849          1        2        2       1 1.4151234 1.0983358056      2 #> 850          1        2        1       0 2.8522703 0.4846270287      1 #> 851          1        2        2       1 0.8367335 1.1229547524      2 #> 852          1        2        2       1 1.4718421 0.8325628049      2 #> 853          1        2        2       1 2.0431144 0.2787360026      1 #> 854          1        2        2       1 1.8641034 0.3485842887      1 #> 855          1        2        2       1 1.5983434 1.3099863534      2 #> 856          1        2        2       1 2.0996678 0.3998918872      1 #> 857          1        2        2       1 1.2298048 0.0732102088      1 #> 858          1        2        2       1 0.9287345 1.5011399391      3 #> 859          1        2        2       1 1.6950882 0.5703945480      1 #> 860          1        2        2       1 1.2088936 1.0627895050      2 #> 861          1        2        1       0 3.1575324 0.3845545406      1 #> 862          1        2        2       1 2.3129687 0.1579534173      1 #> 863          1        2        2       1 1.2479730 0.2926535941      1 #> 864          1        2        1       0 0.8040819 0.9400086446      2 #> 865          1        2        2       1 1.5749628 0.3705394335      1 #> 866          1        2        2       1 1.4266267 0.9240421654      2 #> 867          1        2        1       0 0.7085652 0.9767505391      2 #> 868          1        2        2       1 2.0073551 0.5045532253      1 #> 869          1        2        2       1 0.5769064 1.5688636641      3 #> 870          1        2        2       1 1.1993521 0.4947725824      1 #> 871          1        2        2       1 0.5482849 1.8625685396      3 #> 872          1        2        1       0 1.9942729 0.4154278117      1 #> 873          1        2        1       0 0.7993552 0.4149031324      1 #> 874          1        2        1       0 3.0155192 0.2793444348      1 #> 875          1        2        2       1 2.3541605 0.8337221331      2 #> 876          1        2        2       1 1.6935832 2.3348221972      3 #> 877          1        2        2       1 0.9085528 1.3815265576      2 #> 878          1        2        2       1 1.3501593 0.9200100575      2 #> 879          1        2        2       1 0.8310695 1.4222840347      2 #> 880          1        2        1       0 2.1224002 0.3047570587      1 #> 881          1        2        2       1 1.6492165 0.4826888428      1 #> 882          1        2        2       1 3.4823360 0.4647948137      1 #> 883          1        2        2       1 1.0547417 0.4696547681      1 #> 884          1        2        2       1 1.4905462 0.2879678792      1 #> 885          1        2        2       1 1.7781645 0.5204448799      1 #> 886          1        2        2       1 1.0753013 1.4866269716      2 #> 887          1        2        2       1 2.6526914 0.4083340431      1 #> 888          1        2        2       1 2.7189388 0.1236172821      1 #> 889          1        2        1       0 1.1349015 1.4522234503      2 #> 890          1        2        2       1 1.8978233 0.2956600028      1 #> 891          1        2        1       0 2.5411374 0.3067322353      1 #> 892          1        2        2       1 0.8677439 1.6658169243      3 #> 893          1        2        2       1 1.6904255 0.5567804322      1 #> 894          1        2        2       1 1.3010171 0.6570324321      1 #> 895          1        2        2       1 0.4637850 1.4267315238      2 #> 896          1        2        1       0 1.7216816 0.4709260488      1 #> 897          1        2        2       1 2.2576764 1.0268621914      2 #> 898          1        2        2       1 0.7571102 2.3195871877      3 #> 899          1        2        2       1 0.6690926 2.0840093604      3 #> 900          1        2        2       1 1.8048461 1.5029849066      3 #> 901          1        2        2       1 2.2035808 0.6817749004      1 #> 902          1        2        1       0 1.7497296 0.5313368423      1 #> 903          1        2        2       1 1.3379427 0.3024439196      1 #> 904          1        2        2       1 2.3746554 0.1251751099      1 #> 905          1        2        2       1 0.8084648 2.0962592650      3 #> 906          1        2        2       1 1.1219449 0.2567691798      1 #> 907          1        2        1       0 2.8638625 0.5848547961      1 #> 908          1        2        2       1 1.0166168 1.1289197030      2 #> 909          1        2        2       1 2.0641836 0.0201048138      1 #> 910          1        2        2       1 0.6762445 2.3014036822      3 #> 911          1        2        2       1 1.8957071 1.1702257168      2 #> 912          1        2        2       1 2.5546290 0.0730986457      1 #> 913          1        2        2       1 2.5382742 1.1023195940      2 #> 914          1        2        2       1 0.9669138 0.9087552940      2 #> 915          1        2        2       1 1.2610159 0.1573383899      1 #> 916          1        2        1       0 1.2222141 0.1926122613      1 #> 917          1        2        2       1 0.7927080 1.5071036916      3 #> 918          1        2        2       1 1.3999473 0.7080178118      1 #> 919          1        2        2       1 1.3910140 0.1132421380      1 #> 920          1        2        2       1 0.6948104 0.8176234344      2 #> 921          1        2        1       0 1.8354840 0.3229937823      1 #> 922          1        2        2       1 1.5779579 0.7920720200      1 #> 923          1        2        1       0 1.6457945 0.9527347826      2 #> 924          1        2        1       0 1.5484985 0.3733405826      1 #> 925          1        2        2       1 1.1150332 0.7935922787      1 #> 926          1        2        2       1 1.1997850 1.4242313786      2 #> 927          1        2        2       1 0.9040377 1.6213565060      3 #> 928          1        2        2       1 0.5828132 1.2554693244      2 #> 929          1        2        2       1 1.3387154 1.0511709632      2 #> 930          1        2        2       1 1.4771039 0.6157493849      1 #> 931          1        2        2       1 1.7869432 1.0587920908      2 #> 932          1        2        2       1 2.2258543 0.4165775402      1 #> 933          1        2        2       1 2.7937579 0.7042149801      1 #> 934          1        2        1       0 2.2826121 0.5866633647      1 #> 935          1        2        2       1 0.8148177 0.3096799366      1 #> 936          1        2        1       0 1.2636643 0.6891918483      1 #> 937          1        2        2       1 1.9616983 0.2299741857      1 #> 938          1        2        2       1 1.0014663 0.8219573217      2 #> 939          1        2        1       0 3.5806313 0.2351711248      1 #> 940          1        2        2       1 0.8833216 3.1118781613      3 #> 941          1        2        1       0 4.4773060 0.1142369149      1 #> 942          1        2        2       1 1.1033413 0.6371278264      1 #> 943          1        2        2       1 0.5539196 1.5694710363      3 #> 944          1        2        1       0 1.7398563 0.8638583992      2 #> 945          1        2        2       1 2.0439340 1.3982173434      2 #> 946          1        2        1       0 2.2293033 0.0736553804      1 #> 947          1        2        1       0 1.7298763 0.2927742457      1 #> 948          1        2        2       1 0.8466041 1.2090461159      2 #> 949          1        2        2       1 1.2868998 0.6064756522      1 #> 950          1        2        2       1 1.8901795 0.0508231235      1 #> 951          1        2        1       0 1.5890131 1.4735469472      2 #> 952          1        2        2       1 1.6539758 0.5184838970      1 #> 953          1        2        2       1 3.0479391 0.9073918946      2 #> 954          1        2        2       1 2.3429246 0.9796724256      2 #> 955          1        2        2       1 1.4346773 0.0878490162      1 #> 956          1        2        2       1 1.2931159 0.9477242425      2 #> 957          1        2        2       1 1.6525941 0.2366597921      1 #> 958          1        2        1       0 1.4160708 0.0125951196      1 #> 959          1        2        2       1 2.9515402 0.6286877503      1 #> 960          1        2        2       1 0.5977851 1.6661384159      3 #> 961          1        2        2       1 1.1482820 0.2338581680      1 #> 962          1        2        2       1 3.0699400 0.5684836006      1 #> 963          1        2        1       0 1.9314467 0.4423759382      1 #> 964          1        2        2       1 2.1062475 0.6887094104      1 #> 965          1        2        2       1 2.5705945 0.0937901350      1 #> 966          1        2        2       1 2.8173874 0.7423517006      1 #> 967          1        2        2       1 3.1166997 0.8591917044      2 #> 968          1        2        2       1 2.1546767 0.3426433069      1 #> 969          1        2        2       1 2.3061054 0.8215970283      2 #> 970          1        2        2       1 4.3722351 0.3266031260      1 #> 971          1        2        1       0 1.4784341 0.7505116946      1 #> 972          1        2        1       0 2.6870316 0.1128931263      1 #> 973          1        2        1       0 1.4568585 1.7007465352      3 #> 974          1        2        1       0 1.3267334 0.0543785284      1 #> 975          1        2        2       1 2.6680204 0.2151801814      1 #> 976          1        2        2       1 1.5954877 0.9184842585      2 #> 977          1        2        2       1 2.2281446 0.3386215296      1 #> 978          1        2        2       1 1.0055200 1.2000843728      2 #> 979          1        2        1       0 0.5487567 0.8761558001      2 #> 980          1        2        1       0 2.4057299 0.5254073761      1 #> 981          1        2        2       1 1.5394860 0.5005097802      1 #> 982          1        2        1       0 3.3892435 0.3424428980      1 #> 983          1        2        1       0 5.2322201 0.1761713864      1 #> 984          1        2        2       1 1.6158468 1.3922874618      2 #> 985          1        2        2       1 1.1313007 0.8685029565      2 #> 986          1        2        2       1 1.1821968 0.4503985424      1 #> 987          1        2        2       1 0.8701493 0.7122287806      1 #> 988          1        2        2       1 0.8430024 0.9096178863      2 #> 989          1        2        2       1 0.9140787 0.2512913964      1 #> 990          1        2        2       1 1.5918327 1.1172202415      2 #> 991          1        2        2       1 2.6949589 0.2915482943      1 #> 992          1        2        2       1 1.1131717 0.8208206917      2 #> 993          1        2        2       1 3.1708137 0.1834065610      1 #> 994          1        2        1       0 1.1381093 0.9080750825      2 #> 995          1        2        2       1 1.7095695 0.8222469211      2 #> 996          1        2        1       0 1.2154523 0.6529562651      1 #> 997          1        2        2       1 3.0984369 0.4297626031      1 #> 998          1        2        2       1 5.2535958 0.7328717624      1 #> 999          1        2        1       0 2.3883153 0.6523446213      1 #> 1000         1        2        1       0 0.7892273 0.6814308533      1 #> 1001         1        2        1       0 4.5944157 0.4707738513      1 #> 1002         1        2        2       1 1.4672530 0.0548694281      1 #> 1003         1        2        2       1 1.8728569 0.7863108329      1 #> 1004         1        2        1       0 1.0898280 0.2117788773      1 #> 1005         1        2        2       1 2.9493689 1.0927716756      2 #> 1006         1        2        2       1 4.7252038 0.0145699150      1 #> 1007         1        2        1       0 1.7914438 0.4721368647      1 #> 1008         1        2        2       1 2.2476625 0.7274874494      1 #> 1009         1        2        2       1 0.8930752 2.2623177297      3 #> 1010         1        2        2       1 3.1187877 0.1088019275      1 #> 1011         1        2        2       1 1.1981055 1.1614502430      2 #> 1012         1        2        1       0 3.5089647 0.2024298516      1 #> 1013         1        2        2       1 1.1895457 0.8621749608      2 #> 1014         1        2        2       1 1.0318920 0.5848813413      1 #> 1015         1        2        2       1 1.5056590 0.3316847448      1 #> 1016         1        2        2       1 1.3376945 0.7647685584      1 #> 1017         1        2        2       1 1.0562417 1.0887126599      2 #> 1018         1        2        2       1 1.4859929 0.5804879121      1 #> 1019         1        2        1       0 1.3973215 1.6391325795      3 #> 1020         1        2        1       0 2.4708663 0.5746246833      1 #> 1021         1        2        2       1 1.3024858 0.5787693876      1 #> 1022         1        2        2       1 2.0554429 1.7576820643      3 #> 1023         1        2        2       1 0.9462440 1.2281636712      2 #> 1024         1        2        2       1 0.4452633 1.0843915872      2 #> 1025         1        2        2       1 2.9130173 0.0611407285      1 #> 1026         1        2        2       1 1.0597495 0.8868450676      2 #> 1027         1        2        2       1 3.5581581 0.3583369039      1 #> 1028         1        2        2       1 1.8794644 0.1587731679      1 #> 1029         1        2        2       1 2.3954351 0.1938070646      1 #> 1030         1        2        1       0 1.2501961 0.5879432432      1 #> 1031         1        2        2       1 1.4396955 0.6205695550      1 #> 1032         1        2        2       1 0.8265013 0.9270703086      2 #> 1033         1        2        2       1 0.9403488 2.4658768869      3 #> 1034         1        2        1       0 3.3860822 0.0198133644      1 #> 1035         1        2        2       1 1.0409988 0.3325764295      1 #> 1036         1        2        2       1 1.8484928 0.8841518454      2 #> 1037         1        2        2       1 1.6303155 0.4175144643      1 #> 1038         1        2        2       1 0.9102828 1.3996529191      2 #> 1039         1        2        2       1 2.2809172 0.5858104453      1 #> 1040         1        2        2       1 2.7930428 0.1574624755      1 #> 1041         1        2        2       1 1.2975362 0.5934875004      1 #> 1042         1        2        1       0 0.6885380 1.1503377645      2 #> 1043         1        2        2       1 2.9831568 0.2108336391      1 #> 1044         1        2        2       1 1.7751040 1.8855399703      3 #> 1045         1        2        2       1 1.4471068 0.1757790930      1 #> 1046         1        2        2       1 3.0856897 0.3730657992      1 #> 1047         1        2        2       1 1.7787028 0.2738329257      1 #> 1048         1        2        2       1 2.0185157 0.8384219233      2 #> 1049         1        2        2       1 0.7124943 1.5291795245      3 #> 1050         1        2        2       1 2.4869203 0.2656253159      1 #> 1051         1        2        2       1 0.9818658 2.4142454701      3 #> 1052         1        2        2       1 2.0945785 0.2822151955      1 #> 1053         1        2        2       1 1.8108159 0.2833766888      1 #> 1054         1        2        2       1 0.6564242 0.6611847252      1 #> 1055         1        2        2       1 1.5157631 1.9024819553      3 #> 1056         1        2        2       1 0.6908529 0.8945637811      2 #> 1057         1        2        1       0 1.3745528 0.3924910995      1 #> 1058         1        2        2       1 2.4414553 1.2316500245      2 #> 1059         1        2        2       1 1.1438655 1.5876327464      3 #> 1060         1        2        2       1 1.2598515 0.3813081924      1 #> 1061         1        2        2       1 1.5861604 0.6973040559      1 #> 1062         1        2        2       1 1.0769192 0.6652491402      1 #> 1063         1        2        2       1 1.1243114 1.4405998418      2 #> 1064         1        2        2       1 1.2408186 0.4327495703      1 #> 1065         1        2        2       1 1.4101947 0.4879743510      1 #> 1066         1        2        2       1 0.9163745 1.7520179269      3 #> 1067         1        2        2       1 1.0338823 0.9305001306      2 #> 1068         1        2        2       1 3.2472466 0.1968874440      1 #> 1069         1        2        1       0 5.0593834 0.2556612237      1 #> 1070         1        2        2       1 1.0567336 1.0086692925      2 #> 1071         1        2        1       0 1.5807795 0.5725664625      1 #> 1072         1        2        2       1 1.5088684 1.2465308243      2 #> 1073         1        2        2       1 0.9526065 1.4384120871      2 #> 1074         1        2        2       1 1.0876565 0.8787652813      2 #> 1075         1        2        2       1 5.0379365 0.2954310443      1 #> 1076         1        2        2       1 2.0664286 1.1326940974      2 #> 1077         1        2        2       1 2.5485388 1.1396513868      2 #> 1078         1        2        1       0 1.4227154 0.2495935529      1 #> 1079         1        2        2       1 2.7687197 0.0907915302      1 #> 1080         1        2        2       1 2.7213315 0.3530469635      1 #> 1081         1        2        1       0 2.7329646 0.1501448944      1 #> 1082         1        2        1       0 1.6131593 0.3496255109      1 #> 1083         1        2        1       0 2.2629090 0.5958553933      1 #> 1084         1        2        2       1 0.9366421 1.3080564159      2 #> 1085         1        2        2       1 1.4817281 1.4599060251      2 #> 1086         1        2        2       1 2.0371974 0.8577465337      2 #> 1087         1        2        1       0 4.2368871 0.0544716500      1 #> 1088         1        2        2       1 2.1299072 0.6205858329      1 #> 1089         1        2        2       1 1.5366803 1.2184892644      2 #> 1090         1        2        1       0 1.2607156 0.1852218175      1 #> 1091         1        2        2       1 1.5675218 0.5032893329      1 #> 1092         1        2        2       1 2.1080152 1.3159309209      2 #> 1093         1        2        2       1 2.2422131 0.6983997451      1 #> 1094         1        2        1       0 0.7394213 0.8679393966      2 #> 1095         1        2        1       0 1.0516102 0.7500797757      1 #> 1096         1        2        1       0 0.8260284 1.4152500748      2 #> 1097         1        2        2       1 2.6303860 0.3071496520      1 #> 1098         1        2        1       0 1.6299383 0.5550239151      1 #> 1099         1        2        2       1 1.6769164 0.0065429801      1 #> 1100         1        2        2       1 0.8000467 1.0036073270      2 #> 1101         1        2        2       1 0.9228950 1.6935162588      3 #> 1102         1        2        2       1 1.7157173 0.9613497406      2 #> 1103         1        2        2       1 1.1216948 1.1011267300      2 #> 1104         1        2        2       1 0.6438246 1.7162724229      3 #> 1105         1        2        2       1 1.2537796 0.7422781166      1 #> 1106         1        2        2       1 0.6797924 1.4256432426      2 #> 1107         1        2        1       0 2.7633655 0.1447388273      1 #> 1108         1        2        2       1 3.6702027 0.4576055925      1 #> 1109         1        2        2       1 1.3751965 0.3055751217      1 #> 1110         1        2        2       1 1.4019384 1.2285564160      2 #> 1111         1        2        2       1 2.1189743 1.7065326555      3 #> 1112         1        2        2       1 2.7146145 0.3697855392      1 #> 1113         1        2        2       1 2.2557096 0.1891176973      1 #> 1114         1        2        2       1 1.8632787 0.3820039871      1 #> 1115         1        2        1       0 1.8321479 1.1350406174      2 #> 1116         1        2        2       1 0.4167206 1.1559996888      2 #> 1117         1        2        1       0 2.2973863 0.1368818704      1 #> 1118         1        2        2       1 1.9332187 0.7797641167      1 #> 1119         1        2        1       0 0.9288670 0.1388162212      1 #> 1120         1        2        1       0 1.0144903 0.8847860033      2 #> 1121         1        2        1       0 1.2849594 0.4684936938      1 #> 1122         1        2        1       0 1.6183694 0.0144037949      1 #> 1123         1        2        2       1 1.1620628 1.0366412682      2 #> 1124         1        2        2       1 3.5467446 0.0598850554      1 #> 1125         1        2        2       1 1.6749631 0.6001282773      1 #> 1126         1        2        1       0 1.5971129 0.0074876891      1 #> 1127         1        2        1       0 2.2751039 0.6152538867      1 #> 1128         1        2        2       1 1.5737035 0.3148865536      1 #> 1129         1        2        2       1 1.4047539 0.8622934121      2 #> 1130         1        2        2       1 0.9633317 0.3550202587      1 #> 1131         1        2        2       1 2.1918814 0.1254839119      1 #> 1132         1        2        2       1 1.1926481 0.8851590278      2 #> 1133         1        2        2       1 1.4489674 0.2025704960      1 #> 1134         1        2        2       1 1.6007172 0.5770991475      1 #> 1135         1        2        1       0 2.1042751 0.1557201224      1 #> 1136         1        2        2       1 1.0757654 0.7648281210      1 #> 1137         1        2        2       1 1.0905139 0.0980784684      1 #> 1138         1        2        2       1 0.9326144 1.0811460228      2 #> 1139         1        2        2       1 1.2050170 0.1422796347      1 #> 1140         1        2        1       0 3.4170254 0.1079851282      1 #> 1141         1        2        2       1 2.5401463 0.2787585285      1 #> 1142         1        2        2       1 3.1720978 0.1231953969      1 #> 1143         1        2        2       1 1.9029786 0.0278028789      1 #> 1144         1        2        2       1 1.7689845 0.2745592315      1 #> 1145         1        2        1       0 1.3471466 0.4446399022      1 #> 1146         1        2        2       1 1.2140609 0.4190527832      1 #> 1147         1        2        2       1 1.8177498 0.4539129194      1 #> 1148         1        2        2       1 1.9641894 0.7255291677      1 #> 1149         1        2        1       0 3.3424775 0.2572611023      1 #> 1150         1        2        2       1 0.9533169 1.1848923290      2 #> 1151         1        2        2       1 1.7232815 1.0608166980      2 #> 1152         1        2        2       1 1.0770690 1.0470996483      2 #> 1153         1        2        2       1 2.9992897 0.5268618462      1 #> 1154         1        2        1       0 1.2753780 0.1144963281      1 #> 1155         1        2        1       0 1.7143023 1.1412137335      2 #> 1156         1        2        2       1 0.6318264 2.5242877987      3 #> 1157         1        2        2       1 0.8194936 0.9275210025      2 #> 1158         1        2        1       0 3.3988367 0.0145470037      1 #> 1159         1        2        2       1 1.3919750 0.9514096054      2 #> 1160         1        2        2       1 2.5042661 0.0060103579      1 #> 1161         1        2        1       0 2.6184035 0.1805045218      1 #> 1162         1        2        1       0 0.9631566 0.4093351789      1 #> 1163         1        2        2       1 1.8655452 0.6430954986      1 #> 1164         1        2        2       1 1.5357661 0.8951783320      2 #> 1165         1        2        2       1 3.6394370 0.0267535247      1 #> 1166         1        2        1       0 2.3144602 0.1973638990      1 #> 1167         1        2        2       1 1.3218415 0.7708027622      1 #> 1168         1        2        1       0 1.1162385 0.5497945950      1 #> 1169         1        2        2       1 1.7087724 0.7820423082      1 #> 1170         1        2        1       0 0.9384647 0.3370269563      1 #> 1171         1        2        1       0 2.6088948 0.7685833865      1 #> 1172         1        2        2       1 1.2122677 1.0814841825      2 #> 1173         1        2        2       1 2.0614940 0.3709468341      1 #> 1174         1        2        2       1 3.1045800 0.3824617967      1 #> 1175         1        2        2       1 0.8789299 0.7091221177      1 #> 1176         1        2        1       0 2.0108505 0.8154705977      2 #> 1177         1        2        2       1 1.6503699 1.0495569692      2 #> 1178         1        2        1       0 1.2397090 0.9729855209      2 #> 1179         1        2        2       1 1.7946398 0.3596409746      1 #> 1180         1        2        2       1 2.6815288 0.6315436556      1 #> 1181         1        2        2       1 0.6836559 1.8967892955      3 #> 1182         1        2        1       0 0.9536480 0.0751473549      1 #> 1183         1        2        2       1 1.4232158 0.8253138989      2 #> 1184         1        2        1       0 1.6140481 0.1529293314      1 #> 1185         1        2        1       0 5.8147525 0.2384531276      1 #> 1186         1        2        2       1 1.1581932 0.8961335119      2 #> 1187         1        2        2       1 1.6846186 0.8537319828      2 #> 1188         1        2        2       1 1.0984849 1.4331059677      2 #> 1189         1        2        1       0 3.0624613 0.7696839388      1 #> 1190         1        2        1       0 2.0867809 0.5289921854      1 #> 1191         1        2        1       0 1.9303449 0.3912109093      1 #> 1192         1        2        2       1 0.7830479 1.2244815736      2 #> 1193         1        2        2       1 0.8286648 1.7587819086      3 #> 1194         1        2        2       1 1.4706549 1.0475874466      2 #> 1195         1        2        1       0 2.2617443 0.6497033284      1 #> 1196         1        2        2       1 0.8805504 1.2100874640      2 #> 1197         1        2        2       1 1.5022582 0.3606497702      1 #> 1198         1        2        2       1 0.8259235 1.3990767536      2 #> 1199         1        2        2       1 0.7213365 1.4290306087      2 #> 1200         1        2        1       0 2.0936139 0.6298429240      1 #> 1201         2        2        2       1 2.1763610 1.6309280832      3 #> 1202         2        2        2       1 2.4221671 1.0883442560      2 #> 1203         2        2        2       1 0.6074286 0.9779044775      2 #> 1204         2        2        2       1 0.6086638 1.0411092245      2 #> 1205         2        2        2       1 1.0951052 1.4803374764      2 #> 1206         2        2        2       1 0.7686793 1.8168124452      3 #> 1207         2        2        2       1 1.8466596 1.0187465181      2 #> 1208         2        2        2       1 1.3768919 0.8912927650      2 #> 1209         2        2        2       1 0.7849681 1.5520674988      3 #> 1210         2        2        2       1 1.1162320 1.2702637556      2 #> 1211         2        2        2       1 1.1228636 0.0134484940      1 #> 1212         2        2        2       1 0.5118256 2.4088775352      3 #> 1213         2        2        2       1 1.9287980 1.1281918875      2 #> 1214         2        2        2       1 0.3607970 2.7315370264      3 #> 1215         2        2        2       1 0.7164979 1.4780468035      2 #> 1216         2        2        2       1 1.9693366 1.1446675089      2 #> 1217         2        2        1       0 2.3948423 0.5533592967      1 #> 1218         2        2        2       1 1.2629409 0.3430550309      1 #> 1219         2        2        2       1 0.7363713 2.2977536589      3 #> 1220         2        2        2       1 1.1056875 0.0774584289      1 #> 1221         2        2        2       1 0.7483547 0.8169446962      2 #> 1222         2        2        2       1 0.5778600 0.5922736942      1 #> 1223         2        2        2       1 1.9152530 0.7297817421      1 #> 1224         2        2        2       1 0.6880507 2.1331160118      3 #> 1225         2        2        2       1 0.5749250 2.5692062793      3 #> 1226         2        2        2       1 0.8754289 1.8231037529      3 #> 1227         2        2        2       1 0.6849095 1.2946949667      2 #> 1228         2        2        2       1 0.9004787 1.2855599523      2 #> 1229         2        2        2       1 3.0988638 0.1923331270      1 #> 1230         2        2        2       1 0.4994242 2.6669927199      3 #> 1231         2        2        2       1 1.4066838 0.8685210173      2 #> 1232         2        2        2       1 0.6618277 1.7612167717      3 #> 1233         2        2        2       1 1.2844506 0.1363478589      1 #> 1234         2        2        2       1 1.0544571 1.1277796192      2 #> 1235         2        2        2       1 1.3005966 0.7794213223      1 #> 1236         2        2        2       1 1.0812137 2.3642601890      3 #> 1237         2        2        2       1 0.6285977 1.4615563353      2 #> 1238         2        2        2       1 0.9455399 1.0954846237      2 #> 1239         2        2        2       1 1.2836128 0.9191508005      2 #> 1240         2        2        2       1 0.5572511 1.4774913434      2 #> 1241         2        2        2       1 0.6493897 2.0567661231      3 #> 1242         2        2        2       1 1.0940889 0.7963899867      1 #> 1243         2        2        2       1 0.5454133 0.9424521076      2 #> 1244         2        2        2       1 0.4434234 1.2623087175      2 #> 1245         2        2        2       1 0.8013810 1.9476284660      3 #> 1246         2        2        2       1 0.6176210 2.0218177099      3 #> 1247         2        2        2       1 0.9857537 1.0772164896      2 #> 1248         2        2        2       1 0.6481445 0.5530951179      1 #> 1249         2        2        2       1 1.5469100 0.5460362750      1 #> 1250         2        2        2       1 0.5392364 2.7430065820      3 #> 1251         2        2        1       0 1.9008982 0.1287707952      1 #> 1252         2        2        2       1 3.1250230 0.2021624976      1 #> 1253         2        2        2       1 1.3522575 1.4782627501      2 #> 1254         2        2        2       1 0.7582025 1.4815698775      2 #> 1255         2        2        2       1 0.8086301 1.1688747501      2 #> 1256         2        2        2       1 2.9199520 0.3683636399      1 #> 1257         2        2        2       1 0.7144232 1.1899031649      2 #> 1258         2        2        2       1 1.0123601 1.5917490724      3 #> 1259         2        2        2       1 0.9758103 1.4935959348      2 #> 1260         2        2        2       1 2.6356086 0.3855861261      1 #> 1261         2        2        2       1 1.0258674 0.1660421476      1 #> 1262         2        2        2       1 1.2286814 0.9515863850      2 #> 1263         2        2        2       1 0.6150101 1.2981677884      2 #> 1264         2        2        2       1 1.5465062 0.4373209588      1 #> 1265         2        2        1       0 1.1094535 0.1613292784      1 #> 1266         2        2        2       1 0.8400273 0.5216752006      1 #> 1267         2        2        2       1 0.7199085 1.3970707620      2 #> 1268         2        2        2       1 1.3967734 0.0643683792      1 #> 1269         2        2        2       1 2.3143204 0.4015873692      1 #> 1270         2        2        2       1 1.4572151 0.5534188399      1 #> 1271         2        2        2       1 0.7490497 1.0793928324      2 #> 1272         2        2        2       1 1.2239912 1.5332094087      3 #> 1273         2        2        1       0 1.6664646 0.0946206080      1 #> 1274         2        2        2       1 4.1052192 0.3838341568      1 #> 1275         2        2        2       1 1.0991122 0.8801166284      2 #> 1276         2        2        2       1 0.8455881 1.9504763879      3 #> 1277         2        2        2       1 0.7461915 0.9288579360      2 #> 1278         2        2        2       1 0.5010726 2.1076399791      3 #> 1279         2        2        2       1 0.6549946 1.7509189769      3 #> 1280         2        2        2       1 1.2853702 1.3281381816      2 #> 1281         2        2        2       1 0.8530317 0.5688201862      1 #> 1282         2        2        2       1 1.9209958 0.1898385519      1 #> 1283         2        2        2       1 1.5851994 0.5743537888      1 #> 1284         2        2        2       1 1.1645163 0.8928681965      2 #> 1285         2        2        2       1 1.1610324 0.9727873640      2 #> 1286         2        2        2       1 1.3502279 1.4452737695      2 #> 1287         2        2        1       0 1.1139378 0.9664711282      2 #> 1288         2        2        2       1 1.8630713 0.0515244705      1 #> 1289         2        2        1       0 1.7174364 0.0209954432      1 #> 1290         2        2        2       1 1.0830893 2.4630662125      3 #> 1291         2        2        2       1 1.1762913 1.0406493467      2 #> 1292         2        2        1       0 1.2666745 0.4912244933      1 #> 1293         2        2        2       1 0.7127032 2.1083157612      3 #> 1294         2        2        2       1 0.9385811 1.0218968902      2 #> 1295         2        2        2       1 0.9512462 1.0222035765      2 #> 1296         2        2        2       1 1.6493600 0.8377341021      2 #> 1297         2        2        2       1 0.4990818 2.6842261319      3 #> 1298         2        2        2       1 0.6882773 1.9527521939      3 #> 1299         2        2        2       1 1.1449732 1.3008650519      2 #> 1300         2        2        2       1 2.1590368 0.7226023403      1 #> 1301         2        2        2       1 1.4015224 2.0333649135      3 #> 1302         2        2        2       1 0.8732461 0.5876873336      1 #> 1303         2        2        2       1 1.0089201 1.2358452402      2 #> 1304         2        2        1       0 1.8850230 0.1103406974      1 #> 1305         2        2        2       1 0.6012405 1.3490383290      2 #> 1306         2        2        1       0 1.4406965 0.6936859897      1 #> 1307         2        2        1       0 2.5992591 0.0766871952      1 #> 1308         2        2        2       1 1.5202180 1.3030916842      2 #> 1309         2        2        2       1 0.5643398 2.2786833766      3 #> 1310         2        2        2       1 2.9868805 0.5544163458      1 #> 1311         2        2        2       1 1.6015185 1.7149016663      3 #> 1312         2        2        2       1 0.7743233 1.1586406404      2 #> 1313         2        2        2       1 0.7013924 1.9313188811      3 #> 1314         2        2        2       1 0.3109939 1.5267878236      3 #> 1315         2        2        2       1 0.9744659 1.8036610615      3 #> 1316         2        2        2       1 2.1388815 1.2717744914      2 #> 1317         2        2        2       1 1.7989026 0.4248645166      1 #> 1318         2        2        1       0 0.7173257 0.1398226708      1 #> 1319         2        2        1       0 1.3751300 0.5478956662      1 #> 1320         2        2        2       1 0.8660882 1.4986450166      2 #> 1321         2        2        2       1 0.8039972 1.4699591140      2 #> 1322         2        2        2       1 0.8808890 0.7370715827      1 #> 1323         2        2        1       0 1.2593570 0.2023052035      1 #> 1324         2        2        2       1 1.5918104 1.2951101645      2 #> 1325         2        2        2       1 1.5053067 0.7287414146      1 #> 1326         2        2        2       1 0.5451232 3.2794605110      3 #> 1327         2        2        2       1 1.5247446 1.2335243621      2 #> 1328         2        2        1       0 0.7467953 0.8847288456      2 #> 1329         2        2        2       1 0.7742925 1.1586160832      2 #> 1330         2        2        2       1 1.8506268 0.2721569297      1 #> 1331         2        2        2       1 1.2505683 0.4750561068      1 #> 1332         2        2        2       1 1.1635897 0.9535497731      2 #> 1333         2        2        2       1 0.8001937 0.6070870880      1 #> 1334         2        2        2       1 1.2144734 0.9782785608      2 #> 1335         2        2        2       1 0.5328248 1.3739406818      2 #> 1336         2        2        1       0 1.0883636 0.2886773182      1 #> 1337         2        2        2       1 0.6218806 0.9075584665      2 #> 1338         2        2        2       1 2.3148714 0.5998940370      1 #> 1339         2        2        2       1 0.6740248 1.2889307444      2 #> 1340         2        2        2       1 2.5142166 0.5880107506      1 #> 1341         2        2        2       1 1.0936027 0.1935005536      1 #> 1342         2        2        2       1 0.9593646 0.5521842717      1 #> 1343         2        2        2       1 0.6357770 2.0401506094      3 #> 1344         2        2        2       1 2.1147036 0.4625818403      1 #> 1345         2        2        2       1 1.2077948 1.8427253636      3 #> 1346         2        2        2       1 1.3444262 1.6060928553      3 #> 1347         2        2        1       0 1.7578928 0.2235841934      1 #> 1348         2        2        1       0 0.8257155 0.8099180359      2 #> 1349         2        2        2       1 0.4731120 1.3803047848      2 #> 1350         2        2        2       1 0.9123436 1.5597585779      3 #> 1351         2        2        2       1 1.3115096 0.8143797524      2 #> 1352         2        2        2       1 1.0635185 0.9589270479      2 #> 1353         2        2        2       1 0.9807003 1.3608533643      2 #> 1354         2        2        2       1 1.2469161 1.0568387406      2 #> 1355         2        2        2       1 1.5955015 0.2461489556      1 #> 1356         2        2        2       1 0.4657565 1.9683809746      3 #> 1357         2        2        1       0 1.5767429 0.0963534523      1 #> 1358         2        2        2       1 1.6702201 0.6902066456      1 #> 1359         2        2        2       1 0.5885491 1.3474996933      2 #> 1360         2        2        2       1 1.1445454 0.9017094477      2 #> 1361         2        2        2       1 0.8060187 1.5516869114      3 #> 1362         2        2        2       1 0.3233069 2.6013173279      3 #> 1363         2        2        2       1 0.4734202 2.9102398340      3 #> 1364         2        2        2       1 1.7923191 0.9127293896      2 #> 1365         2        2        2       1 0.9220664 1.0584917180      2 #> 1366         2        2        2       1 2.1036711 1.6699191782      3 #> 1367         2        2        2       1 1.1300476 0.5155293377      1 #> 1368         2        2        2       1 0.6988996 1.4177102767      2 #> 1369         2        2        2       1 0.7731969 0.6968684734      1 #> 1370         2        2        2       1 0.8487986 0.6863535104      1 #> 1371         2        2        2       1 0.9404779 2.4724877614      3 #> 1372         2        2        2       1 1.1893512 1.3551624896      2 #> 1373         2        2        2       1 1.1728892 1.7315713339      3 #> 1374         2        2        2       1 0.7093599 1.4592752215      2 #> 1375         2        2        2       1 1.9839917 1.1673812917      2 #> 1376         2        2        2       1 1.4395699 0.4555330834      1 #> 1377         2        2        2       1 0.4389657 1.9774670280      3 #> 1378         2        2        2       1 1.3403868 0.2791256634      1 #> 1379         2        2        1       0 1.9852809 0.0918519691      1 #> 1380         2        2        2       1 0.4936650 1.3330890928      2 #> 1381         2        2        2       1 1.1331933 0.6140655129      1 #> 1382         2        2        2       1 1.3125076 0.6189802265      1 #> 1383         2        2        2       1 0.5175563 1.8904423434      3 #> 1384         2        2        2       1 1.0710658 1.7050987329      3 #> 1385         2        2        2       1 1.7655551 0.3172562191      1 #> 1386         2        2        2       1 1.3235233 0.3782323334      1 #> 1387         2        2        2       1 1.8227551 0.4594827503      1 #> 1388         2        2        2       1 1.2984322 0.9752320153      2 #> 1389         2        2        2       1 0.5165847 2.1933441690      3 #> 1390         2        2        2       1 1.0707923 2.8760350453      3 #> 1391         2        2        2       1 1.6229686 1.4225790772      2 #> 1392         2        2        2       1 1.1138790 1.1401544688      2 #> 1393         2        2        2       1 1.3206904 0.2834443081      1 #> 1394         2        2        2       1 2.3296095 1.4028877107      2 #> 1395         2        2        1       0 1.0922805 0.5248770027      1 #> 1396         2        2        2       1 0.5245945 2.1874595158      3 #> 1397         2        2        2       1 0.7721823 0.2832866464      1 #> 1398         2        2        1       0 1.2269303 0.3382300554      1 #> 1399         2        2        2       1 0.3611956 2.5191508005      3 #> 1400         2        2        2       1 1.5163580 0.4526249259      1 #> 1401         2        2        2       1 1.5048842 1.0033228541      2 #> 1402         2        2        2       1 0.5516321 1.3047261847      2 #> 1403         2        2        2       1 1.5652530 0.3872269901      1 #> 1404         2        2        2       1 2.5936754 0.9472090170      2 #> 1405         2        2        2       1 1.4005369 1.2288009781      2 #> 1406         2        2        2       1 0.2709722 0.9306440930      2 #> 1407         2        2        2       1 1.1088434 0.6936880099      1 #> 1408         2        2        2       1 1.1191100 0.9213335111      2 #> 1409         2        2        2       1 0.6511569 2.3229496070      3 #> 1410         2        2        2       1 0.7446338 1.4763533525      2 #> 1411         2        2        2       1 2.2203355 0.3968393091      1 #> 1412         2        2        2       1 1.0014604 0.6668010228      1 #> 1413         2        2        2       1 0.9145737 2.1207512072      3 #> 1414         2        2        2       1 2.1194894 0.4218728420      1 #> 1415         2        2        2       1 0.8680342 1.4338661265      2 #> 1416         2        2        2       1 1.1175347 1.3834075904      2 #> 1417         2        2        2       1 0.8872907 0.8005096842      2 #> 1418         2        2        2       1 0.7185260 1.9738145920      3 #> 1419         2        2        2       1 2.2712361 0.4919365455      1 #> 1420         2        2        2       1 1.6763217 0.6720769974      1 #> 1421         2        2        2       1 1.1244029 1.0603477815      2 #> 1422         2        2        2       1 0.7522845 1.1285742382      2 #> 1423         2        2        2       1 1.1383180 1.2450000307      2 #> 1424         2        2        2       1 0.9447857 1.7999781341      3 #> 1425         2        2        2       1 1.3400591 0.9481870625      2 #> 1426         2        2        1       0 1.3542483 0.2896052308      1 #> 1427         2        2        1       0 1.0167460 0.5749304119      1 #> 1428         2        2        2       1 0.4766907 2.1014450572      3 #> 1429         2        2        2       1 1.4152455 0.5644912283      1 #> 1430         2        2        2       1 1.3441643 0.9242389470      2 #> 1431         2        2        2       1 0.7076012 1.9057652778      3 #> 1432         2        2        2       1 1.0927143 1.1638470575      2 #> 1433         2        2        2       1 0.4266788 0.8900125266      2 #> 1434         2        2        2       1 1.2474037 0.2301606355      1 #> 1435         2        2        2       1 1.7753838 0.7796582164      1 #> 1436         2        2        2       1 2.1592032 0.0417975630      1 #> 1437         2        2        2       1 0.9678060 0.8335435573      2 #> 1438         2        2        1       0 1.1744418 0.2836145265      1 #> 1439         2        2        2       1 0.6453095 2.6144784350      3 #> 1440         2        2        2       1 0.7455972 1.2868827165      2 #> 1441         2        2        1       0 2.0590565 0.1615096186      1 #> 1442         2        2        2       1 0.6504322 1.0301676076      2 #> 1443         2        2        2       1 0.8341924 1.0860113085      2 #> 1444         2        2        2       1 1.0640589 2.0194766768      3 #> 1445         2        2        2       1 0.7142503 1.2653172513      2 #> 1446         2        2        2       1 2.8049323 0.4071839352      1 #> 1447         2        2        2       1 0.6527698 2.0335795646      3 #> 1448         2        2        2       1 1.2028144 0.6753330594      1 #> 1449         2        2        2       1 4.7149991 0.0939507383      1 #> 1450         2        2        1       0 1.8087185 0.0980838169      1 #> 1451         2        2        2       1 1.1972292 0.6658290634      1 #> 1452         2        2        2       1 1.6296799 0.4367312664      1 #> 1453         2        2        2       1 2.0648179 0.9475131049      2 #> 1454         2        2        2       1 0.4907649 1.6962008221      3 #> 1455         2        2        2       1 1.7433265 0.9293877622      2 #> 1456         2        2        2       1 0.7506410 1.7175767890      3 #> 1457         2        2        2       1 0.4918725 1.2778211633      2 #> 1458         2        2        2       1 0.8426211 2.6071488631      3 #> 1459         2        2        1       0 1.9580775 0.1775625257      1 #> 1460         2        2        2       1 0.5719568 1.2694696160      2 #> 1461         2        2        2       1 0.6798893 1.4393511316      2 #> 1462         2        2        2       1 1.4665999 0.3580771548      1 #> 1463         2        2        2       1 1.0039969 1.5259522580      3 #> 1464         2        2        2       1 0.6368396 2.1243205608      3 #> 1465         2        2        2       1 1.1173398 0.9132137906      2 #> 1466         2        2        2       1 2.1419691 0.6860114738      1 #> 1467         2        2        2       1 0.5999510 1.5954005461      3 #> 1468         2        2        2       1 0.8079356 1.0835764404      2 #> 1469         2        2        2       1 1.1086073 1.0005755047      2 #> 1470         2        2        2       1 3.3626716 0.3375640534      1 #> 1471         2        2        2       1 1.3054543 0.5879082964      1 #> 1472         2        2        2       1 1.1389857 0.8338369059      2 #> 1473         2        2        2       1 1.0120471 0.8603241254      2 #> 1474         2        2        2       1 0.3986578 3.0343429837      3 #> 1475         2        2        2       1 0.9961629 1.5128513072      3 #> 1476         2        2        2       1 1.1531152 0.4421240848      1 #> 1477         2        2        2       1 1.1210385 1.1732095054      2 #> 1478         2        2        2       1 1.0612843 0.7696545752      1 #> 1479         2        2        2       1 1.6802170 1.6733634955      3 #> 1480         2        2        2       1 0.4913152 1.7186163246      3 #> 1481         2        2        2       1 0.5708063 1.2089210463      2 #> 1482         2        2        2       1 0.4957912 2.6906765518      3 #> 1483         2        2        1       0 2.3801724 0.1691441570      1 #> 1484         2        2        2       1 0.8222220 1.2054073598      2 #> 1485         2        2        2       1 1.3391001 0.5350260477      1 #> 1486         2        2        2       1 0.4988356 1.5752792777      3 #> 1487         2        2        2       1 3.5160967 0.5836660205      1 #> 1488         2        2        2       1 2.5954280 0.3424742531      1 #> 1489         2        2        1       0 0.9028688 0.2472117499      1 #> 1490         2        2        2       1 0.5060530 2.1363053195      3 #> 1491         2        2        2       1 1.1984914 1.0536692001      2 #> 1492         2        2        2       1 1.6212419 0.9934073427      2 #> 1493         2        2        2       1 0.8455150 1.3529904333      2 #> 1494         2        2        2       1 0.9909883 0.6238288833      1 #> 1495         2        2        2       1 1.5168808 1.3139252068      2 #> 1496         2        2        2       1 1.0429343 1.5165794331      3 #> 1497         2        2        2       1 0.4751631 1.5168539275      3 #> 1498         2        2        2       1 3.1537535 0.5050558996      1 #> 1499         2        2        2       1 0.6639675 1.5835593515      3 #> 1500         2        2        2       1 0.3766565 1.7568333640      3 #> 1501         2        2        2       1 0.9628583 0.8212314242      2 #> 1502         2        2        2       1 1.5646245 1.5961321683      3 #> 1503         2        2        2       1 2.1434428 0.4650668941      1 #> 1504         2        2        2       1 1.1831376 0.4529455428      1 #> 1505         2        2        2       1 1.2928216 0.2544756226      1 #> 1506         2        2        2       1 0.4397189 1.4384720823      2 #> 1507         2        2        2       1 2.2050708 0.9887580267      2 #> 1508         2        2        2       1 1.2907826 0.9141343834      2 #> 1509         2        2        2       1 1.2642119 1.3050041394      2 #> 1510         2        2        2       1 1.2769422 1.5373231119      3 #> 1511         2        2        2       1 1.7803471 0.9983646823      2 #> 1512         2        2        2       1 1.4801828 0.2670248498      1 #> 1513         2        2        2       1 0.7519492 1.3031854290      2 #> 1514         2        2        2       1 1.0148597 1.3292591779      2 #> 1515         2        2        2       1 0.6312561 1.6054425564      3 #> 1516         2        2        2       1 2.0142596 0.4326360554      1 #> 1517         2        2        2       1 0.6910094 1.0428248679      2 #> 1518         2        2        2       1 2.1998959 0.4669158245      1 #> 1519         2        2        2       1 1.2399661 0.4330439990      1 #> 1520         2        2        2       1 1.4862615 0.6711764710      1 #> 1521         2        2        2       1 1.3718244 1.1194732746      2 #> 1522         2        2        2       1 1.1535339 0.8415814025      2 #> 1523         2        2        2       1 1.0332045 1.4033786764      2 #> 1524         2        2        2       1 1.0527628 0.5720001165      1 #> 1525         2        2        2       1 0.6399449 1.1455694520      2 #> 1526         2        2        2       1 1.3767210 0.8195840122      2 #> 1527         2        2        2       1 1.6490716 1.1000560752      2 #> 1528         2        2        2       1 1.2580304 0.7291733033      1 #> 1529         2        2        2       1 0.8780695 1.1226542066      2 #> 1530         2        2        2       1 0.6945655 1.2959277772      2 #> 1531         2        2        1       0 1.3754624 0.1631523498      1 #> 1532         2        2        2       1 1.1816581 0.7023515112      1 #> 1533         2        2        2       1 1.1577259 0.4833541768      1 #> 1534         2        2        2       1 1.5091702 0.3418516388      1 #> 1535         2        2        2       1 1.0439369 1.4595061484      2 #> 1536         2        2        2       1 2.8600080 0.0532462232      1 #> 1537         2        2        2       1 0.7256237 1.7356495355      3 #> 1538         2        2        2       1 0.7735767 1.6784469848      3 #> 1539         2        2        2       1 1.1223817 1.4124383791      2 #> 1540         2        2        2       1 0.3620345 2.3289146276      3 #> 1541         2        2        2       1 0.4252543 2.7222799028      3 #> 1542         2        2        2       1 0.9451966 0.5406563460      1 #> 1543         2        2        2       1 0.7694929 1.0964793846      2 #> 1544         2        2        2       1 1.6523759 0.5311119028      1 #> 1545         2        2        2       1 1.1810280 1.5509815814      3 #> 1546         2        2        2       1 0.7312417 2.6249364128      3 #> 1547         2        2        2       1 1.0764302 0.3521346064      1 #> 1548         2        2        2       1 0.9009747 1.5203736709      3 #> 1549         2        2        2       1 0.9491197 1.1443388648      2 #> 1550         2        2        2       1 1.1703994 1.1870283092      2 #> 1551         2        2        2       1 0.4312931 1.9746580241      3 #> 1552         2        2        2       1 1.1716609 0.6679430790      1 #> 1553         2        2        2       1 0.4369781 0.5093103239      1 #> 1554         2        2        2       1 1.6383051 1.8595082998      3 #> 1555         2        2        2       1 1.0210027 0.7917310275      1 #> 1556         2        2        2       1 0.8418784 2.0687753613      3 #> 1557         2        2        2       1 0.5327211 1.9214902852      3 #> 1558         2        2        2       1 1.0206569 1.0358183177      2 #> 1559         2        2        2       1 0.9095704 0.3357503519      1 #> 1560         2        2        2       1 0.7128591 1.0822146330      2 #> 1561         2        2        2       1 0.5611301 1.3014932651      2 #> 1562         2        2        2       1 0.6317552 2.1080524718      3 #> 1563         2        2        2       1 1.5361146 1.1229104490      2 #> 1564         2        2        2       1 0.4576101 2.1718647777      3 #> 1565         2        2        2       1 0.7839183 0.8768162303      2 #> 1566         2        2        1       0 1.6817514 0.2345005861      1 #> 1567         2        2        2       1 1.6177584 0.3397783171      1 #> 1568         2        2        2       1 0.9681865 0.9246073712      2 #> 1569         2        2        2       1 0.9321044 0.9202592264      2 #> 1570         2        2        2       1 0.8469643 0.6709221964      1 #> 1571         2        2        2       1 0.6224955 1.7849435436      3 #> 1572         2        2        2       1 2.2800410 0.0896129837      1 #> 1573         2        2        2       1 0.9387093 0.7679475554      1 #> 1574         2        2        2       1 0.4405946 1.6476037622      3 #> 1575         2        2        2       1 0.8607004 0.3060267822      1 #> 1576         2        2        1       0 1.5639422 0.0592736266      1 #> 1577         2        2        2       1 1.4257707 0.7191962723      1 #> 1578         2        2        2       1 1.2454556 0.8345891182      2 #> 1579         2        2        1       0 2.1254278 0.1121770174      1 #> 1580         2        2        2       1 1.1099380 0.9425060494      2 #> 1581         2        2        2       1 2.1204349 1.4903679063      2 #> 1582         2        2        2       1 1.1027461 0.2507544372      1 #> 1583         2        2        2       1 1.5741051 0.0279493693      1 #> 1584         2        2        2       1 0.4673478 2.3107308233      3 #> 1585         2        2        2       1 0.6699127 2.0728655367      3 #> 1586         2        2        2       1 0.5767511 1.4550766922      2 #> 1587         2        2        2       1 1.6205184 0.5174052065      1 #> 1588         2        2        2       1 1.6156277 1.4896142969      2 #> 1589         2        2        2       1 0.6039763 0.8915267911      2 #> 1590         2        2        2       1 1.6620820 0.6095310930      1 #> 1591         2        2        2       1 0.9882427 1.1497661509      2 #> 1592         2        2        2       1 0.5708060 1.7864746935      3 #> 1593         2        2        2       1 1.5965330 0.8908904447      2 #> 1594         2        2        2       1 0.8245634 0.6122093291      1 #> 1595         2        2        1       0 1.4424370 0.5501886830      1 #> 1596         2        2        2       1 1.6949711 0.9754527592      2 #> 1597         2        2        2       1 0.9231711 1.6789903169      3 #> 1598         2        2        2       1 0.4605741 0.8984045257      2 #> 1599         2        2        1       0 1.5087897 0.1880026256      1 #> 1600         2        2        2       1 1.4489115 0.8262792146      2 #>  #> $gamma #> $gamma$condition #> # A tibble: 2 × 2 #>   correct  Gamma #>     <dbl>  <dbl> #> 1       0 -0.371 #> 2       1  0.449 #>  #> $gamma$rt #> # A tibble: 2 × 2 #>   correct  Gamma #>     <dbl>  <dbl> #> 1       0 -0.433 #> 2       1 -0.550 #>  #> $gamma$correct #> # A tibble: 2 × 2 #>   condition Gamma #>       <int> <dbl> #> 1         1 0.585 #> 2         2 0.921 #>  #> $gamma$rt_bycondition #> # A tibble: 2 × 2 #>   condition  Gamma #>       <int>  <dbl> #> 1         1 -0.485 #> 2         2 -0.533 #>  #> $gamma$rt_byconditionbycorrect #> # A tibble: 4 × 3 #>   condition correct  Gamma #>       <int>   <dbl>  <dbl> #> 1         1       0 -0.462 #> 2         1       1 -0.486 #> 3         2       0 -0.602 #> 4         2       1 -0.513 #>  #>  # }  # Example with asymmetric confidence thresholds paramDf_asym <- data.frame(v1=0.5, v2=1.0, t0=0.1, st0=0,                           mu_d1=1, mu_d2=1,                           s_v1=0.5, s_v2=0.5,                           s_d1=0.3, s_d2=0.3,                           rho_v=0.2, rho_d=0.1,                           thetaLower1=0.5, thetaLower2=1.2,                           thetaUpper1=0.7, thetaUpper2=1.8)  simus_asym <- simulateMTLNR(paramDf_asym, n = 1000) head(simus_asym) #>   condition stimulus response correct        rt      conf rating #> 1         1        1        1       1 0.7947815 1.0059879      2 #> 2         1        1        1       1 1.8947082 1.5184470      3 #> 3         1        1        2       0 2.8836637 0.5657287      1 #> 4         1        1        2       0 1.1457157 0.3591111      1 #> 5         1        1        1       1 1.3243899 0.2857394      1 #> 6         1        1        1       1 1.7103352 0.6030382      2  # Example with multiple conditions paramDf_multi <- data.frame(v1=0.3, v2=0.6, v3=1.2, t0=0.1, st0=0,                            mu_d1=1, mu_d2=1,                            s_v1=0.5, s_v2=0.5,                            s_d1=0.3, s_d2=0.3,                            rho_v=0.2, rho_d=0.1,                            theta1=0.8, theta2=1.5)  simus_multi <- simulateMTLNR(paramDf_multi, n = 1000) table(simus_multi$condition, simus_multi$correct) #>     #>        0    1 #>   1  680 1320 #>   2  433 1567 #>   3  105 1895"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"Simulates decision responses, reaction times state loosing accumulator together discrete confidence judgment  independent partially anti-correlated race model (IRM PCRM) (Hellmann et al., 2023), given specific parameter constellations. See RaceModels information parameters. Also computes Gamma rank correlation confidence ratings condition (task difficulty), reaction times accuracy simulated output. Basically, function wrapper rIRM rPCRM application confidence experiments manipulation specific parameters. rRM_Kiani simulates different version race models, presented Kiani et al. (2014), without confidence measure.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"","code":"simulateRM(paramDf, n = 10000, model = \"IRM\", time_scaled = FALSE,   gamma = FALSE, agg_simus = FALSE, stimulus = c(1, 2), delta = 0.01,   maxrt = 15, seed = NULL)  rRM_Kiani(paramDf, n = 10000, time_scaled = FALSE, gamma = FALSE,   agg_simus = FALSE, stimulus = c(1, 2), delta = 0.01, maxrt = 15,   seed = NULL)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"paramDf list data frame one row. Column names match names RaceModels parameter names (mu1 mu2 used context replaced parameter v). different stimulus quality/mean drift rates, names v1, v2, v3,.... Different s parameters possible s1, s2, s3,... equally many steps drift rates. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... n integer. number samples (per condition stimulus direction) generated. Total number samples n*nConditions*length(stimulus). model character scalar. One \"IRM\" \"PCRM\". (\"IRMt\" \"PCRMt\" also accepted. case, time_scaled set TRUE.) time_scaled logical. Whether time_scaled transformation confidence measure used. gamma logical. TRUE, gamma correlation confidence ratings, rt accuracy computed. agg_simus logical. Simulation done trial basis RTs outcome. TRUE, simulations aggregated RTs return distribution response confidence ratings. Default: FALSE. stimulus numeric vector. Either 1, 2 c(1, 2) (default). Together condition represents experimental situation. binary decision task presented stimulus belongs one two categories. default setting trials categories presented simulated one can choose simulate trials stimulus coming one category (associated positive drift one two accumulators). delta numerical. Size steps discretized simulation (see details). maxrt numerical. Maximum reaction time simulated (see details). Default: 15. seed numerical. Seeding non-random data generation. (Also possible outside function.)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"Depending gamma agg_simus. gamma FALSE, returns data.frame columns: condition, stimulus, response, correct, rt, conf (continuous confidence measure) rating (discrete confidence rating) (agg_simus=TRUE): condition, stimulus,response, correct, rating p (probability response rating, given condition stimulus). gamma TRUE, returns list elements: simus (simulated data frame) gamma, list elements condition, rt correct, tibble two columns (see details information).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"simulation done simulating normal variables discretized steps one process reaches boundary. boundary met within maximum time, response set 0. output fitting function fitRTConf respective model fits argument paramDf simulation. Gamma coefficients computed separately correct/incorrect responses correlation confidence ratings condition rt separately conditions correlation accuracy confidence. resulting data frames output thus two columns. One grouping variable one Gamma coefficient.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"Different parameters different conditions allowed drift rate, v, process variability, s. parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292. Kiani, R., Corthell, L., & Shadlen, M.N. (2014) Choice certainty informed evidence decision time. Neuron, 84(6), 1329-1342. doi:10.1016/j.neuron.2014.12.015","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of confidence ratings and RTs in race confidence models — simulateRM","text":"","code":"# Examples for \"PCRM\" model (equivalent applicable for \"IRM\" model) # 1. Define some parameter set in a data.frame paramDf <- data.frame(a=2,b=2, v1=0.5, v2=1, t0=0.1,st0=0,                       wx=0.6, wint=0.2, wrt=0.2,                       theta1=4)  # 2. Simulate trials for both stimulus categories and all conditions (2) simus <- simulateRM(paramDf, n=30,model=\"PCRM\", time_scaled=TRUE) head(simus) #>   condition stimulus response correct   rt        xj     conf rating #> 1         1        1        1       1 2.63 -1.843342 2.915002      1 #> 2         1        1        1       1 1.95 -1.271001 2.590621      1 #> 3         1        1        1       1 1.50 -2.500650 3.630170      1 #> 4         1        1        1       1 2.95 -1.554173 2.672036      1 #> 5         1        1        1       1 4.61 -3.524262 3.928988      1 #> 6         1        1        1       1 4.68 -2.958572 3.531995      1 # equivalent: simus <- simulateRM(paramDf, model=\"PCRMt\") # \\donttest{   library(ggplot2)   simus <- simus[simus$response!=0,]   simus$rating <- factor(simus$rating, labels=c(\"unsure\", \"sure\"))   ggplot(simus, aes(x=rt, group=interaction(correct, rating),                     color=as.factor(correct), linetype=rating))+     geom_density(linewidth=1.2)+     facet_grid(rows=vars(condition), labeller = \"label_both\")  # }  # automatically aggregate simulation distribution # to get only accuracy x confidence rating distribution for # all conditions agg_simus <- simulateRM(paramDf, n = 20, model=\"PCRMt\", agg_simus = TRUE) head(agg_simus) #> # A tibble: 6 × 4 #> # Groups:   rating, correct [4] #>   rating correct condition     p #>    <dbl>   <dbl>     <int> <dbl> #> 1      1       0         1 0.15  #> 2      1       1         1 0.725 #> 3      1       1         2 0.9   #> 4      2       1         1 0.125 #> 5      2       1         2 0.1   #> 6      2       0         1 0     # \\donttest{   agg_simus$rating <- factor(agg_simus$rating, labels=c(\"unsure\", \"sure\"))   library(ggplot2)   ggplot(agg_simus, aes(x=rating, group=correct, fill=as.factor(correct), y=p))+     geom_bar(stat=\"identity\", position=\"dodge\")+     facet_grid(cols=vars(condition), labeller = \"label_both\")  # }  # \\donttest{   # Compute Gamma correlation coefficients between   # confidence and other behavioral measures   # output will be a list   simu_list <- simulateRM(paramDf, model=\"IRMt\", gamma=TRUE, n=200)   simu_list #> $simus #>     condition stimulus response correct    rt            xj      conf rating #> 1           1        1        2       0  3.19 -2.724561e-01 1.7358007      1 #> 2           1        1        1       1  1.51 -6.053441e-01 2.1704560      1 #> 3           1        1        1       1  3.20 -1.933780e+00 2.9207076      1 #> 4           1        1        2       0  1.89 -1.671672e+00 2.9013575      1 #> 5           1        1        1       1  4.07 -5.980943e-01 1.9200229      1 #> 6           1        1        1       1  3.71 -7.121283e-01 2.0180274      1 #> 7           1        1        0       0 15.11 -4.544969e+00 4.3164720      1 #> 8           1        1        1       1  5.50 -4.113570e+00 4.2803808      2 #> 9           1        1        1       1  1.79 -1.726046e+00 2.9627118      1 #> 10          1        1        1       1  4.46 -1.092575e+00 2.2475427      1 #> 11          1        1        1       1  3.52 -1.748938e+00 2.7629490      1 #> 12          1        1        1       1  1.77 -1.167959e+00 2.5458281      1 #> 13          1        1        1       1  1.71  2.940250e-01 1.4501064      1 #> 14          1        1        1       1  6.11 -4.685759e+00 4.6384727      2 #> 15          1        1        1       1 10.22 -4.034306e+00 4.0628268      2 #> 16          1        1        1       1 11.07 -4.627414e+00 4.4370272      2 #> 17          1        1        1       1  3.03 -3.724157e+00 4.2201529      2 #> 18          1        1        1       1  7.51 -1.052384e+00 2.1291665      1 #> 19          1        1        1       1  6.65 -2.957521e+00 3.4400719      1 #> 20          1        1        1       1  1.34 -6.890013e-01 2.2759650      1 #> 21          1        1        1       1 11.47 -5.864651e+00 5.2445792      2 #> 22          1        1        1       1  1.28 -6.006522e-01 2.2233251      1 #> 23          1        1        1       1  2.23 -3.982483e+00 4.5463536      2 #> 24          1        1        1       1  6.39 -6.953596e+00 6.1659095      2 #> 25          1        1        1       1  2.13 -1.077747e+00 2.4190515      1 #> 26          1        1        2       0  0.87 -3.316958e-01 2.1583814      1 #> 27          1        1        1       1  7.67 -6.558746e+00 5.8300844      2 #> 28          1        1        1       1  3.13 -9.401781e-01 2.2168215      1 #> 29          1        1        1       1  0.91 -1.331880e+00 2.9617682      1 #> 30          1        1        0       0 15.11 -5.012546e+00 4.6211559      1 #> 31          1        1        0       0 15.11 -8.517242e+00 6.9048952      1 #> 32          1        1        1       1  4.56 -3.094944e+00 3.6341742      1 #> 33          1        1        1       1  3.32  2.505050e-01 1.3561437      1 #> 34          1        1        1       1  3.78 -3.544825e+00 4.0092402      2 #> 35          1        1        1       1  5.83 -4.846368e+00 4.7633945      2 #> 36          1        1        1       1  5.24 -3.611695e+00 3.9502755      1 #> 37          1        1        1       1  3.01 -7.446330e+00 6.8925476      2 #> 38          1        1        1       1  2.06 -1.555839e+00 2.7843373      1 #> 39          1        1        1       1  0.72  7.211137e-01 1.3461694      1 #> 40          1        1        1       1  6.37 -2.478114e+00 3.1244180      1 #> 41          1        1        1       1 13.78 -7.953414e+00 6.5643414      2 #> 42          1        1        1       1  1.75 -7.529503e-01 2.2361037      1 #> 43          1        1        1       1  6.69 -6.872219e+00 6.0924654      2 #> 44          1        1        1       1  1.26 -1.739683e-01 1.8937721      1 #> 45          1        1        1       1  7.81 -2.262899e+00 2.9368165      1 #> 46          1        1        1       1  4.07 -1.242236e+00 2.3711649      1 #> 47          1        1        1       1  2.53  9.504988e-01 0.8926518      1 #> 48          1        1        1       1  1.17 -2.488013e+00 3.7539002      1 #> 49          1        1        1       1  1.77 -1.878749e+00 3.0823072      1 #> 50          1        1        1       1  1.55 -1.965592e-01 1.8488551      1 #> 51          1        1        1       1  1.72 -1.953809e+00 3.1507017      1 #> 52          1        1        1       1  3.63 -3.400803e+00 3.9218428      1 #> 53          1        1        1       1  1.21 -1.168203e+00 2.6921783      1 #> 54          1        1        1       1  1.77 -8.812843e-01 2.3294561      1 #> 55          1        1        1       1  5.51 -3.574086e+00 3.9097359      1 #> 56          1        1        1       1  7.10 -9.635078e-01 2.0777177      1 #> 57          1        1        1       1  4.87 -2.161983e+00 2.9698914      1 #> 58          1        1        1       1  6.68 -1.709788e+00 2.5930861      1 #> 59          1        1        1       1  1.84 -2.772712e+00 3.7388832      1 #> 60          1        1        1       1  4.14 -3.325715e+00 3.8248610      1 #> 61          1        1        1       1  3.43  2.299874e-01 1.3655991      1 #> 62          1        1        1       1  0.94  3.796841e-01 1.5439893      1 #> 63          1        1        1       1  5.05  1.061744e+00 0.7371902      1 #> 64          1        1        1       1  1.00 -4.890205e-01 2.2289624      1 #> 65          1        1        1       1  2.42 -8.317849e-01 2.2022089      1 #> 66          1        1        2       0  2.18 -3.051903e+00 3.8703899      1 #> 67          1        1        1       1  0.95 -6.554254e-01 2.3862284      1 #> 68          1        1        1       1  4.40 -3.587727e+00 3.9880130      1 #> 69          1        1        1       1  1.82 -8.428009e-01 2.2917021      1 #> 70          1        1        1       1  2.27 -1.546427e+00 2.7451190      1 #> 71          1        1        1       1  2.60 -6.135302e-01 2.0251976      1 #> 72          1        1        1       1  6.29 -2.721974e+00 3.2931558      1 #> 73          1        1        1       1  2.36 -1.124052e+00 2.4230868      1 #> 74          1        1        1       1  1.19 -1.135345e+00 2.6733955      1 #> 75          1        1        1       1  1.78 -1.218262e-01 1.7548040      1 #> 76          1        1        1       1  4.73 -4.406547e+00 4.5323508      2 #> 77          1        1        1       1  2.66 -2.570552e-01 1.7613651      1 #> 78          1        1        1       1  2.22 -4.626411e-01 1.9532150      1 #> 79          1        1        1       1  2.05 -2.190149e+00 3.2574379      1 #> 80          1        1        1       1  1.45  2.170596e-01 1.5487990      1 #> 81          1        1        1       1  4.23 -3.894245e+00 4.2150341      2 #> 82          1        1        1       1  2.42  1.767645e-01 1.4646503      1 #> 83          1        1        1       1  8.79 -6.260802e+00 5.5847834      2 #> 84          1        1        1       1  2.29 -3.503149e-01 1.8629755      1 #> 85          1        1        1       1  1.68 -1.907305e+00 3.1251918      1 #> 86          1        1        1       1  0.83 -9.228750e-01 2.6720006      1 #> 87          1        1        1       1  2.99  6.694856e-02 1.5048957      1 #> 88          1        1        1       1  0.96  7.409870e-01 1.2425991      1 #> 89          1        1        1       1  2.68  3.027125e-01 1.3542240      1 #> 90          1        1        1       1  2.95 -2.692363e+00 3.4897905      1 #> 91          1        1        1       1  1.87 -2.523391e+00 3.5443612      1 #> 92          1        1        1       1  1.00  2.373600e-01 1.6399997      1 #> 93          1        1        1       1  0.94  2.986788e-02 1.8302152      1 #> 94          1        1        1       1  9.49 -1.655045e+00 2.4968504      1 #> 95          1        1        2       0  0.66  7.702781e-01 1.3337514      1 #> 96          1        1        1       1  4.72 -5.594175e+00 5.3561798      2 #> 97          1        1        1       1  4.45 -1.817898e+00 2.7527400      1 #> 98          1        1        1       1  2.34  4.895243e-01 1.2417619      1 #> 99          1        1        1       1  4.13 -3.235266e-01 1.7252292      1 #> 100         1        1        1       1 13.52 -5.434902e+00 4.9214454      2 #> 101         1        1        1       1  1.64 -3.714610e+00 4.5109231      2 #> 102         1        1        1       1  1.28 -1.241149e-01 1.8496652      1 #> 103         1        1        1       1  0.92 -9.941201e-01 2.6786256      1 #> 104         1        1        1       1  1.63 -3.701611e-01 1.9670194      1 #> 105         1        1        1       1  2.76 -1.754497e-01 1.6946684      1 #> 106         1        1        1       1  2.96 -7.592429e-01 2.1001231      1 #> 107         1        1        0       0 15.11 -6.979740e+00 5.9030236      1 #> 108         1        1        1       1  2.36 -2.455160e+00 3.3988396      1 #> 109         1        1        1       1  1.85 -3.206131e-01 1.8943974      1 #> 110         1        1        1       1  2.34  2.336985e-01 1.4294435      1 #> 111         1        1        2       0  2.12 -8.637555e-01 2.2619591      1 #> 112         1        1        1       1  2.13 -6.760220e-01 2.1216255      1 #> 113         1        1        1       1  3.35 -8.197787e-01 2.1156336      1 #> 114         1        1        1       1  1.53 -1.344146e+00 2.7330391      1 #> 115         1        1        1       1  2.73 -1.327924e+00 2.5304967      1 #> 116         1        1        1       1  2.87 -7.018219e-01 2.0659349      1 #> 117         1        1        1       1  2.08 -1.853428e+00 3.0018933      1 #> 118         1        1        0       0 15.11 -3.472056e+00 3.6173378      1 #> 119         1        1        1       1  3.72 -1.931336e+00 2.8771721      1 #> 120         1        1        1       1  1.80 -1.872242e-01 1.8012324      1 #> 121         1        1        1       1  2.09 -3.961613e+00 4.5639592      2 #> 122         1        1        1       1  3.77 -4.308971e+00 4.5484328      2 #> 123         1        1        1       1  3.17 -2.199619e+00 3.1132871      1 #> 124         1        1        1       1  2.47 -2.498307e+00 3.4132909      1 #> 125         1        1        1       1  7.53 -4.219071e+00 4.2611263      2 #> 126         1        1        1       1 10.77 -5.612467e+00 5.0948014      2 #> 127         1        1        1       1  3.31 -3.149655e+00 3.7762739      1 #> 128         1        1        2       0  4.39  1.267169e+00 0.6070220      1 #> 129         1        1        2       0  4.85  1.573726e+00 0.3866485      1 #> 130         1        1        1       1  1.45  1.186807e+00 0.8000256      1 #> 131         1        1        1       1  2.96 -2.656536e-01 1.7455965      1 #> 132         1        1        1       1  7.62 -2.961177e+00 3.4114694      1 #> 133         1        1        1       1  1.67 -3.187350e-01 1.9209687      1 #> 134         1        1        1       1  4.62 -3.081841e+00 3.6212361      1 #> 135         1        1        1       1  0.71 -5.758392e-01 2.4611821      1 #> 136         1        1        2       0  3.60 -1.131777e+00 2.3207715      1 #> 137         1        1        2       0  1.24  1.083360e+00 0.9090039      1 #> 138         1        1        2       0  0.91 -1.589906e-01 1.9973922      1 #> 139         1        1        1       1  3.27 -5.109933e+00 5.1769580      2 #> 140         1        1        1       1  3.53 -2.075654e+00 2.9935116      1 #> 141         1        1        1       1  2.36 -1.623416e+00 2.7891394      1 #> 142         1        1        1       1  1.53  8.323562e-02 1.6378828      1 #> 143         1        1        1       1  2.70 -3.244958e+00 3.9215664      1 #> 144         1        1        1       1  0.94  3.261746e-01 1.5877718      1 #> 145         1        1        1       1  1.66 -1.324712e+00 2.6873355      1 #> 146         1        1        1       1  0.96 -3.311169e-01 2.1170773      1 #> 147         1        1        2       0  0.90  4.919066e-01 1.4656828      1 #> 148         1        1        1       1  5.08 -5.788244e+00 5.4605677      2 #> 149         1        1        1       1  1.07  6.913719e-01 1.2539882      1 #> 150         1        1        1       1  2.94 -1.239391e-02 1.5649417      1 #> 151         1        1        1       1  1.93 -9.109957e-03 1.6503456      1 #> 152         1        1        2       0  1.96 -1.414280e+00 2.6959098      1 #> 153         1        1        1       1  0.89 -1.188903e-01 1.9731393      1 #> 154         1        1        1       1  2.37 -1.118591e+00 2.4178753      1 #> 155         1        1        1       1  0.78 -2.704831e-01 2.1554985      1 #> 156         1        1        1       1  3.95 -2.046571e+00 2.9423369      1 #> 157         1        1        1       1  0.76 -1.185322e+00 2.9415481      1 #> 158         1        1        1       1  5.36 -4.781090e+00 4.7471971      2 #> 159         1        1        2       0  1.98  1.404872e+00 0.5897504      1 #> 160         1        1        1       1  3.03 -2.414622e+00 3.2814247      1 #> 161         1        1        1       1  2.49 -4.927999e+00 5.1824383      2 #> 162         1        1        1       1  1.74  9.604520e-01 0.9422527      1 #> 163         1        1        1       1  1.32 -1.670147e+00 3.0477187      1 #> 164         1        1        1       1  8.15 -9.579512e-01 2.0537696      1 #> 165         1        1        2       0  1.55 -2.105695e-01 1.8595883      1 #> 166         1        1        1       1  2.53  4.755087e-01 1.2385871      1 #> 167         1        1        1       1  2.31 -7.335411e-01 2.1424149      1 #> 168         1        1        1       1  2.08 -3.961511e+00 4.5663728      2 #> 169         1        1        1       1  3.14 -2.235839e+00 3.1420954      1 #> 170         1        1        0       0 15.11 -7.771417e+00 6.4188986      1 #> 171         1        1        1       1  3.49 -4.707102e+00 4.8614459      2 #> 172         1        1        1       1  3.79 -1.212705e+00 2.3662324      1 #> 173         1        1        1       1  1.39 -1.595958e+00 2.9668777      1 #> 174         1        1        1       1  3.02 -2.113786e+00 3.0667947      1 #> 175         1        1        0       0 15.11 -5.740673e+00 5.0956201      1 #> 176         1        1        1       1  2.38  4.576890e-01 1.2621239      1 #> 177         1        1        1       1  4.51 -9.192551e-01 2.1248155      1 #> 178         1        1        1       1  2.75 -4.306887e+00 4.6818493      2 #> 179         1        1        1       1  4.85 -5.311401e+00 5.1495471      2 #> 180         1        1        2       0  1.15 -4.997438e-01 2.1829263      1 #> 181         1        1        1       1  2.59  1.677624e-01 1.4583141      1 #> 182         1        1        1       1 11.34 -5.075113e+00 4.7267886      2 #> 183         1        1        1       1  3.12 -4.766573e+00 4.9537756      2 #> 184         1        1        1       1  4.77 -1.724024e+00 2.6716182      1 #> 185         1        1        0       0 15.11 -6.402453e+00 5.5268505      1 #> 186         1        1        1       1  4.59 -1.178784e+00 2.3016881      1 #> 187         1        1        1       1  1.64  1.950251e-01 1.5350476      1 #> 188         1        1        1       1  0.40 -1.291812e+00 3.5422351      1 #> 189         1        1        1       1  2.75 -1.788544e+00 2.8614423      1 #> 190         1        1        1       1  2.22 -9.775077e-02 1.6841593      1 #> 191         1        1        1       1  9.56 -8.341236e+00 6.9422125      2 #> 192         1        1        1       1  3.95 -9.595496e-01 2.1793244      1 #> 193         1        1        1       1  1.69 -2.405719e-01 1.8583313      1 #> 194         1        1        1       1  3.24  5.700085e-01 1.1322596      1 #> 195         1        1        1       1  1.75  1.121097e+00 0.8198869      1 #> 196         1        1        1       1  1.86 -1.149873e+00 2.5155407      1 #> 197         1        1        1       1  3.08 -2.798945e-01 1.7479351      1 #> 198         1        1        1       1  3.03 -1.047465e+00 2.3013897      1 #> 199         1        1        2       0  1.91  4.839321e-01 1.2836765      1 #> 200         1        1        1       1  0.89  6.014851e-02 1.8254292      1 #> 201         2        1        1       1  2.70 -2.029259e+00 3.0413582      1 #> 202         2        1        1       1  1.40 -1.875147e+00 3.1802453      1 #> 203         2        1        1       1  1.52 -1.123855e+00 2.5664453      1 #> 204         2        1        1       1  2.58 -2.791989e+00 3.6107771      1 #> 205         2        1        1       1  0.61 -7.292418e-01 2.6819417      1 #> 206         2        1        1       1  0.80  1.266119e+00 0.8548055      1 #> 207         2        1        1       1  5.86 -7.324579e+00 6.4551292      2 #> 208         2        1        1       1  1.08 -1.418394e+00 2.9436865      1 #> 209         2        1        1       1  1.02 -1.321556e+00 2.8940403      1 #> 210         2        1        1       1  1.77 -1.496079e+00 2.7934816      1 #> 211         2        1        1       1  1.03 -3.067925e-03 1.8246480      1 #> 212         2        1        1       1  2.70 -3.617669e+00 4.1914219      2 #> 213         2        1        1       1  2.20 -5.086807e-01 1.9894524      1 #> 214         2        1        1       1  4.03 -4.446851e+00 4.6193984      2 #> 215         2        1        1       1  3.62 -4.007047e+00 4.3511820      2 #> 216         2        1        1       1  1.22 -2.456951e+00 3.7054372      1 #> 217         2        1        1       1  0.55 -5.640195e-01 2.6009970      1 #> 218         2        1        1       1  2.86 -4.150990e+00 4.5514718      2 #> 219         2        1        1       1  8.75 -9.488688e+00 7.7424690      2 #> 220         2        1        1       1  2.54 -2.024773e+00 3.0582202      1 #> 221         2        1        1       1  3.70 -1.398710e+00 2.5028910      1 #> 222         2        1        1       1  1.26 -3.223936e-01 2.0103892      1 #> 223         2        1        1       1  1.05  3.783324e-01 1.5109554      1 #> 224         2        1        1       1  3.25 -5.760606e+00 5.6435719      2 #> 225         2        1        1       1  2.69 -3.081925e+00 3.8049799      1 #> 226         2        1        1       1  0.67  1.294328e-01 1.8827722      1 #> 227         2        1        1       1  1.06 -1.160964e+00 2.7459313      1 #> 228         2        1        1       1  2.03 -3.390153e-02 1.6571109      1 #> 229         2        1        1       1  4.36 -6.355509e+00 5.9198573      2 #> 230         2        1        1       1  1.65 -2.046426e+00 3.2385327      1 #> 231         2        1        1       1  2.00 -1.784024e+00 2.9645539      1 #> 232         2        1        1       1  1.96 -3.721276e+00 4.4184215      2 #> 233         2        1        1       1  2.37 -1.662528e+00 2.8164429      1 #> 234         2        1        1       1  2.11 -1.594339e+00 2.8047229      1 #> 235         2        1        1       1  2.57 -2.250130e+00 3.2181938      1 #> 236         2        1        1       1  2.96 -2.960403e+00 3.6811336      1 #> 237         2        1        1       1  2.25 -1.867974e+00 2.9847706      1 #> 238         2        1        1       1  1.66 -7.590409e-01 2.2573528      1 #> 239         2        1        1       1  1.07 -9.164468e-01 2.5451780      1 #> 240         2        1        1       1  3.99 -4.605757e+00 4.7347083      2 #> 241         2        1        1       1  1.63 -2.113194e+00 3.2946706      1 #> 242         2        1        1       1  1.73 -2.791520e+00 3.7821658      1 #> 243         2        1        1       1  0.74 -3.359163e-01 2.2355289      1 #> 244         2        1        1       1  3.30 -4.127747e-01 1.8292247      1 #> 245         2        1        1       1  1.98 -9.786642e-01 2.3675463      1 #> 246         2        1        1       1  2.34 -5.301768e+00 5.4904309      2 #> 247         2        1        1       1  5.23 -5.495904e+00 5.2477490      2 #> 248         2        1        1       1  1.99 -1.370395e+00 2.6580363      1 #> 249         2        1        1       1  1.28 -4.938261e-01 2.1395612      1 #> 250         2        1        1       1  0.99 -9.889013e-01 2.6389861      1 #> 251         2        1        1       1  1.20  4.897607e-01 1.3848274      1 #> 252         2        1        1       1  0.81 -5.773110e-01 2.3954841      1 #> 253         2        1        1       1  2.18 -3.127764e+00 3.9264265      1 #> 254         2        1        1       1  0.69  7.858940e-01 1.3049677      1 #> 255         2        1        1       1  0.58  6.994337e-02 2.0038685      1 #> 256         2        1        1       1  2.46 -5.881336e+00 5.8850534      2 #> 257         2        1        1       1  0.79 -1.888847e+00 3.5104040      1 #> 258         2        1        1       1  3.04 -3.122602e+00 3.7877159      1 #> 259         2        1        1       1  5.56 -5.906930e+00 5.5065212      2 #> 260         2        1        1       1  1.12 -1.038469e+00 2.6228171      1 #> 261         2        1        1       1  3.18 -3.670453e+00 4.1624403      2 #> 262         2        1        1       1  1.02 -7.534350e-01 2.4347063      1 #> 263         2        1        1       1  1.31  3.342173e-01 1.4841574      1 #> 264         2        1        1       1  2.43 -5.054476e+00 5.2880184      2 #> 265         2        1        1       1  0.87 -7.896305e-01 2.5375153      1 #> 266         2        1        1       1  1.37 -1.151843e+00 2.6279386      1 #> 267         2        1        1       1  2.91 -4.518788e+00 4.8083397      2 #> 268         2        1        1       1  1.59 -1.684330e+00 2.9781084      1 #> 269         2        1        1       1  2.90 -4.435915e+00 4.7503107      2 #> 270         2        1        1       1  1.11 -1.223641e+00 2.7747202      1 #> 271         2        1        1       1  2.80 -8.357973e-01 2.1683567      1 #> 272         2        1        1       1  1.03  5.451474e-01 1.3820243      1 #> 273         2        1        1       1  5.45 -6.812410e+00 6.1359007      2 #> 274         2        1        1       1  0.97 -1.377842e+00 2.9654130      1 #> 275         2        1        1       1  1.08 -2.318284e+00 3.6654259      1 #> 276         2        1        1       1  2.19  7.894189e-02 1.5567425      1 #> 277         2        1        1       1  4.81 -5.186319e+00 5.0662031      2 #> 278         2        1        1       1  1.29 -1.029137e+00 2.5561827      1 #> 279         2        1        1       1  1.96 -1.922515e+00 3.0753815      1 #> 280         2        1        1       1  2.55 -1.166436e+00 2.4322289      1 #> 281         2        1        1       1  1.23  3.004901e-01 1.5276030      1 #> 282         2        1        1       1  1.20 -2.277318e+00 3.5727357      1 #> 283         2        1        1       1  3.22 -2.439719e+00 3.2797581      1 #> 284         2        1        1       1  1.28 -9.218804e-01 2.4752049      1 #> 285         2        1        1       1  1.61 -6.745290e-01 2.2027753      1 #> 286         2        1        1       1  1.09 -9.660100e-01 2.5768040      1 #> 287         2        1        1       1  1.98 -1.391123e+00 2.6751848      1 #> 288         2        1        1       1  3.11 -3.049403e+00 3.7270052      1 #> 289         2        1        1       1  4.67 -5.066034e+00 4.9942470      2 #> 290         2        1        1       1  5.33 -5.416362e+00 5.1858611      2 #> 291         2        1        1       1  6.49 -5.440473e+00 5.1320838      2 #> 292         2        1        1       1  1.19 -3.079374e-01 2.0184483      1 #> 293         2        1        1       1  1.00 -6.154708e-01 2.3314907      1 #> 294         2        1        1       1  1.40 -2.090002e+00 3.3468468      1 #> 295         2        1        1       1  1.61 -3.191390e+00 4.1225303      2 #> 296         2        1        1       1  0.57 -1.706886e+00 3.5972716      1 #> 297         2        1        1       1  2.16 -9.419682e-01 2.3144808      1 #> 298         2        1        1       1  1.03 -1.409414e+00 2.9601179      1 #> 299         2        1        1       1  2.14 -2.024379e+00 3.1181811      1 #> 300         2        1        1       1  1.23 -1.344909e+00 2.8244146      1 #> 301         2        1        1       1  4.48 -2.574924e+00 3.2777146      1 #> 302         2        1        1       1  2.77 -4.584975e+00 4.8793707      2 #> 303         2        1        1       1  2.52 -9.266780e-01 2.2608397      1 #> 304         2        1        1       1  1.02 -1.020284e+00 2.6504578      1 #> 305         2        1        1       1  1.16 -6.368500e-01 2.2885942      1 #> 306         2        1        1       1  1.34 -1.069385e+00 2.5725144      1 #> 307         2        1        1       1  1.16 -6.518167e-01 2.3004816      1 #> 308         2        1        1       1  1.17  3.166101e-01 1.5288601      1 #> 309         2        1        1       1  1.43  1.235635e-01 1.6246993      1 #> 310         2        1        1       1  4.67 -7.186570e+00 6.4649575      2 #> 311         2        1        1       1  4.09 -2.937229e+00 3.5568038      1 #> 312         2        1        1       1  1.08 -1.458052e+00 2.9754940      1 #> 313         2        1        1       1  5.60 -8.346975e+00 7.1758584      2 #> 314         2        1        1       1  3.34 -5.185078e+00 5.2204999      2 #> 315         2        1        1       1  3.04 -3.677166e+00 4.1851404      2 #> 316         2        1        1       1  1.34 -2.279029e+00 3.5155594      1 #> 317         2        1        1       1  1.71 -1.328161e+00 2.6791107      1 #> 318         2        1        1       1  7.97 -8.765847e+00 7.2983228      2 #> 319         2        1        1       1  2.35 -3.524244e+00 4.1844457      2 #> 320         2        1        1       1  2.75 -3.974372e+00 4.4414878      2 #> 321         2        1        1       1  0.96 -9.599106e-01 2.6299627      1 #> 322         2        1        1       1  2.80 -1.413396e+00 2.5852192      1 #> 323         2        1        1       1  1.20 -5.109671e-01 2.1760955      1 #> 324         2        1        1       1  0.94 -2.097414e+00 3.5707955      1 #> 325         2        1        1       1  4.24 -2.704482e+00 3.3834091      1 #> 326         2        1        1       1  2.28 -1.732007e+00 2.8801879      1 #> 327         2        1        1       1  1.78 -3.584296e-01 1.9332747      1 #> 328         2        1        1       1  4.64 -1.684912e+00 2.6506946      1 #> 329         2        1        1       1  3.43 -5.419828e+00 5.3747042      2 #> 330         2        1        1       1  2.02 -8.766307e-01 2.2855219      1 #> 331         2        1        1       1  1.20 -2.496561e+00 3.7460893      1 #> 332         2        1        1       1  1.02 -9.195414e-01 2.5690057      1 #> 333         2        1        1       1  1.06 -2.475760e+00 3.8031907      1 #> 334         2        1        1       1  2.79 -1.606612e+00 2.7257076      1 #> 335         2        1        1       1  1.13 -7.953112e-01 2.4251129      1 #> 336         2        1        1       1  1.69 -3.221592e+00 4.1197638      2 #> 337         2        1        1       1  1.50 -5.272718e-01 2.1125809      1 #> 338         2        1        1       1  4.65 -2.413156e+00 3.1554392      1 #> 339         2        1        1       1  2.47 -5.227140e+00 5.4051040      2 #> 340         2        1        1       1  1.33 -3.619001e-01 2.0234047      1 #> 341         2        1        1       1  1.08 -1.622531e+00 3.1074107      1 #> 342         2        1        1       1  0.89  7.392821e-01 1.2651320      1 #> 343         2        1        1       1  1.03 -1.082193e+00 2.6959232      1 #> 344         2        1        1       1  3.40 -2.249531e+00 3.1276727      1 #> 345         2        1        1       1  0.77 -2.205288e+00 3.7950269      1 #> 346         2        1        1       1  2.24 -1.346821e+00 2.6023779      1 #> 347         2        1        1       1  1.88  2.215467e-01 1.4835798      1 #> 348         2        1        1       1  1.80 -3.042668e-01 1.8894115      1 #> 349         2        1        1       1  1.43  1.173143e+00 0.8129313      1 #> 350         2        1        1       1  2.04 -4.048968e+00 4.6415539      2 #> 351         2        1        1       1  2.07 -2.435727e+00 3.4359954      1 #> 352         2        1        1       1  1.71 -8.209516e-01 2.2948373      1 #> 353         2        1        1       1  2.95 -2.540155e+00 3.3804337      1 #> 354         2        1        1       1  2.24 -2.259819e+00 3.2749994      1 #> 355         2        1        1       1  3.43 -1.504076e+00 2.5960894      1 #> 356         2        1        1       1  3.82 -3.992400e+00 4.3205181      2 #> 357         2        1        1       1  1.49 -2.970053e+00 3.9947784      1 #> 358         2        1        1       1  2.93 -1.792434e+00 2.8452217      1 #> 359         2        1        1       1  1.69 -2.566543e+00 3.6228367      1 #> 360         2        1        1       1  1.44 -9.465455e-01 2.4497865      1 #> 361         2        1        1       1  1.80 -2.977359e+00 3.9033003      1 #> 362         2        1        1       1  2.17 -6.579508e-01 2.1032608      1 #> 363         2        1        1       1  1.49 -8.521549e-01 2.3647639      1 #> 364         2        1        1       1  0.64 -1.233688e+00 3.0924764      1 #> 365         2        1        1       1  1.06 -2.588414e+00 3.8937788      1 #> 366         2        1        1       1  1.55 -1.847673e-01 1.8398214      1 #> 367         2        1        1       1  1.56 -1.953186e+00 3.1917687      1 #> 368         2        1        1       1  2.18 -1.216516e+00 2.5146349      1 #> 369         2        1        1       1  3.78 -5.046716e+00 5.0669578      2 #> 370         2        1        1       1  1.36 -4.921503e-01 2.1175012      1 #> 371         2        1        1       1  1.47 -9.810076e-01 2.4688454      1 #> 372         2        1        1       1  1.66 -1.390550e+00 2.7373809      1 #> 373         2        1        2       0  0.40 -7.027922e-02 2.3632750      1 #> 374         2        1        1       1  4.33 -5.611853e+00 5.4045570      2 #> 375         2        1        1       1  3.67 -1.409113e+00 2.5121776      1 #> 376         2        1        1       1  1.16 -1.039332e-01 1.8653212      1 #> 377         2        1        1       1  1.05 -2.449549e+00 3.7879530      1 #> 378         2        1        1       1  5.53 -6.449672e+00 5.8808520      2 #> 379         2        1        1       1  1.19 -2.502566e+00 3.7556402      1 #> 380         2        1        1       1  2.86 -1.541709e+00 2.6717831      1 #> 381         2        1        1       1  4.71 -5.743793e+00 5.4607538      2 #> 382         2        1        1       1  0.86 -1.679539e+00 3.2812832      1 #> 383         2        1        1       1  2.14 -4.522882e+00 4.9671437      2 #> 384         2        1        1       1  3.17 -3.582372e+00 4.1007751      2 #> 385         2        1        1       1  5.76 -8.633429e+00 7.3580363      2 #> 386         2        1        1       1  1.57 -1.142399e+00 2.5687577      1 #> 387         2        1        1       1  2.22 -2.823202e+00 3.6937995      1 #> 388         2        1        1       1  2.49 -2.903426e+00 3.7057777      1 #> 389         2        1        1       1  1.24 -2.039106e+00 3.3673748      1 #> 390         2        1        1       1  0.83 -1.373100e+00 3.0475252      1 #> 391         2        1        1       1  0.89 -1.040003e+00 2.7330736      1 #> 392         2        1        1       1  2.42 -2.002740e+00 3.0585357      1 #> 393         2        1        1       1  2.68 -3.145560e+00 3.8525478      1 #> 394         2        1        1       1  1.54 -2.756836e+00 3.8135741      1 #> 395         2        1        1       1  1.89 -2.124056e+00 3.2404131      1 #> 396         2        1        1       1  1.17 -1.964271e+00 3.3383909      1 #> 397         2        1        1       1  2.10  3.857263e-01 1.3382784      1 #> 398         2        1        1       1  2.15 -1.187350e+00 2.4973241      1 #> 399         2        1        1       1  5.44 -5.169285e+00 5.0086099      2 #> 400         2        1        1       1  1.49 -1.858165e-01 1.8519248      1 #> 401         1        2        2       1  1.03  1.309972e+00 0.7645120      1 #> 402         1        2        2       1  1.53  1.617391e+00 0.4608044      1 #> 403         1        2        2       1 10.55 -3.124826e+00 3.4538316      1 #> 404         1        2        2       1  2.58 -5.953108e-01 2.0137914      1 #> 405         1        2        2       1  2.33 -1.994038e+00 3.0652740      1 #> 406         1        2        2       1  2.39 -1.151434e+00 2.4395294      1 #> 407         1        2        2       1 12.43 -2.863215e+00 3.2518814      1 #> 408         1        2        2       1  2.70 -1.073214e+00 2.3491482      1 #> 409         1        2        2       1  3.72 -8.388852e-01 2.1068657      1 #> 410         1        2        2       1  1.14 -4.256621e-01 2.1272249      1 #> 411         1        2        2       1  1.68 -5.250850e-01 2.0759324      1 #> 412         1        2        2       1  0.92 -9.704805e-01 2.6592207      1 #> 413         1        2        2       1  2.72 -3.304412e+00 3.9616227      1 #> 414         1        2        2       1  1.16 -1.289915e+00 2.8072956      1 #> 415         1        2        2       1  3.14 -4.776201e-01 1.8854824      1 #> 416         1        2        2       1  3.76  1.327753e+00 0.5781675      1 #> 417         1        2        2       1  2.52 -3.438854e-01 1.8362374      1 #> 418         1        2        2       1  2.16 -7.666164e-01 2.1848350      1 #> 419         1        2        2       1  1.53 -1.180195e+00 2.6072480      1 #> 420         1        2        2       1  1.05 -1.377274e+00 2.9245620      1 #> 421         1        2        1       0  2.64  1.245566e+00 0.6728265      1 #> 422         1        2        2       1  3.96 -2.438204e+00 3.2165168      1 #> 423         1        2        2       1  2.36 -2.482378e+00 3.4187913      1 #> 424         1        2        1       0  5.53 -1.132734e+00 2.2343459      1 #> 425         1        2        2       1  1.33 -7.286592e-02 1.7978615      1 #> 426         1        2        2       1  3.17 -2.941163e+00 3.6428582      1 #> 427         1        2        2       1  7.36 -1.006293e+00 2.1011505      1 #> 428         1        2        2       1  9.79 -2.242953e+00 2.8826277      1 #> 429         1        2        2       1  7.96 -6.377782e+00 5.6956579      2 #> 430         1        2        2       1  2.63 -3.412533e+00 4.0538248      2 #> 431         1        2        2       1  5.43 -2.526682e+00 3.1947838      1 #> 432         1        2        2       1  1.14 -3.629389e-01 2.0772899      1 #> 433         1        2        1       0  2.77  8.812836e-01 0.9305565      1 #> 434         1        2        2       1  0.57 -2.387384e-01 2.2880802      1 #> 435         1        2        2       1  0.79 -4.637430e-01 2.3122171      1 #> 436         1        2        2       1  1.95 -9.719765e-01 2.3672369      1 #> 437         1        2        2       1  6.50 -4.114933e+00 4.2314448      2 #> 438         1        2        2       1  1.51 -1.658877e+00 2.9800225      1 #> 439         1        2        2       1  1.30 -1.030708e+00 2.5543280      1 #> 440         1        2        2       1  3.28 -9.926889e-01 2.2434111      1 #> 441         1        2        1       0  1.29 -8.087563e-02 1.8133722      1 #> 442         1        2        2       1  2.61 -2.455379e+00 3.3619080      1 #> 443         1        2        2       1  5.02 -2.381128e-02 1.4869346      1 #> 444         1        2        1       0  3.11  1.464763e+00 0.4981214      1 #> 445         1        2        2       1  2.92 -1.799716e+00 2.8514676      1 #> 446         1        2        2       1  2.56 -2.320105e+00 3.2704578      1 #> 447         1        2        2       1  2.74 -4.112817e-01 1.8666688      1 #> 448         1        2        1       0  3.18  1.579985e+00 0.4138347      1 #> 449         1        2        2       1  0.89  3.760201e-01 1.5648295      1 #> 450         1        2        2       1  5.22 -1.782524e+00 2.6922341      1 #> 451         1        2        2       1  7.03 -4.106623e+00 4.2038907      2 #> 452         1        2        2       1  0.87 -9.077647e-01 2.6353210      1 #> 453         1        2        2       1  3.17 -1.622262e+00 2.7009702      1 #> 454         1        2        2       1  2.93 -3.202059e-01 1.7868550      1 #> 455         1        2        2       1  2.53  8.258465e-01 0.9834361      1 #> 456         1        2        2       1  0.66 -2.419288e-01 2.2115992      1 #> 457         1        2        2       1  1.78 -6.802757e-01 2.1760443      1 #> 458         1        2        2       1 10.86 -3.650117e+00 3.7955351      1 #> 459         1        2        2       1  1.52 -5.963960e-01 2.1614433      1 #> 460         1        2        2       1  2.90  7.009080e-01 1.0542493      1 #> 461         1        2        2       1  4.20 -3.925123e+00 4.2390888      2 #> 462         1        2        2       1  4.00 -2.410696e+00 3.1943801      1 #> 463         1        2        2       1  1.66 -2.253858e+00 3.3936054      1 #> 464         1        2        2       1  1.84 -1.043945e+00 2.4395086      1 #> 465         1        2        2       1  1.64 -8.241885e-01 2.3108369      1 #> 466         1        2        2       1  4.11 -1.242847e+00 2.3694638      1 #> 467         1        2        2       1  1.13 -6.455861e-01 2.3057722      1 #> 468         1        2        2       1 10.39 -4.349516e+00 4.2679373      2 #> 469         1        2        2       1  5.39 -2.708489e+00 3.3214835      1 #> 470         1        2        2       1  4.35 -2.459246e+00 3.2051725      1 #> 471         1        2        2       1  2.23 -2.422847e+00 3.3968429      1 #> 472         1        2        1       0  3.76  5.242956e-01 1.1442369      1 #> 473         1        2        2       1  1.01  7.525424e-01 1.2196697      1 #> 474         1        2        2       1  3.98 -9.308829e-01 2.1576505      1 #> 475         1        2        2       1  2.11 -2.635679e+00 3.5764279      1 #> 476         1        2        2       1  1.89 -1.768924e+00 2.9742466      1 #> 477         1        2        2       1  1.33 -8.055916e-03 1.7472881      1 #> 478         1        2        2       1  1.02 -8.532461e-01 2.5154050      1 #> 479         1        2        2       1  1.50 -1.769640e+00 3.0680001      1 #> 480         1        2        2       1  2.97 -1.032344e+00 2.2954499      1 #> 481         1        2        2       1  4.60 -4.087048e-01 1.7665986      1 #> 482         1        2        2       1  1.39 -2.019483e+00 3.2955712      1 #> 483         1        2        2       1  2.19 -4.750767e-01 1.9657982      1 #> 484         1        2        2       1  6.71 -1.185763e+00 2.2370722      1 #> 485         1        2        2       1  4.07 -2.052922e+00 2.9389509      1 #> 486         1        2        2       1  5.05 -5.171908e+00 5.0377449      2 #> 487         1        2        2       1  2.53 -4.396762e-01 1.9051164      1 #> 488         1        2        2       1  1.25  8.133402e-01 1.1198100      1 #> 489         1        2        2       1  5.12 -6.215100e-02 1.5106316      1 #> 490         1        2        2       1  0.52 -1.167205e-01 2.2318731      1 #> 491         1        2        2       1  8.63 -6.303444e+00 5.6191542      2 #> 492         1        2        2       1  1.22 -2.633708e+00 3.8448958      1 #> 493         1        2        1       0  2.68  9.053778e-01 0.9175843      1 #> 494         1        2        2       1  1.65 -2.135706e-02 1.6981767      1 #> 495         1        2        2       1  1.61 -1.831919e+00 3.0855837      1 #> 496         1        2        2       1  4.14 -9.910705e-01 2.1917687      1 #> 497         1        2        2       1  2.12  7.180750e-01 1.0902664      1 #> 498         1        2        2       1  0.84 -8.081926e-01 2.5703023      1 #> 499         1        2        2       1  7.47 -4.609117e-01 1.7315157      1 #> 500         1        2        2       1  4.31 -8.319220e-01 2.0726661      1 #> 501         1        2        2       1  3.64 -4.832901e+00 4.9323684      2 #> 502         1        2        2       1 13.51 -3.880543e+00 3.9041100      1 #> 503         1        2        2       1  1.06 -1.378712e+00 2.9210280      1 #> 504         1        2        2       1 14.06 -1.197970e+01 9.1896629      2 #> 505         1        2        0       0 15.11 -8.055095e+00 6.6037497      1 #> 506         1        2        2       1  0.84 -9.387952e-01 2.6790284      1 #> 507         1        2        2       1  3.69 -3.433534e+00 3.9392186      1 #> 508         1        2        2       1  1.37  9.837094e-02 1.6559333      1 #> 509         1        2        2       1  5.15 -1.597994e+00 2.5680125      1 #> 510         1        2        2       1  7.87 -8.243045e-01 1.9689750      1 #> 511         1        2        2       1  1.26 -2.008487e+00 3.3351451      1 #> 512         1        2        2       1  8.07 -5.134377e+00 4.8568949      2 #> 513         1        2        2       1  5.02 -4.206410e+00 4.3736262      2 #> 514         1        2        2       1  2.67  6.500101e-01 1.1031706      1 #> 515         1        2        2       1  1.87 -1.672433e-01 1.7764752      1 #> 516         1        2        2       1  3.28 -9.721167e-01 2.2287605      1 #> 517         1        2        2       1  1.57 -8.768172e-01 2.3655993      1 #> 518         1        2        2       1  1.72 -1.340442e+00 2.6863002      1 #> 519         1        2        0       0 15.11 -7.146046e+00 6.0113929      1 #> 520         1        2        2       1  1.37 -3.775887e+00 4.6680574      2 #> 521         1        2        2       1  4.98 -4.868356e+00 4.8333808      2 #> 522         1        2        2       1  5.13 -5.469915e-02 1.5052241      1 #> 523         1        2        2       1  5.11 -5.418019e-01 1.8415532      1 #> 524         1        2        1       0  1.16  7.935348e-01 1.1525008      1 #> 525         1        2        1       0  0.59 -2.253294e-01 2.2567203      1 #> 526         1        2        2       1  2.27  6.326677e-01 1.1418094      1 #> 527         1        2        2       1  2.62  9.105171e-01 0.9169398      1 #> 528         1        2        2       1  2.16 -2.879334e+00 3.7468655      1 #> 529         1        2        2       1  2.43 -1.437429e+00 2.6438687      1 #> 530         1        2        2       1  1.02 -9.638823e-01 2.6048559      1 #> 531         1        2        2       1  2.80 -1.147076e+00 2.3930113      1 #> 532         1        2        2       1  9.46 -1.970494e+00 2.7072275      1 #> 533         1        2        2       1  6.16 -2.905042e+00 3.4227768      1 #> 534         1        2        2       1  5.08  3.876693e-02 1.4421319      1 #> 535         1        2        2       1  1.43 -2.256508e-01 1.8947892      1 #> 536         1        2        2       1  1.59  1.723780e+00 0.3748359      1 #> 537         1        2        2       1  4.12 -4.306030e+00 4.5124013      2 #> 538         1        2        2       1  4.01 -2.343787e+00 3.1467663      1 #> 539         1        2        2       1  4.45 -3.798666e+00 4.1311419      2 #> 540         1        2        2       1  1.80 -1.646185e-01 1.7842014      1 #> 541         1        2        2       1  2.10 -1.485645e+00 2.7257530      1 #> 542         1        2        2       1  1.42 -1.279071e+00 2.7123335      1 #> 543         1        2        2       1  1.25 -1.755000e+00 3.1398120      1 #> 544         1        2        2       1  2.60 -3.832270e+00 4.3635834      2 #> 545         1        2        2       1  2.28 -1.162167e+00 2.4610952      1 #> 546         1        2        2       1  0.94 -1.724025e+00 3.2652819      1 #> 547         1        2        2       1  5.90 -1.702077e+00 2.6117327      1 #> 548         1        2        2       1  2.42  8.475952e-01 0.9740675      1 #> 549         1        2        1       0  3.81  2.000179e-01 1.3707249      1 #> 550         1        2        2       1  3.34 -2.933228e+00 3.6191845      1 #> 551         1        2        2       1  3.66  7.289625e-01 1.0033520      1 #> 552         1        2        2       1  0.54 -4.370444e-01 2.4985345      1 #> 553         1        2        2       1  1.62 -6.858167e-01 2.2094085      1 #> 554         1        2        0       0 15.11 -8.621947e+00 6.9731233      1 #> 555         1        2        2       1  4.69 -2.680939e+00 3.3388907      1 #> 556         1        2        2       1  3.41 -2.396672e+00 3.2312593      1 #> 557         1        2        2       1  4.64 -3.128915e+00 3.6526376      1 #> 558         1        2        2       1  2.34 -1.671424e+00 2.8270995      1 #> 559         1        2        2       1  2.79 -1.534476e+00 2.6736294      1 #> 560         1        2        2       1  1.18 -1.718368e+00 3.1390712      1 #> 561         1        2        1       0  2.19  9.416664e-01 0.9197560      1 #> 562         1        2        2       1  1.62 -9.514551e-01 2.4118837      1 #> 563         1        2        2       1  3.51 -2.774740e+00 3.4902837      1 #> 564         1        2        2       1  1.14 -1.246247e+00 2.7805058      1 #> 565         1        2        2       1  6.86 -3.935677e+00 4.0949201      2 #> 566         1        2        2       1  3.19 -1.483059e+00 2.5999004      1 #> 567         1        2        0       0 15.11 -6.476126e+00 5.5748578      1 #> 568         1        2        2       1  1.51 -1.405221e+00 2.7851059      1 #> 569         1        2        2       1  3.69 -2.200154e-01 1.6719011      1 #> 570         1        2        2       1  1.79 -1.262326e+00 2.6131379      1 #> 571         1        2        2       1  4.82 -1.605716e+00 2.5874202      1 #> 572         1        2        2       1  4.67 -4.978577e+00 4.9335901      2 #> 573         1        2        2       1  7.51 -6.425985e+00 5.7481354      2 #> 574         1        2        2       1  1.67 -1.974465e+00 3.1786898      1 #> 575         1        2        2       1  2.56  1.676410e+00 0.3629320      1 #> 576         1        2        2       1  0.95 -3.385143e-01 2.1273340      1 #> 577         1        2        2       1 11.23 -8.604604e+00 7.0584475      2 #> 578         1        2        2       1  3.27 -1.721296e+00 2.7631265      1 #> 579         1        2        2       1  4.98 -1.529660e+00 2.5278923      1 #> 580         1        2        2       1  2.64 -4.980669e-01 1.9378166      1 #> 581         1        2        2       1  2.40 -7.486582e-01 2.1435533      1 #> 582         1        2        2       1  4.72 -5.182573e-01 1.8383226      1 #> 583         1        2        2       1  2.63 -1.556738e+00 2.7070018      1 #> 584         1        2        2       1  2.04  5.600976e-01 1.2142910      1 #> 585         1        2        2       1  7.39 -5.763425e+00 5.3071979      2 #> 586         1        2        2       1  9.82 -3.768873e+00 3.8955471      1 #> 587         1        2        2       1  0.66  1.410813e-01 1.8794294      1 #> 588         1        2        2       1  2.91  4.153144e-01 1.2591902      1 #> 589         1        2        2       1  2.59 -1.117324e+00 2.3922443      1 #> 590         1        2        2       1  3.20  1.177182e+00 0.7007492      1 #> 591         1        2        2       1  2.13 -2.996417e+00 3.8395819      1 #> 592         1        2        2       1  1.51 -9.395411e-01 2.4272631      1 #> 593         1        2        2       1  2.64  4.358381e-01 1.2602768      1 #> 594         1        2        1       0  4.25 -1.521808e+00 2.5570181      1 #> 595         1        2        2       1  4.54 -3.380174e+00 3.8336834      1 #> 596         1        2        2       1  1.22 -8.077807e-01 2.4042713      1 #> 597         1        2        2       1  1.21 -1.060361e+00 2.6070011      1 #> 598         1        2        2       1  1.53 -5.963723e-01 2.1593109      1 #> 599         1        2        2       1  1.24 -9.994770e-01 2.5488568      1 #> 600         1        2        2       1  8.18 -5.077492e+00 4.8148258      2 #> 601         2        2        2       1  2.28 -3.869262e+00 4.4520475      2 #> 602         2        2        2       1  1.82 -3.192683e+00 4.0599852      2 #> 603         2        2        2       1  1.34 -1.719355e+00 3.0792345      1 #> 604         2        2        2       1  1.07 -6.557993e-01 2.3358599      1 #> 605         2        2        2       1  1.89 -7.183547e-01 2.1868586      1 #> 606         2        2        2       1  1.90 -2.665759e+00 3.6440571      1 #> 607         2        2        2       1  1.30 -2.492280e+00 3.6981165      1 #> 608         2        2        2       1  1.31 -2.172009e+00 3.4435709      1 #> 609         2        2        2       1  1.35 -1.582208e+00 2.9690154      1 #> 610         2        2        1       0  0.57 -5.937361e-01 2.6046422      1 #> 611         2        2        2       1  0.91 -5.262760e-01 2.2993825      1 #> 612         2        2        2       1  2.16 -2.027340e+00 3.1169468      1 #> 613         2        2        2       1  1.20 -2.098786e-02 1.7886725      1 #> 614         2        2        2       1  1.80 -1.217864e+00 2.5777093      1 #> 615         2        2        2       1  2.33 -2.637735e+00 3.5377023      1 #> 616         2        2        2       1  1.10 -1.199957e+00 2.7599657      1 #> 617         2        2        2       1  1.24 -2.752176e-01 1.9786350      1 #> 618         2        2        2       1  4.89 -4.601054e+00 4.6552346      2 #> 619         2        2        2       1  1.44 -3.028057e+00 4.0583238      2 #> 620         2        2        2       1  3.17 -4.090086e+00 4.4633566      2 #> 621         2        2        2       1  3.02 -5.719913e-01 1.9612647      1 #> 622         2        2        2       1  2.60  4.932879e-01 1.2211040      1 #> 623         2        2        2       1  3.34 -4.925784e+00 5.0361132      2 #> 624         2        2        2       1  0.76 -6.182948e-01 2.4617395      1 #> 625         2        2        2       1  3.21 -5.215406e+00 5.2609497      2 #> 626         2        2        2       1  4.62 -6.464141e+00 5.9687961      2 #> 627         2        2        2       1  3.34 -2.463161e+00 3.2849147      1 #> 628         2        2        2       1  2.24 -9.095209e-01 2.2802113      1 #> 629         2        2        2       1  1.29 -1.073767e+00 2.5911432      1 #> 630         2        2        2       1  1.06 -1.015118e+00 2.6286534      1 #> 631         2        2        2       1  0.60  1.784422e-01 1.8909918      1 #> 632         2        2        2       1  6.09 -5.546809e+00 5.2265116      2 #> 633         2        2        2       1  1.27 -1.249840e+00 2.7357000      1 #> 634         2        2        2       1  2.27 -2.204982e+00 3.2296636      1 #> 635         2        2        2       1  0.78  2.701110e-01 1.7000287      1 #> 636         2        2        2       1  2.34 -3.587391e+00 4.2327120      2 #> 637         2        2        2       1  1.71 -3.776300e+00 4.5338748      2 #> 638         2        2        2       1  2.13 -2.513945e+00 3.4823732      1 #> 639         2        2        2       1  2.82 -2.341952e+00 3.2529784      1 #> 640         2        2        2       1  4.62 -3.213784e+00 3.7128143      1 #> 641         2        2        2       1  2.70 -3.890055e+00 4.3886395      2 #> 642         2        2        2       1  1.28 -7.767602e-01 2.3614141      1 #> 643         2        2        2       1  2.81 -4.179002e+00 4.5795876      2 #> 644         2        2        2       1  0.81 -2.118524e+00 3.6860282      1 #> 645         2        2        2       1  2.03  5.624036e-01 1.2134819      1 #> 646         2        2        2       1  1.31 -1.895542e+00 3.2274234      1 #> 647         2        2        2       1  1.52 -1.772397e+00 3.0644199      1 #> 648         2        2        2       1  1.27 -5.577834e-01 2.1925044      1 #> 649         2        2        2       1  1.15 -7.826393e-01 2.4078791      1 #> 650         2        2        2       1  2.55 -2.307146e+00 3.2624100      1 #> 651         2        2        2       1  1.64 -1.925340e+00 3.1489942      1 #> 652         2        2        2       1  0.94 -5.679276e-01 2.3193422      1 #> 653         2        2        2       1  2.08 -3.167879e+00 3.9773914      1 #> 654         2        2        2       1  1.37 -9.913295e-01 2.5031441      1 #> 655         2        2        2       1  2.29 -3.776640e+00 4.3818296      2 #> 656         2        2        2       1  0.85 -4.555988e-01 2.2713957      1 #> 657         2        2        2       1  2.13 -3.491016e+00 4.2057699      2 #> 658         2        2        2       1  0.73  2.446938e-02 1.9350816      1 #> 659         2        2        2       1  1.19 -2.924593e+00 4.0897016      2 #> 660         2        2        2       1  1.23 -1.055815e+00 2.5965672      1 #> 661         2        2        2       1  0.53 -5.440016e-01 2.6073113      1 #> 662         2        2        2       1  3.14 -1.595323e+00 2.6843137      1 #> 663         2        2        2       1  1.19  4.825493e-02 1.7364988      1 #> 664         2        2        2       1  1.79 -1.494554e+00 2.7882026      1 #> 665         2        2        2       1  2.09 -3.264449e+00 4.0468194      2 #> 666         2        2        2       1  1.10 -1.271991e+00 2.8175927      1 #> 667         2        2        2       1  0.92 -1.060081e+00 2.7327705      1 #> 668         2        2        2       1  2.39 -1.935369e+00 3.0134980      1 #> 669         2        2        2       1  1.84 -2.927836e+00 3.8554778      1 #> 670         2        2        2       1  1.55 -1.860856e+00 3.1238582      1 #> 671         2        2        2       1  1.79 -2.044808e+00 3.2030087      1 #> 672         2        2        2       1  2.32 -8.272386e-01 2.2100781      1 #> 673         2        2        2       1  4.40 -1.520894e+00 2.5485701      1 #> 674         2        2        2       1  2.11 -4.600850e+00 5.0327549      2 #> 675         2        2        2       1  4.08 -5.406335e+00 5.2865438      2 #> 676         2        2        2       1  2.93 -2.645488e+00 3.4584715      1 #> 677         2        2        2       1  2.11 -1.583094e-01 1.7405256      1 #> 678         2        2        2       1  3.80 -6.480104e+00 6.0737569      2 #> 679         2        2        2       1  1.10 -2.195065e+00 3.5560520      1 #> 680         2        2        2       1  4.43 -9.588199e+00 8.1628196      2 #> 681         2        2        2       1  1.20 -2.022863e+00 3.3715404      1 #> 682         2        2        2       1  1.64 -2.458222e+00 3.5546050      1 #> 683         2        2        2       1  3.06 -5.095125e+00 5.1981142      2 #> 684         2        2        2       1  2.72 -2.020933e+00 3.0329484      1 #> 685         2        2        2       1  2.00 -3.273766e+00 4.0745536      2 #> 686         2        2        2       1  3.43 -2.912550e+00 3.5955414      1 #> 687         2        2        2       1  1.22 -8.647745e-02 1.8351759      1 #> 688         2        2        2       1  1.66 -1.556741e+00 2.8637074      1 #> 689         2        2        2       1  0.53 -4.048256e-01 2.4813574      1 #> 690         2        2        2       1  2.58 -7.241913e-01 2.1074875      1 #> 691         2        2        2       1  4.01 -3.576139e+00 4.0108228      2 #> 692         2        2        2       1  2.24 -2.141319e+00 3.1876977      1 #> 693         2        2        2       1  3.29 -5.249549e+00 5.2735012      2 #> 694         2        2        2       1  1.01 -8.905215e-01 2.5499879      1 #> 695         2        2        2       1  0.95 -3.907984e-01 2.1700465      1 #> 696         2        2        2       1  2.18 -2.525385e+00 3.4814643      1 #> 697         2        2        2       1  5.81 -7.531670e+00 6.6004756      2 #> 698         2        2        2       1  0.84 -1.163153e+00 2.8658055      1 #> 699         2        2        2       1  3.95 -4.274852e+00 4.5064328      2 #> 700         2        2        2       1  1.92 -4.818850e+00 5.2504535      2 #> 701         2        2        2       1  0.97 -7.257952e-01 2.4343715      1 #> 702         2        2        1       0  1.08  1.086878e+00 0.9343825      1 #> 703         2        2        2       1  3.25 -4.642974e+00 4.8470497      2 #> 704         2        2        2       1  0.64 -1.499884e+00 3.3246435      1 #> 705         2        2        2       1  1.27 -8.227586e-01 2.4004835      1 #> 706         2        2        2       1  1.11 -2.968028e+00 4.1684984      2 #> 707         2        2        2       1  3.58 -2.798651e+00 3.5008714      1 #> 708         2        2        2       1  5.13 -3.836607e+00 4.1116226      2 #> 709         2        2        2       1  1.11 -1.688195e+00 3.1459028      1 #> 710         2        2        2       1  1.61 -6.814490e-02 1.7402511      1 #> 711         2        2        2       1  1.33 -2.090411e+00 3.3722202      1 #> 712         2        2        2       1  4.09 -6.345560e+00 5.9430625      2 #> 713         2        2        2       1  1.45 -9.731651e-01 2.4678102      1 #> 714         2        2        2       1  3.50 -1.552268e+00 2.6251238      1 #> 715         2        2        2       1  1.85 -2.973777e-01 1.8769433      1 #> 716         2        2        2       1  1.62 -4.347251e-01 2.0180210      1 #> 717         2        2        2       1  4.46 -6.080704e+00 5.7181960      2 #> 718         2        2        2       1  1.06 -1.120752e+00 2.7135961      1 #> 719         2        2        2       1  3.68 -1.338270e+00 2.4615314      1 #> 720         2        2        2       1  1.04 -3.085274e-01 2.0676136      1 #> 721         2        2        2       1  1.45 -1.590119e+00 2.9441807      1 #> 722         2        2        2       1  3.38 -7.626009e+00 6.9490515      2 #> 723         2        2        2       1  3.40 -4.917214e+00 5.0219852      2 #> 724         2        2        2       1  2.58 -3.486901e+00 4.1159779      2 #> 725         2        2        2       1  1.61 -1.003789e+00 2.4539206      1 #> 726         2        2        2       1  0.84 -1.607856e+00 3.2360185      1 #> 727         2        2        2       1  5.10 -3.619805e+00 3.9639765      1 #> 728         2        2        2       1  1.34 -1.820094e+00 3.1577709      1 #> 729         2        2        2       1  1.04  1.070086e-01 1.7325734      1 #> 730         2        2        2       1  6.51 -5.221473e+00 4.9823411      2 #> 731         2        2        2       1  2.63 -3.396546e+00 4.0422227      2 #> 732         2        2        2       1  3.98 -1.630451e+00 2.6484215      1 #> 733         2        2        2       1  3.61 -3.095402e+00 3.7079383      1 #> 734         2        2        2       1  3.27 -4.880982e+00 5.0138695      2 #> 735         2        2        2       1  2.03 -1.770128e+00 2.9487994      1 #> 736         2        2        2       1  1.98 -1.043095e+00 2.4156027      1 #> 737         2        2        2       1  1.50  3.024035e-01 1.4745350      1 #> 738         2        2        2       1  0.70 -3.604001e-01 2.2838917      1 #> 739         2        2        2       1  0.83 -8.876954e-01 2.6426579      1 #> 740         2        2        2       1  3.73 -3.755265e+00 4.1622781      2 #> 741         2        2        2       1  1.81 -2.462129e+00 3.5126760      1 #> 742         2        2        2       1  1.43 -1.258897e+00 2.6939243      1 #> 743         2        2        2       1  5.61 -9.623030e+00 8.0493364      2 #> 744         2        2        2       1  1.80 -4.610618e-04 1.6605264      1 #> 745         2        2        2       1  4.84 -8.944677e+00 7.6640807      2 #> 746         2        2        2       1  1.41 -1.300995e+00 2.7321561      1 #> 747         2        2        2       1  2.87 -3.167933e+00 3.8419498      1 #> 748         2        2        2       1  3.82 -4.426599e+00 4.6260619      2 #> 749         2        2        2       1  2.47 -5.015512e+00 5.2506339      2 #> 750         2        2        2       1  3.09 -4.704010e+00 4.9134749      2 #> 751         2        2        2       1  1.79 -6.439111e-01 2.1469483      1 #> 752         2        2        2       1  1.16 -1.695262e+00 3.1292455      1 #> 753         2        2        2       1  1.38 -1.848231e+00 3.1659928      1 #> 754         2        2        2       1  1.47 -8.484698e-01 2.3666758      1 #> 755         2        2        2       1  0.97 -1.011247e+00 2.6668496      1 #> 756         2        2        2       1  1.84 -1.806366e-01 1.7906289      1 #> 757         2        2        2       1  2.81 -1.823246e+00 2.8799306      1 #> 758         2        2        2       1  1.17 -1.501219e+00 2.9710302      1 #> 759         2        2        2       1  1.31 -8.996121e-01 2.4487877      1 #> 760         2        2        2       1  1.90 -3.016548e-01 1.8731745      1 #> 761         2        2        2       1  1.94 -2.333757e+00 3.3866739      1 #> 762         2        2        2       1  3.71 -4.075468e+00 4.3900670      2 #> 763         2        2        2       1  4.92 -7.257025e+00 6.4886043      2 #> 764         2        2        2       1  1.27 -2.240590e+00 3.5133391      1 #> 765         2        2        2       1  1.28 -1.625123e+00 3.0266282      1 #> 766         2        2        2       1  2.62 -1.894310e+00 2.9532111      1 #> 767         2        2        2       1  0.90  2.115471e-01 1.6965888      1 #> 768         2        2        2       1  0.55 -1.488474e+00 3.4312886      1 #> 769         2        2        2       1  4.95 -8.246040e+00 7.1689371      2 #> 770         2        2        2       1  2.78 -2.141256e+00 3.1128580      1 #> 771         2        2        2       1  1.39  1.682122e-01 1.5977227      1 #> 772         2        2        2       1  1.18  1.119550e+00 0.8901626      1 #> 773         2        2        2       1  0.88 -1.455499e+00 3.0822712      1 #> 774         2        2        2       1  0.60 -1.412276e+00 3.2953458      1 #> 775         2        2        2       1  0.76  1.078798e+00 1.0256881      1 #> 776         2        2        2       1  1.13  5.243473e-01 1.3732582      1 #> 777         2        2        2       1  1.92 -1.935239e+00 3.0927915      1 #> 778         2        2        2       1  1.94 -2.707820e+00 3.6662639      1 #> 779         2        2        2       1  1.44  2.524863e-01 1.5232063      1 #> 780         2        2        2       1  1.01  4.719939e-01 1.4468178      1 #> 781         2        2        2       1  1.75 -1.705091e+00 2.9556361      1 #> 782         2        2        2       1  1.90 -4.623816e-02 1.6818493      1 #> 783         2        2        2       1  2.74 -3.749119e+00 4.2802305      2 #> 784         2        2        2       1  0.58 -1.124931e+00 3.0657232      1 #> 785         2        2        2       1  1.62 -1.518905e+00 2.8444064      1 #> 786         2        2        2       1  1.24 -2.232591e+00 3.5197089      1 #> 787         2        2        2       1  1.74 -3.519549e+00 4.3299116      2 #> 788         2        2        2       1  3.23 -1.496014e+00 2.6058678      1 #> 789         2        2        2       1  2.40 -5.517865e-01 1.9994676      1 #> 790         2        2        2       1  2.22 -5.635936e-01 2.0276534      1 #> 791         2        2        2       1  3.16 -3.155713e+00 3.7972251      1 #> 792         2        2        2       1  1.42 -1.897411e-01 1.8691073      1 #> 793         2        2        2       1  2.67 -4.533086e+00 4.8596533      2 #> 794         2        2        2       1  4.61 -2.948075e+00 3.5290130      1 #> 795         2        2        2       1  0.85  3.034803e-01 1.6406463      1 #> 796         2        2        2       1  2.71 -1.906311e-02 1.5851885      1 #> 797         2        2        2       1  1.29 -1.338634e+00 2.7986245      1 #> 798         2        2        2       1  1.38 -2.752790e-01 1.9441604      1 #> 799         2        2        2       1  0.66 -4.933731e-01 2.4296671      1 #> 800         2        2        2       1  1.83 -2.771004e+00 3.7401247      1 #>  #> $gamma #> $gamma$condition #> # A tibble: 2 × 2 #>   correct   Gamma #>     <dbl>   <dbl> #> 1       0 NaN     #> 2       1   0.245 #>  #> $gamma$rt #> # A tibble: 2 × 2 #>   correct   Gamma #>     <dbl>   <dbl> #> 1       0 NaN     #> 2       1   0.648 #>  #> $gamma$correct #> # A tibble: 2 × 2 #>   condition Gamma #>       <int> <dbl> #> 1         1     1 #> 2         2     1 #>  #> $gamma$rt_bycondition #> # A tibble: 2 × 2 #>   condition Gamma #>       <int> <dbl> #> 1         1 0.611 #> 2         2 0.768 #>  #> $gamma$rt_byconditionbycorrect #> # A tibble: 4 × 3 #> # Groups:   condition [2] #>   condition correct   Gamma #>       <int>   <dbl>   <dbl> #> 1         1       0 NaN     #> 2         1       1   0.662 #> 3         2       0 NaN     #> 4         2       1   0.766 #>  #>  # }"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRTConf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","title":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","text":"Simulates decision responses, reaction times confidence measure together discrete confidence judgment sequential sampling confidence model specified argument model, given specific parameter constellations. function wrapper calls respective functions diffusion based models (dynaViTE 2DSD: simulateWEV) race models (IRM, PCRM, IRMt, PCRMt: simulateRM; MTLNR: simulateMTLNR). also computes Gamma rank correlation confidence ratings condition (task difficulty), reaction times accuracy simulated output.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRTConf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","text":"","code":"simulateRTConf(paramDf, n = 10000, model = NULL, gamma = FALSE,   agg_simus = FALSE, simult_conf = FALSE, stimulus = c(1, 2),   delta = 0.01, maxrt = 15, seed = NULL)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRTConf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","text":"paramDf list dataframe one row required parameters. n integer. number samples (per condition stimulus direction) generated. Total number samples n*nConditions*length(stimulus). model character scalar. One \"dynaViTE\", \"dynWEV\", \"2DSD\", \"2DSDT\", \"IRM\", \"PCRM\", \"IRMt\", \"PCRMt\", \"MTLNR\". also passed column paramDf argument. gamma logical. TRUE, gamma correlation confidence ratings, rt accuracy computed. agg_simus logical. Simulation done trial basis RTs outcome. TRUE, simulations aggregated RTs return distribution response confidence ratings. Default: FALSE. simult_conf logical. Whether experiment confidence reported simultaneously decision. case decision confidence judgment assumed happened subsequent response. Therefore tau included response time. decision reported confidence report, simul_conf FALSE. stimulus numeric vector. Either 1, 2 c(1, 2) (default). Together condition represents experimental situation. 2AFC task presented stimulus belongs one two categories. default setting trials categories presented simulated one can choose simulate trials stimulus coming one category. delta numerical. Size steps discretized simulation. maxrt numerical. Maximum reaction time simulated. Default: 15. seed numerical. Seeding non-random data generation. (Also possible outside function.)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRTConf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","text":"Depending gamma agg_simus. gamma FALSE, returns data.frame columns: condition, stimulus, response, correct, rt, conf (continuous confidence measure) rating (discrete confidence rating) (agg_simus=TRUE): condition, stimulus,response, correct, rating p (probability response rating, given condition stimulus). gamma TRUE, returns list elements: simus (simulated data frame) gamma, list elements condition, rt correct, tibble two columns (see details information).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRTConf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","text":"output fitting function fitRTConf respective model fits argument paramDf simulation. function calls respective simulation function diffusion based models, .e. dynaViTE 2DSD (simulateWEV) race models, .e. IRM(t) PCRM(t), (simulateRM). See information. Simulation Method: simulation done simulating normal variables discretized steps processes reach boundary. boundary met within maximum time, response set 0. MTLNR model simulated without discretization, simply simulating necessary log-normally distributed random variables. Gamma correlations: Gamma coefficients computed separately correct/incorrect responses correlation confidence ratings condition rt separately conditions correlation accuracy confidence. resulting data frames output thus two columns. One grouping variable one Gamma coefficient.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRTConf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateRTConf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of confidence ratings and RTs in sequential sampling confidence models — simulateRTConf","text":"","code":"# The function is particularly useful, when having a collection # of parameter sets for different models (e.g. output by fitRTConfModels for # more than one model). library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:MASS’: #>  #>     select #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # 1. Generate only one parameter set but for two different models paramDf1 <- data.frame(model=\"dynWEV\", a=1.5,v1=0.2, v2=1, t0=0.1,z=0.52,                       sz=0.3,sv=0.4, st0=0,  tau=3, w=0.5,                       theta1=1, svis=0.5, sigvis=0.8) paramDf2 <- data.frame(model=\"PCRMt\", a=2,b=2, v1=0.5, v2=1, t0=0.1,st0=0,                       wx=0.6, wint=0.2, wrt=0.2, theta1=4) paramDf <- full_join(paramDf1, paramDf2) #> Joining with `by = join_by(model, a, v1, v2, t0, st0, theta1)` paramDf  # each model parameters sets hat its relevant parameters #>    model   a  v1 v2  t0    z  sz  sv st0 tau   w theta1 svis sigvis  b  wx wint #> 1 dynWEV 1.5 0.2  1 0.1 0.52 0.3 0.4   0   3 0.5      1  0.5    0.8 NA  NA   NA #> 2  PCRMt 2.0 0.5  1 0.1   NA  NA  NA   0  NA  NA      4   NA     NA  2 0.6  0.2 #>   wrt #> 1  NA #> 2 0.2 # Split paramDf by model (maybe also other columns) and simulate data simus <- paramDf %>% group_by(model) %>%  reframe(simulateRTConf(cbind(cur_group(), pick(everything())), n=200, simult_conf = TRUE)) head(simus) #> # A tibble: 6 × 8 #>   model condition stimulus response correct    rt  conf rating #>   <chr>     <int>    <dbl>    <dbl>   <dbl> <dbl> <dbl>  <dbl> #> 1 PCRMt         1        1        1       1  4.02  1.81      1 #> 2 PCRMt         1        1        1       1  3.86  2.96      1 #> 3 PCRMt         1        1        1       1  3.08  2.70      1 #> 4 PCRMt         1        1        1       1  4.14  5.18      2 #> 5 PCRMt         1        1        1       1  4.37  3.90      1 #> 6 PCRMt         1        1        1       1  5.25  1.89      1"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"Simulates decision responses reaction times together discrete confidence judgment dynaViTE model, 2DSD model (Pleskac & Busemeyer, 2010) dynWEV model (Hellmann et al., 2023), given specific parameter constellations. See ddynaViTE d2DSD information parameters. Also computes Gamma rank correlation confidence ratings condition (task difficulty), reaction times accuracy simulated output. Basically, function wrapper rdynaViTE r2DSD application confidence experiments manipulation specific parameters.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"","code":"simulateWEV(paramDf, n = 10000, model = \"dynWEV\", simult_conf = FALSE,   gamma = FALSE, agg_simus = FALSE, stimulus = c(-1, 1), delta = 0.01,   maxrt = 15, seed = NULL, process_results = FALSE)"},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"paramDf list dataframe one row. Column names match names dynaViTE 2DSD model specific parameter names. different stimulus quality/mean drift rates, names v1, v2, v3,.... Different sv /s parameters possible sv1, sv2, sv3... (s1, s2, s3,... respectively) equally many steps drift rates. Additionally, confidence thresholds given names thetaUpper1, thetaUpper2,..., thetaLower1,... , symmetric thresholds theta1, theta2,.... n integer. number samples (per condition stimulus direction) generated. Total number samples n*nConditions*length(stimulus). model character scalar. One \"dynaViTE\", \"dynWEV\", \"2DSD\". simult_conf logical. TRUE, experiment confidence reported simultaneously decision, decision confidence judgment assumed happened subsequent response tau added simulated decision time. FALSE returned response time decision time plus non-judgment time component. gamma logical. TRUE, gamma correlation confidence ratings, rt accuracy computed. agg_simus logical. Simulation done trial basis RTs outcome. TRUE, simulations aggregated RTs return distribution response confidence ratings. Default: FALSE. stimulus numeric vector. Either 1, -1 c(-1, 1) (default). Together condition represents experimental situation. binary decision task presented stimulus belongs one two categories. default setting trials categories presented simulated one can choose simulate trials stimulus coming one category (1 category associated positive drift decision process \"upper\"/1 responses considered correct -1 correspondingly negative drifts \"lower\"/-1 correct decisions). delta numeric. Discretization steps simulations stochastic process. maxrt numeric. Maximum reaction time returned. simulation stochastic process exceeds rt maxrt, response set 0 maxrt returned rt. seed numerical. Seeding non-random data generation. process_results logical. Whether output simulations contain final state decision (visibility) process additional column. Default FALSE, meaning additional columns final process states returned.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"Depending gamma agg_simus. gamma FALSE, returns data.frame columns: condition, stimulus, response, correct, rt, conf (continuous confidence measure) rating (discrete confidence rating), dec vis (process_results=TRUE) final states accumulators simulation (agg_simus=TRUE): condition, stimulus,response, correct, rating p (probability response rating, given condition stimulus). gamma TRUE, returns list elements: simus (simulated data frame) gamma, list elements condition, rt correct, tibble two columns (see details information).","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"Simulation response decision times done simulating normal variables discretized steps lower upper boundary met (maximal rt reached). Afterwards, confidence measure simulated according respective model. confidence outputs binned according given thresholds. output fitting function fitRTConf respective model fits argument paramDf simulation. Gamma coefficients computed separately correct/incorrect responses correlation confidence ratings condition rt separately conditions correlation accuracy confidence. resulting data frames output thus two columns. One grouping variable one Gamma coefficient.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"Different parameters different conditions allowed drift rate, v, drift rate variability, sv diffusion constant s. parameters used conditions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"Hellmann, S., Zehetleitner, M., & Rausch, M. (2023). Simultaneous modeling choice, confidence response time visual perception. Psychological Review 2023 Mar 13. doi: 10.1037/rev0000411. Epub ahead print. PMID: 36913292.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"Sebastian Hellmann.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/reference/simulateWEV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of confidence ratings and RTs in dynWEV and 2DSD confidence models — simulateWEV","text":"","code":"# Examples for \"dynWEV\" model (equivalent applicable # for \"2DSD\" model (with less parameters)) # 1. Define some parameter set in a data.frame paramDf <- data.frame(a=2.5,v1=0.1, v2=1, t0=0.1,z=0.55,                       sz=0.3,sv=0.8, st0=0,  tau=3, w=0.1,                       theta1=0.8, svis=0.5, sigvis=0.8)  # 2. Simulate trials for both stimulus categories and all conditions (2) simus <- simulateWEV(paramDf, model=\"dynWEV\") head(simus) #>   condition stimulus response correct   rt      conf rating #> 1         1       -1       -1       1 0.77 -2.073310      1 #> 2         1       -1        1       0 0.58  1.018990      2 #> 3         1       -1        1       0 1.25  1.633748      2 #> 4         1       -1       -1       1 1.48  2.700143      2 #> 5         1       -1       -1       1 3.41  3.414562      2 #> 6         1       -1        1       0 2.81  3.948167      2 # \\donttest{   library(ggplot2)   simus <- simus[simus$response!=0,]   simus$rating <- factor(simus$rating, labels=c(\"unsure\", \"sure\"))   ggplot(simus, aes(x=rt, group=interaction(correct, rating),                     color=as.factor(correct), linetype=rating))+     geom_density(linewidth=1.2)+xlim(c(0,5))+     facet_grid(rows=vars(condition), labeller = \"label_both\") #> Warning: Removed 575 rows containing non-finite outside the scale range #> (`stat_density()`).  # }  # automatically aggregate simulation distribution # to get only accuracy x confidence rating distribution for # all conditions agg_simus <- simulateWEV(paramDf, model=\"dynWEV\", agg_simus = TRUE) head(agg_simus) #> # A tibble: 6 × 4 #>   rating correct condition      p #>    <dbl>   <dbl>     <int>  <dbl> #> 1      1       0         1 0.236  #> 2      1       0         2 0.0298 #> 3      1       1         1 0.277  #> 4      1       1         2 0.114  #> 5      2       0         1 0.221  #> 6      2       0         2 0.144  # \\donttest{   agg_simus$rating <- factor(agg_simus$rating, labels=c(\"unsure\", \"sure\"))   library(ggplot2)   ggplot(agg_simus, aes(x=rating, group=correct, fill=as.factor(correct), y=p))+     geom_bar(stat=\"identity\", position=\"dodge\")+     facet_grid(cols=vars(condition), labeller = \"label_both\")  # } # \\donttest{   # Compute Gamma correlation coefficients between   # confidence and other behavioral measures   # output will be a list   simu_list <- simulateWEV(paramDf,n = 400, model=\"dynWEV\", gamma=TRUE)   simu_list #> $simus #>      condition stimulus response correct   rt          conf rating #> 1            1       -1        1       0 0.75  -0.356972657      1 #> 2            1       -1       -1       1 1.32   2.393511600      2 #> 3            1       -1        1       0 4.80   7.959831917      2 #> 4            1       -1       -1       1 0.92   6.643842442      2 #> 5            1       -1       -1       1 1.85   4.048932970      2 #> 6            1       -1       -1       1 0.95   4.163446519      2 #> 7            1       -1       -1       1 0.86  -0.263562203      1 #> 8            1       -1       -1       1 3.89   1.840858279      2 #> 9            1       -1       -1       1 1.56  -0.962642968      1 #> 10           1       -1       -1       1 3.68   6.069272970      2 #> 11           1       -1        1       0 0.48  -0.942902213      1 #> 12           1       -1       -1       1 0.28   5.763160874      2 #> 13           1       -1        1       0 1.20   6.354643652      2 #> 14           1       -1        1       0 4.63   0.706598012      1 #> 15           1       -1       -1       1 0.95   0.742726371      1 #> 16           1       -1        1       0 0.44   1.287022391      2 #> 17           1       -1        1       0 0.76  -1.613983038      1 #> 18           1       -1       -1       1 0.33   1.866213785      2 #> 19           1       -1       -1       1 0.81  -0.196049899      1 #> 20           1       -1        1       0 1.63   0.175261075      1 #> 21           1       -1        1       0 1.26   1.009410008      2 #> 22           1       -1       -1       1 1.64   2.545595610      2 #> 23           1       -1        1       0 0.39   3.372779894      2 #> 24           1       -1        1       0 0.26   2.064229280      2 #> 25           1       -1       -1       1 0.84  -4.678422139      1 #> 26           1       -1        1       0 0.84  -0.287431889      1 #> 27           1       -1       -1       1 1.66  -3.033008263      1 #> 28           1       -1       -1       1 0.70   1.677383506      2 #> 29           1       -1       -1       1 0.56  -0.323491065      1 #> 30           1       -1        1       0 2.00   0.429962818      1 #> 31           1       -1        1       0 0.35  -0.504085792      1 #> 32           1       -1        1       0 0.83   2.717694400      2 #> 33           1       -1        1       0 0.84   1.723103162      2 #> 34           1       -1        1       0 0.45  -0.574748735      1 #> 35           1       -1       -1       1 0.87  -0.298851085      1 #> 36           1       -1       -1       1 2.09  -1.458074438      1 #> 37           1       -1        1       0 0.76  -0.406780143      1 #> 38           1       -1       -1       1 1.45   5.510804427      2 #> 39           1       -1        1       0 2.27  -1.148797031      1 #> 40           1       -1       -1       1 1.07   0.267484740      1 #> 41           1       -1       -1       1 0.78  -2.248525973      1 #> 42           1       -1       -1       1 0.77  -0.951495779      1 #> 43           1       -1       -1       1 3.05  -3.091302642      1 #> 44           1       -1       -1       1 2.21   3.235728371      2 #> 45           1       -1        1       0 0.96  -1.554094208      1 #> 46           1       -1       -1       1 1.15   2.205247598      2 #> 47           1       -1        1       0 1.69   3.391704940      2 #> 48           1       -1        1       0 2.71  -6.314280070      1 #> 49           1       -1       -1       1 2.15   5.207765217      2 #> 50           1       -1       -1       1 0.42   0.134949557      1 #> 51           1       -1        1       0 4.71   9.963784578      2 #> 52           1       -1        1       0 1.43   4.073293617      2 #> 53           1       -1        1       0 0.62   1.002973012      2 #> 54           1       -1        1       0 0.32   1.888509181      2 #> 55           1       -1        1       0 1.90  -0.891331529      1 #> 56           1       -1       -1       1 0.79   0.348427558      1 #> 57           1       -1        1       0 2.14   5.579713596      2 #> 58           1       -1       -1       1 2.33  -0.185850151      1 #> 59           1       -1       -1       1 1.82  -6.707940975      1 #> 60           1       -1        1       0 0.31   2.476385180      2 #> 61           1       -1        1       0 1.79   0.081135971      1 #> 62           1       -1       -1       1 2.82   3.489327464      2 #> 63           1       -1       -1       1 1.13  -1.134450561      1 #> 64           1       -1        1       0 1.15   4.564980818      2 #> 65           1       -1       -1       1 1.83   1.860718894      2 #> 66           1       -1        1       0 0.42   6.708985568      2 #> 67           1       -1        1       0 1.41  -1.505498208      1 #> 68           1       -1        1       0 2.58  -4.157167108      1 #> 69           1       -1        1       0 0.20  -0.611103279      1 #> 70           1       -1        1       0 3.03  -1.540556463      1 #> 71           1       -1        1       0 0.67   0.989000279      2 #> 72           1       -1       -1       1 0.72   1.941176893      2 #> 73           1       -1       -1       1 0.66  -2.671570807      1 #> 74           1       -1       -1       1 0.93   1.533489502      2 #> 75           1       -1       -1       1 2.72  -0.014011812      1 #> 76           1       -1       -1       1 5.03  -1.737366345      1 #> 77           1       -1       -1       1 0.71   1.319037329      2 #> 78           1       -1       -1       1 0.79   2.491700115      2 #> 79           1       -1       -1       1 1.61   3.741459345      2 #> 80           1       -1        1       0 0.43  -1.285032296      1 #> 81           1       -1        1       0 5.00   0.084635802      1 #> 82           1       -1       -1       1 0.75   1.098145697      2 #> 83           1       -1       -1       1 1.04   2.203178591      2 #> 84           1       -1       -1       1 1.97  -2.238244462      1 #> 85           1       -1       -1       1 2.57  -3.251951186      1 #> 86           1       -1        1       0 1.09  -2.211508805      1 #> 87           1       -1        1       0 1.14   0.349688884      1 #> 88           1       -1        1       0 0.97   1.953710371      2 #> 89           1       -1       -1       1 0.36   1.418507678      2 #> 90           1       -1       -1       1 4.12  -0.114300164      1 #> 91           1       -1       -1       1 2.28  -2.018498681      1 #> 92           1       -1        1       0 0.86  -0.318834084      1 #> 93           1       -1       -1       1 0.81  -2.020781733      1 #> 94           1       -1       -1       1 0.51  -2.584401656      1 #> 95           1       -1        1       0 2.13   0.973219799      2 #> 96           1       -1        1       0 1.40   1.121161773      2 #> 97           1       -1        1       0 0.80  -0.036818849      1 #> 98           1       -1        1       0 0.27   2.767855031      2 #> 99           1       -1        1       0 0.75   6.281752308      2 #> 100          1       -1       -1       1 0.78   1.217415795      2 #> 101          1       -1       -1       1 2.32   1.182645245      2 #> 102          1       -1       -1       1 0.84  -7.189308400      1 #> 103          1       -1        1       0 2.63   3.655938525      2 #> 104          1       -1        1       0 0.84  -1.996269828      1 #> 105          1       -1        1       0 0.51  -0.883968407      1 #> 106          1       -1        1       0 0.41  -3.032376336      1 #> 107          1       -1        1       0 3.87   6.906224050      2 #> 108          1       -1        1       0 4.30  -7.499720371      1 #> 109          1       -1       -1       1 4.72   3.596407782      2 #> 110          1       -1       -1       1 0.37   0.953149988      2 #> 111          1       -1       -1       1 1.10  -6.722236648      1 #> 112          1       -1       -1       1 0.51  -0.188796067      1 #> 113          1       -1        1       0 0.36   0.525061141      1 #> 114          1       -1       -1       1 2.01   4.202461317      2 #> 115          1       -1       -1       1 0.45   0.745834461      1 #> 116          1       -1       -1       1 2.84   6.892507443      2 #> 117          1       -1       -1       1 1.83   1.904031182      2 #> 118          1       -1       -1       1 1.09   0.092381190      1 #> 119          1       -1       -1       1 3.73  -2.107749333      1 #> 120          1       -1       -1       1 1.20  -4.711739682      1 #> 121          1       -1       -1       1 1.60   3.321549099      2 #> 122          1       -1        1       0 0.29  -3.772187966      1 #> 123          1       -1       -1       1 2.44   7.983356234      2 #> 124          1       -1       -1       1 1.94   1.847534811      2 #> 125          1       -1       -1       1 3.52  -4.370215788      1 #> 126          1       -1        1       0 0.89   1.125349396      2 #> 127          1       -1       -1       1 7.95  -2.132304929      1 #> 128          1       -1        1       0 1.07  -2.466049940      1 #> 129          1       -1       -1       1 2.57   4.639636293      2 #> 130          1       -1       -1       1 1.24   0.914239862      2 #> 131          1       -1       -1       1 0.31   3.152970193      2 #> 132          1       -1        1       0 0.67  -4.339362982      1 #> 133          1       -1        1       0 0.45  -3.390796972      1 #> 134          1       -1        1       0 1.07   2.082829783      2 #> 135          1       -1       -1       1 0.46   1.308129182      2 #> 136          1       -1       -1       1 2.04   8.238984962      2 #> 137          1       -1        1       0 4.68  -3.423572007      1 #> 138          1       -1       -1       1 0.75   4.105580691      2 #> 139          1       -1       -1       1 1.82  -1.142888754      1 #> 140          1       -1        1       0 0.49  -5.993731941      1 #> 141          1       -1       -1       1 1.33  -0.206191913      1 #> 142          1       -1       -1       1 0.48   2.044466919      2 #> 143          1       -1        1       0 3.71   1.328270678      2 #> 144          1       -1        1       0 5.82  10.517723556      2 #> 145          1       -1        1       0 2.53   3.741705835      2 #> 146          1       -1       -1       1 2.80  -1.130469347      1 #> 147          1       -1        1       0 1.75   1.263173836      2 #> 148          1       -1        1       0 1.34  -2.074091863      1 #> 149          1       -1        1       0 2.47   3.378482079      2 #> 150          1       -1       -1       1 0.98   1.446271678      2 #> 151          1       -1       -1       1 0.42  -1.643992381      1 #> 152          1       -1        1       0 1.04  -2.316317212      1 #> 153          1       -1        1       0 1.04  -0.032248048      1 #> 154          1       -1        1       0 0.20   0.687470858      1 #> 155          1       -1        1       0 2.77   5.709975521      2 #> 156          1       -1        1       0 1.00  -8.652066847      1 #> 157          1       -1       -1       1 2.44   0.566096846      1 #> 158          1       -1        1       0 1.26  -5.450787546      1 #> 159          1       -1        1       0 0.19   1.504344161      2 #> 160          1       -1        1       0 0.49   2.471595795      2 #> 161          1       -1        1       0 0.69   4.481691740      2 #> 162          1       -1       -1       1 1.18   6.956000466      2 #> 163          1       -1        1       0 1.17  -0.736407414      1 #> 164          1       -1        1       0 4.58   0.100887061      1 #> 165          1       -1        1       0 5.37   7.614430996      2 #> 166          1       -1       -1       1 1.32  -1.790142523      1 #> 167          1       -1        1       0 1.61   5.798605141      2 #> 168          1       -1        1       0 0.49  -3.071949608      1 #> 169          1       -1       -1       1 1.35   0.675454783      1 #> 170          1       -1       -1       1 0.85  -1.517507624      1 #> 171          1       -1        1       0 1.50  -3.566276778      1 #> 172          1       -1       -1       1 1.09  -0.350652512      1 #> 173          1       -1       -1       1 1.58  -4.783485226      1 #> 174          1       -1        1       0 1.56  -0.289625246      1 #> 175          1       -1        1       0 0.30  -2.823548822      1 #> 176          1       -1       -1       1 1.23  -5.103076945      1 #> 177          1       -1        1       0 1.03   0.839664030      2 #> 178          1       -1       -1       1 1.53   0.250084634      1 #> 179          1       -1       -1       1 1.14   4.725216911      2 #> 180          1       -1       -1       1 0.56   4.289388097      2 #> 181          1       -1        1       0 0.27  -1.427912028      1 #> 182          1       -1       -1       1 1.38  -3.487357216      1 #> 183          1       -1       -1       1 0.88  -0.768303637      1 #> 184          1       -1        1       0 1.02  -2.002876201      1 #> 185          1       -1       -1       1 1.12  -0.921124232      1 #> 186          1       -1       -1       1 0.58   3.247425600      2 #> 187          1       -1        1       0 0.52   3.907616417      2 #> 188          1       -1       -1       1 1.49  -2.350766855      1 #> 189          1       -1        1       0 1.18   5.435547642      2 #> 190          1       -1        1       0 0.68  -4.474385261      1 #> 191          1       -1       -1       1 1.27   0.263872276      1 #> 192          1       -1       -1       1 1.41   0.613986402      1 #> 193          1       -1        1       0 6.73  -3.857400912      1 #> 194          1       -1       -1       1 0.73   5.866376582      2 #> 195          1       -1       -1       1 5.03  -1.411202963      1 #> 196          1       -1        1       0 3.74  -4.336621196      1 #> 197          1       -1        1       0 0.88   3.812096754      2 #> 198          1       -1        1       0 0.73  -2.205980948      1 #> 199          1       -1        1       0 0.83   0.393189413      1 #> 200          1       -1        1       0 0.57   2.533495294      2 #> 201          1       -1       -1       1 4.25   5.018329965      2 #> 202          1       -1        1       0 0.66   1.431599404      2 #> 203          1       -1       -1       1 0.94  -3.110045273      1 #> 204          1       -1        1       0 1.14   1.232404539      2 #> 205          1       -1        1       0 4.93  -0.893856821      1 #> 206          1       -1       -1       1 1.94   7.175513809      2 #> 207          1       -1        1       0 4.78  -0.944479404      1 #> 208          1       -1        1       0 1.19  -1.377486372      1 #> 209          1       -1       -1       1 3.54  -0.262457872      1 #> 210          1       -1       -1       1 0.63  -4.690759172      1 #> 211          1       -1        1       0 2.25  -1.553063715      1 #> 212          1       -1       -1       1 0.50  -1.520743522      1 #> 213          1       -1        1       0 2.18  -0.383875047      1 #> 214          1       -1       -1       1 1.19   6.402617952      2 #> 215          1       -1        1       0 0.84   2.073673625      2 #> 216          1       -1       -1       1 1.13   4.499817978      2 #> 217          1       -1        1       0 1.84   4.816502436      2 #> 218          1       -1       -1       1 1.41  -2.921754414      1 #> 219          1       -1        1       0 2.60  -3.679608732      1 #> 220          1       -1        1       0 0.61  -0.743931182      1 #> 221          1       -1        1       0 0.35   2.150627579      2 #> 222          1       -1       -1       1 1.45  -2.095373621      1 #> 223          1       -1        1       0 1.61   0.609106371      1 #> 224          1       -1       -1       1 0.82   0.975883562      2 #> 225          1       -1       -1       1 0.51   1.705746774      2 #> 226          1       -1       -1       1 2.94  -1.978103016      1 #> 227          1       -1        1       0 0.73   7.478591177      2 #> 228          1       -1        1       0 0.53   0.395388856      1 #> 229          1       -1       -1       1 0.99  -0.641612998      1 #> 230          1       -1        1       0 0.78  -4.053911713      1 #> 231          1       -1        1       0 0.66   0.229281064      1 #> 232          1       -1        1       0 1.02  -3.503693110      1 #> 233          1       -1       -1       1 0.67   0.380498883      1 #> 234          1       -1        1       0 0.41  -0.978431523      1 #> 235          1       -1       -1       1 1.94  -2.139169579      1 #> 236          1       -1        1       0 0.53   4.466891423      2 #> 237          1       -1       -1       1 0.52  -3.121712951      1 #> 238          1       -1        1       0 1.56  -2.313102084      1 #> 239          1       -1        1       0 9.48  12.876369036      2 #> 240          1       -1       -1       1 0.53   4.906694769      2 #> 241          1       -1       -1       1 0.93  -1.745215831      1 #> 242          1       -1        1       0 0.85   4.299703270      2 #> 243          1       -1       -1       1 3.71   4.692366037      2 #> 244          1       -1        1       0 0.32  -3.542048021      1 #> 245          1       -1        1       0 3.19   2.087718163      2 #> 246          1       -1        1       0 0.94   1.085006311      2 #> 247          1       -1        1       0 1.14   1.002191023      2 #> 248          1       -1       -1       1 1.02   0.045935951      1 #> 249          1       -1       -1       1 2.28   4.053884014      2 #> 250          1       -1       -1       1 1.71   2.619418977      2 #> 251          1       -1        1       0 0.79   2.997623651      2 #> 252          1       -1        1       0 1.62  -0.839067672      1 #> 253          1       -1        1       0 1.27  -3.022594137      1 #> 254          1       -1        1       0 0.92   1.583479639      2 #> 255          1       -1        1       0 2.96  -3.163137037      1 #> 256          1       -1        1       0 0.61   1.572496540      2 #> 257          1       -1        1       0 3.89  -9.846993378      1 #> 258          1       -1        1       0 0.61   1.689100258      2 #> 259          1       -1        1       0 0.31  -0.355794579      1 #> 260          1       -1        1       0 0.53   5.964635893      2 #> 261          1       -1        1       0 1.12  -1.653011000      1 #> 262          1       -1       -1       1 0.61  -2.257232033      1 #> 263          1       -1        1       0 1.01  -1.879490185      1 #> 264          1       -1       -1       1 0.57  -3.200931817      1 #> 265          1       -1        1       0 1.16   1.130992760      2 #> 266          1       -1        1       0 0.43   1.406807391      2 #> 267          1       -1        1       0 0.91  -1.221030235      1 #> 268          1       -1        1       0 0.58   1.959718194      2 #> 269          1       -1        1       0 0.39   3.572803231      2 #> 270          1       -1        1       0 0.74  -1.792308483      1 #> 271          1       -1       -1       1 1.12  -0.928815768      1 #> 272          1       -1       -1       1 1.16  -4.469500583      1 #> 273          1       -1        1       0 0.82   0.024599620      1 #> 274          1       -1       -1       1 1.30  -2.304287222      1 #> 275          1       -1        1       0 0.92   2.211362046      2 #> 276          1       -1       -1       1 2.21  -1.210586109      1 #> 277          1       -1       -1       1 0.36   0.231752021      1 #> 278          1       -1        1       0 0.99   1.024714374      2 #> 279          1       -1       -1       1 4.40   0.456733845      1 #> 280          1       -1       -1       1 1.91   4.429906747      2 #> 281          1       -1       -1       1 2.95   1.680869075      2 #> 282          1       -1       -1       1 1.50   4.515571376      2 #> 283          1       -1        1       0 0.50   2.377495176      2 #> 284          1       -1       -1       1 1.32  -0.771298681      1 #> 285          1       -1       -1       1 2.02   2.806910185      2 #> 286          1       -1        1       0 0.53   1.165608150      2 #> 287          1       -1       -1       1 1.23   2.413804143      2 #> 288          1       -1       -1       1 1.46   1.506800848      2 #> 289          1       -1       -1       1 1.37   1.412026458      2 #> 290          1       -1        1       0 4.55   9.483086969      2 #> 291          1       -1       -1       1 1.60  -0.451718098      1 #> 292          1       -1       -1       1 1.30   3.058045368      2 #> 293          1       -1       -1       1 1.06  -1.237820719      1 #> 294          1       -1        1       0 0.72   3.282326575      2 #> 295          1       -1       -1       1 2.31  -3.087913577      1 #> 296          1       -1       -1       1 1.86   2.565682922      2 #> 297          1       -1       -1       1 1.19   3.182428039      2 #> 298          1       -1       -1       1 2.21   5.275009987      2 #> 299          1       -1       -1       1 0.61   2.230173926      2 #> 300          1       -1        1       0 1.18  -4.642399466      1 #> 301          1       -1        1       0 0.37   3.401343715      2 #> 302          1       -1        1       0 2.76   1.961517291      2 #> 303          1       -1        1       0 0.84   2.421673568      2 #> 304          1       -1        1       0 0.49  -1.706735231      1 #> 305          1       -1        1       0 0.95   0.361047835      1 #> 306          1       -1       -1       1 1.21   2.368344009      2 #> 307          1       -1       -1       1 3.23  -1.159716133      1 #> 308          1       -1       -1       1 2.24   1.870602186      2 #> 309          1       -1       -1       1 0.29   1.277664493      2 #> 310          1       -1       -1       1 0.82  -0.343887626      1 #> 311          1       -1       -1       1 2.81  -2.182761988      1 #> 312          1       -1        1       0 0.73  -1.932315846      1 #> 313          1       -1       -1       1 1.79   3.870503613      2 #> 314          1       -1        1       0 0.36   1.770131107      2 #> 315          1       -1       -1       1 1.26  -3.622962548      1 #> 316          1       -1       -1       1 0.91   2.538836282      2 #> 317          1       -1       -1       1 0.43   3.330809572      2 #> 318          1       -1       -1       1 1.87   2.005891746      2 #> 319          1       -1       -1       1 0.65   0.183998955      1 #> 320          1       -1       -1       1 0.70   4.797919938      2 #> 321          1       -1       -1       1 2.43   2.195274492      2 #> 322          1       -1       -1       1 2.44  -6.242873541      1 #> 323          1       -1        1       0 0.30   1.122445651      2 #> 324          1       -1       -1       1 1.17   2.050463947      2 #> 325          1       -1       -1       1 1.37  -3.588464065      1 #> 326          1       -1        1       0 1.22   2.878217563      2 #> 327          1       -1        1       0 1.87   2.275197691      2 #> 328          1       -1       -1       1 4.54   7.280274924      2 #> 329          1       -1       -1       1 2.35  -2.790226186      1 #> 330          1       -1       -1       1 0.65   3.006826901      2 #> 331          1       -1        1       0 1.28  -1.487729454      1 #> 332          1       -1       -1       1 0.56  -5.318962466      1 #> 333          1       -1       -1       1 2.65  -1.578168180      1 #> 334          1       -1        1       0 1.12   0.624433939      1 #> 335          1       -1       -1       1 2.41  -0.374627570      1 #> 336          1       -1        1       0 3.09   9.986335340      2 #> 337          1       -1       -1       1 3.96   7.590442549      2 #> 338          1       -1        1       0 0.94   3.283758857      2 #> 339          1       -1        1       0 0.72   0.178368090      1 #> 340          1       -1        1       0 2.63   2.858647908      2 #> 341          1       -1        1       0 1.17  -2.598909054      1 #> 342          1       -1        1       0 0.37  -0.380525389      1 #> 343          1       -1       -1       1 1.14  -7.487778821      1 #> 344          1       -1       -1       1 2.08   4.520220679      2 #> 345          1       -1       -1       1 0.85   2.446787890      2 #> 346          1       -1       -1       1 0.87   0.993723707      2 #> 347          1       -1        1       0 0.49   1.533561834      2 #> 348          1       -1       -1       1 1.33  -3.786068921      1 #> 349          1       -1       -1       1 0.72   1.509639221      2 #> 350          1       -1        1       0 0.52  -6.548669207      1 #> 351          1       -1        1       0 1.20  -2.272575923      1 #> 352          1       -1       -1       1 1.47  -0.067706801      1 #> 353          1       -1        1       0 1.31   4.894159612      2 #> 354          1       -1       -1       1 1.29  -0.656640080      1 #> 355          1       -1       -1       1 1.28  -0.459592738      1 #> 356          1       -1        1       0 3.18  -2.776829298      1 #> 357          1       -1       -1       1 1.00   1.662833218      2 #> 358          1       -1        1       0 1.01   2.464479250      2 #> 359          1       -1        1       0 2.74  -1.387762880      1 #> 360          1       -1        1       0 1.49   3.794519545      2 #> 361          1       -1       -1       1 2.50  -2.656293825      1 #> 362          1       -1        1       0 1.51   0.876890922      2 #> 363          1       -1       -1       1 0.73  -6.386431410      1 #> 364          1       -1       -1       1 0.85  -4.147398004      1 #> 365          1       -1       -1       1 1.83   0.493147231      1 #> 366          1       -1       -1       1 0.59   3.526325336      2 #> 367          1       -1       -1       1 0.91   4.147098693      2 #> 368          1       -1        1       0 1.66   3.268900846      2 #> 369          1       -1        1       0 1.42   2.941528211      2 #> 370          1       -1        1       0 1.11  -1.071757371      1 #> 371          1       -1        1       0 0.78   0.671543997      1 #> 372          1       -1        1       0 1.68  -7.240472688      1 #> 373          1       -1        1       0 1.72  -3.044691452      1 #> 374          1       -1        1       0 1.38   1.064121627      2 #> 375          1       -1        1       0 2.50  -5.061252499      1 #> 376          1       -1        1       0 0.27   3.227368424      2 #> 377          1       -1       -1       1 2.31   3.817057793      2 #> 378          1       -1        1       0 0.38   4.034465034      2 #> 379          1       -1       -1       1 0.76   3.689381599      2 #> 380          1       -1        1       0 1.50   3.814202244      2 #> 381          1       -1       -1       1 0.42   1.898897490      2 #> 382          1       -1        1       0 0.44  -1.510695047      1 #> 383          1       -1       -1       1 0.47  -0.262819696      1 #> 384          1       -1        1       0 3.01  -1.479974551      1 #> 385          1       -1        1       0 2.13   0.264621130      1 #> 386          1       -1       -1       1 0.62   0.659552386      1 #> 387          1       -1       -1       1 1.02  -5.195315585      1 #> 388          1       -1        1       0 0.26   2.181521819      2 #> 389          1       -1       -1       1 1.61   2.970096817      2 #> 390          1       -1        1       0 0.26   4.000309871      2 #> 391          1       -1       -1       1 0.72  -2.364181818      1 #> 392          1       -1       -1       1 1.64  -0.515730940      1 #> 393          1       -1       -1       1 1.47   3.279655442      2 #> 394          1       -1       -1       1 1.94   4.441199428      2 #> 395          1       -1       -1       1 0.64   1.735362222      2 #> 396          1       -1       -1       1 0.60   3.582973161      2 #> 397          1       -1       -1       1 2.30  -5.655648249      1 #> 398          1       -1       -1       1 2.66  -0.444739195      1 #> 399          1       -1        1       0 1.73  -1.519807207      1 #> 400          1       -1       -1       1 0.53  -3.937026030      1 #> 401          2       -1       -1       1 2.13   3.462188368      2 #> 402          2       -1       -1       1 1.16   4.793618118      2 #> 403          2       -1        1       0 0.75   9.176653275      2 #> 404          2       -1       -1       1 0.39   0.890757531      2 #> 405          2       -1        1       0 3.12   2.250129082      2 #> 406          2       -1       -1       1 3.19   9.803143668      2 #> 407          2       -1       -1       1 0.37   1.455043640      2 #> 408          2       -1       -1       1 0.51   4.217682822      2 #> 409          2       -1       -1       1 0.42   4.885057919      2 #> 410          2       -1       -1       1 1.39   4.621655393      2 #> 411          2       -1       -1       1 1.06   3.894920388      2 #> 412          2       -1       -1       1 0.55   1.682025112      2 #> 413          2       -1       -1       1 1.49   8.154855120      2 #> 414          2       -1       -1       1 0.38   2.335052656      2 #> 415          2       -1       -1       1 0.92   3.036710582      2 #> 416          2       -1       -1       1 1.01   4.303557510      2 #> 417          2       -1       -1       1 0.31   6.818613326      2 #> 418          2       -1       -1       1 1.08   0.209739127      1 #> 419          2       -1        1       0 1.32  -4.696630259      1 #> 420          2       -1       -1       1 0.66   5.191625705      2 #> 421          2       -1       -1       1 1.70   7.044829124      2 #> 422          2       -1       -1       1 1.82   1.391790141      2 #> 423          2       -1       -1       1 0.99   2.344393602      2 #> 424          2       -1        1       0 3.24   3.867184316      2 #> 425          2       -1        1       0 0.47   1.900639425      2 #> 426          2       -1       -1       1 1.10   5.404814495      2 #> 427          2       -1       -1       1 1.10   7.633062709      2 #> 428          2       -1        1       0 2.14   3.285082390      2 #> 429          2       -1       -1       1 1.76  -1.600388816      1 #> 430          2       -1       -1       1 0.57   3.750647682      2 #> 431          2       -1        1       0 1.94   2.116096012      2 #> 432          2       -1       -1       1 0.52   4.498694464      2 #> 433          2       -1       -1       1 0.65   2.110131858      2 #> 434          2       -1        1       0 2.42  14.502109053      2 #> 435          2       -1       -1       1 1.53   4.736564386      2 #> 436          2       -1       -1       1 1.09   2.887463360      2 #> 437          2       -1        1       0 1.89   5.714785065      2 #> 438          2       -1       -1       1 1.48   4.325318408      2 #> 439          2       -1       -1       1 1.14  -0.850294702      1 #> 440          2       -1       -1       1 0.84   0.823565404      2 #> 441          2       -1       -1       1 0.67   1.160562969      2 #> 442          2       -1       -1       1 0.67   6.345967972      2 #> 443          2       -1       -1       1 0.81   1.859330195      2 #> 444          2       -1       -1       1 1.04  11.553939036      2 #> 445          2       -1        1       0 0.70   6.122662159      2 #> 446          2       -1       -1       1 1.52   3.139285667      2 #> 447          2       -1       -1       1 4.04   3.266154912      2 #> 448          2       -1       -1       1 0.57   3.909210105      2 #> 449          2       -1       -1       1 0.52   1.126821920      2 #> 450          2       -1       -1       1 0.69  -1.045910298      1 #> 451          2       -1       -1       1 4.72   7.469432164      2 #> 452          2       -1       -1       1 1.48   4.334990201      2 #> 453          2       -1        1       0 0.46  -4.931616091      1 #> 454          2       -1       -1       1 1.78  11.684263508      2 #> 455          2       -1        1       0 0.20   1.275633112      2 #> 456          2       -1       -1       1 1.05   6.372628046      2 #> 457          2       -1       -1       1 1.72   5.832203205      2 #> 458          2       -1       -1       1 2.00  -1.129908522      1 #> 459          2       -1       -1       1 0.72   5.268992710      2 #> 460          2       -1       -1       1 0.86   2.289640353      2 #> 461          2       -1       -1       1 2.87   0.566250520      1 #> 462          2       -1       -1       1 0.62   6.964783195      2 #> 463          2       -1       -1       1 0.96   5.753494605      2 #> 464          2       -1       -1       1 1.90   6.547765961      2 #> 465          2       -1        1       0 0.56   4.517078220      2 #> 466          2       -1       -1       1 1.29   9.040869201      2 #> 467          2       -1       -1       1 1.45   2.641177456      2 #> 468          2       -1       -1       1 0.79   0.622997104      1 #> 469          2       -1       -1       1 1.42   5.580775521      2 #> 470          2       -1       -1       1 1.59   0.850087638      2 #> 471          2       -1       -1       1 1.14   4.379475251      2 #> 472          2       -1       -1       1 0.47   1.404379074      2 #> 473          2       -1       -1       1 1.41   5.275658838      2 #> 474          2       -1        1       0 0.92   6.423349067      2 #> 475          2       -1       -1       1 1.35   4.673076784      2 #> 476          2       -1       -1       1 0.75   0.951269730      2 #> 477          2       -1       -1       1 0.91   0.101841697      1 #> 478          2       -1       -1       1 0.64   2.098458509      2 #> 479          2       -1       -1       1 1.28   7.710730184      2 #> 480          2       -1        1       0 0.31   3.124568641      2 #> 481          2       -1       -1       1 0.63   4.435142485      2 #> 482          2       -1       -1       1 0.88   3.840629614      2 #> 483          2       -1        1       0 0.44   5.415842977      2 #> 484          2       -1       -1       1 1.95   1.981165240      2 #> 485          2       -1        1       0 1.49  -2.312847258      1 #> 486          2       -1       -1       1 1.32   6.389330806      2 #> 487          2       -1       -1       1 1.33   7.458650880      2 #> 488          2       -1       -1       1 0.49   0.514072063      1 #> 489          2       -1       -1       1 0.87   6.153081144      2 #> 490          2       -1       -1       1 2.77  16.231240193      2 #> 491          2       -1        1       0 0.81   6.177054204      2 #> 492          2       -1       -1       1 0.33   2.486448955      2 #> 493          2       -1       -1       1 0.61   5.721898597      2 #> 494          2       -1       -1       1 1.41   7.818450664      2 #> 495          2       -1       -1       1 0.39   0.647029688      1 #> 496          2       -1        1       0 2.23   5.489520118      2 #> 497          2       -1       -1       1 2.39   3.520957065      2 #> 498          2       -1       -1       1 0.63   5.772125794      2 #> 499          2       -1       -1       1 1.50   8.368673896      2 #> 500          2       -1       -1       1 1.34   5.321201276      2 #> 501          2       -1       -1       1 1.84   3.761797330      2 #> 502          2       -1       -1       1 0.44   3.341269850      2 #> 503          2       -1        1       0 0.73  -0.607263468      1 #> 504          2       -1       -1       1 2.27   3.084660281      2 #> 505          2       -1        1       0 0.66   2.488888743      2 #> 506          2       -1       -1       1 0.51   6.914343909      2 #> 507          2       -1        1       0 1.15   4.543488098      2 #> 508          2       -1       -1       1 0.60   1.353323991      2 #> 509          2       -1        1       0 3.42  -5.063345989      1 #> 510          2       -1       -1       1 0.45   2.352628921      2 #> 511          2       -1        1       0 0.21   2.828181896      2 #> 512          2       -1       -1       1 0.86   3.481295663      2 #> 513          2       -1       -1       1 0.82   3.323086670      2 #> 514          2       -1        1       0 0.87   5.727307903      2 #> 515          2       -1       -1       1 0.31   0.412168083      1 #> 516          2       -1       -1       1 1.41   7.329912712      2 #> 517          2       -1       -1       1 1.36   4.658038804      2 #> 518          2       -1       -1       1 0.80   3.304653520      2 #> 519          2       -1       -1       1 0.55   4.342080937      2 #> 520          2       -1       -1       1 1.02   4.326155216      2 #> 521          2       -1        1       0 0.36   3.456460716      2 #> 522          2       -1       -1       1 0.79  -1.086762569      1 #> 523          2       -1       -1       1 1.05   0.921284901      2 #> 524          2       -1       -1       1 0.33   5.981772194      2 #> 525          2       -1       -1       1 0.41  -1.845620952      1 #> 526          2       -1       -1       1 0.74   6.255545007      2 #> 527          2       -1       -1       1 0.76   3.800296746      2 #> 528          2       -1       -1       1 1.23   0.298546652      1 #> 529          2       -1       -1       1 1.07  -2.199014477      1 #> 530          2       -1       -1       1 1.47   9.055143496      2 #> 531          2       -1       -1       1 1.19   3.247748237      2 #> 532          2       -1       -1       1 2.35  -0.616275303      1 #> 533          2       -1       -1       1 0.66  -0.430448777      1 #> 534          2       -1       -1       1 0.53   5.561517794      2 #> 535          2       -1       -1       1 0.93   5.301250738      2 #> 536          2       -1       -1       1 0.67   5.265841590      2 #> 537          2       -1       -1       1 0.49   6.698075213      2 #> 538          2       -1       -1       1 2.28   9.131290389      2 #> 539          2       -1       -1       1 7.61  12.812632230      2 #> 540          2       -1       -1       1 0.74   3.564922786      2 #> 541          2       -1       -1       1 1.17   4.488205838      2 #> 542          2       -1        1       0 0.64   6.690851563      2 #> 543          2       -1       -1       1 0.59  11.103294223      2 #> 544          2       -1       -1       1 2.83  12.203877825      2 #> 545          2       -1       -1       1 1.08  -0.264327757      1 #> 546          2       -1       -1       1 1.13   0.562821332      1 #> 547          2       -1        1       0 0.27   4.041796782      2 #> 548          2       -1       -1       1 0.97   2.780807453      2 #> 549          2       -1        1       0 1.85   1.417280673      2 #> 550          2       -1       -1       1 0.34  -1.550164059      1 #> 551          2       -1        1       0 3.63  10.482143500      2 #> 552          2       -1       -1       1 0.79   2.575468116      2 #> 553          2       -1       -1       1 0.51   7.290392250      2 #> 554          2       -1       -1       1 0.89   4.800651365      2 #> 555          2       -1        1       0 0.80   2.584785852      2 #> 556          2       -1       -1       1 0.67   6.022050621      2 #> 557          2       -1       -1       1 0.32   3.012514191      2 #> 558          2       -1       -1       1 0.64   5.511699969      2 #> 559          2       -1       -1       1 0.56   0.296793269      1 #> 560          2       -1       -1       1 0.37   0.033108898      1 #> 561          2       -1       -1       1 1.14   2.936293684      2 #> 562          2       -1       -1       1 3.89   9.099965848      2 #> 563          2       -1       -1       1 1.35   7.189826617      2 #> 564          2       -1       -1       1 0.55   5.900754757      2 #> 565          2       -1        1       0 0.45   1.427282345      2 #> 566          2       -1        1       0 0.94   6.662021262      2 #> 567          2       -1        1       0 1.70   1.963531198      2 #> 568          2       -1       -1       1 0.75  -1.080373566      1 #> 569          2       -1       -1       1 1.95   5.012360596      2 #> 570          2       -1       -1       1 1.81   4.119684884      2 #> 571          2       -1       -1       1 0.95   3.223850652      2 #> 572          2       -1       -1       1 0.55   1.657679163      2 #> 573          2       -1       -1       1 2.79  10.617556995      2 #> 574          2       -1       -1       1 3.25   5.610421128      2 #> 575          2       -1       -1       1 1.54   5.540483154      2 #> 576          2       -1       -1       1 1.39   5.216840361      2 #> 577          2       -1       -1       1 6.33   6.847504085      2 #> 578          2       -1       -1       1 0.80   5.881445284      2 #> 579          2       -1       -1       1 0.75   5.021699794      2 #> 580          2       -1       -1       1 3.36   2.340497494      2 #> 581          2       -1       -1       1 4.14   8.587713645      2 #> 582          2       -1       -1       1 1.66   3.351465013      2 #> 583          2       -1        1       0 2.14   5.317162922      2 #> 584          2       -1        1       0 0.61   0.929308489      2 #> 585          2       -1        1       0 1.94   5.411692418      2 #> 586          2       -1       -1       1 1.25   6.566064831      2 #> 587          2       -1       -1       1 2.44   5.808978773      2 #> 588          2       -1       -1       1 0.70   3.988167009      2 #> 589          2       -1       -1       1 0.72   7.582908914      2 #> 590          2       -1        1       0 0.74   3.581175129      2 #> 591          2       -1       -1       1 1.27   9.096122906      2 #> 592          2       -1        1       0 0.72   4.144599116      2 #> 593          2       -1       -1       1 0.55   5.197553213      2 #> 594          2       -1       -1       1 0.77   3.233414750      2 #> 595          2       -1        1       0 0.84   1.227428148      2 #> 596          2       -1       -1       1 0.66   5.284566017      2 #> 597          2       -1       -1       1 1.73  -0.432169011      1 #> 598          2       -1       -1       1 0.38   6.592018141      2 #> 599          2       -1       -1       1 0.63   8.029618791      2 #> 600          2       -1       -1       1 0.85   6.531077497      2 #> 601          2       -1        1       0 4.16   7.333180157      2 #> 602          2       -1       -1       1 0.90  -0.295594262      1 #> 603          2       -1       -1       1 3.00   2.085675492      2 #> 604          2       -1       -1       1 3.53   9.283646027      2 #> 605          2       -1        1       0 0.24   3.882249520      2 #> 606          2       -1       -1       1 1.20   5.666315469      2 #> 607          2       -1       -1       1 2.78   3.129956752      2 #> 608          2       -1        1       0 0.33   5.954187586      2 #> 609          2       -1       -1       1 1.25  -0.730232875      1 #> 610          2       -1        1       0 3.16   5.317142439      2 #> 611          2       -1        1       0 1.17  -2.074753146      1 #> 612          2       -1       -1       1 0.71   3.895848975      2 #> 613          2       -1       -1       1 0.60   2.116753923      2 #> 614          2       -1       -1       1 2.34   7.492566708      2 #> 615          2       -1       -1       1 0.74   5.887849455      2 #> 616          2       -1       -1       1 1.85   7.941301003      2 #> 617          2       -1        1       0 1.88   0.883304242      2 #> 618          2       -1        1       0 0.61  -3.255810763      1 #> 619          2       -1       -1       1 1.92   6.628223995      2 #> 620          2       -1       -1       1 1.89   4.767394172      2 #> 621          2       -1       -1       1 0.82   5.002588234      2 #> 622          2       -1       -1       1 1.20   1.051816939      2 #> 623          2       -1       -1       1 0.67   2.760391776      2 #> 624          2       -1       -1       1 0.65   4.673521687      2 #> 625          2       -1       -1       1 0.52   1.237076270      2 #> 626          2       -1       -1       1 0.74   2.010037573      2 #> 627          2       -1       -1       1 2.12   5.770287324      2 #> 628          2       -1       -1       1 1.34   2.562899809      2 #> 629          2       -1        1       0 0.61   5.631689978      2 #> 630          2       -1       -1       1 1.83   2.606975481      2 #> 631          2       -1       -1       1 1.02   2.748897239      2 #> 632          2       -1       -1       1 0.42   1.528400240      2 #> 633          2       -1       -1       1 0.44   5.811339639      2 #> 634          2       -1       -1       1 1.25   9.352444709      2 #> 635          2       -1       -1       1 0.83   3.086930931      2 #> 636          2       -1       -1       1 0.31   4.402344650      2 #> 637          2       -1       -1       1 0.91   2.199440472      2 #> 638          2       -1        1       0 0.25   2.940479035      2 #> 639          2       -1       -1       1 0.59   5.540007342      2 #> 640          2       -1       -1       1 0.72  -0.064324189      1 #> 641          2       -1        1       0 2.01   5.902177630      2 #> 642          2       -1        1       0 0.83   3.015254574      2 #> 643          2       -1       -1       1 1.49  11.592797256      2 #> 644          2       -1       -1       1 1.03  -2.340065955      1 #> 645          2       -1       -1       1 2.54  -2.993502974      1 #> 646          2       -1       -1       1 2.63   4.457672377      2 #> 647          2       -1       -1       1 1.01   4.324082799      2 #> 648          2       -1       -1       1 1.70   1.849029044      2 #> 649          2       -1        1       0 0.55  -1.283808982      1 #> 650          2       -1        1       0 1.92   8.984514748      2 #> 651          2       -1       -1       1 0.63   5.664872529      2 #> 652          2       -1        1       0 0.33   5.593605315      2 #> 653          2       -1        1       0 0.93   5.613348975      2 #> 654          2       -1       -1       1 1.29  -3.035233604      1 #> 655          2       -1        1       0 0.84   4.168219603      2 #> 656          2       -1        1       0 0.23   2.136202728      2 #> 657          2       -1        1       0 0.44   3.725740051      2 #> 658          2       -1       -1       1 1.13   1.112598234      2 #> 659          2       -1       -1       1 1.17   5.399322147      2 #> 660          2       -1       -1       1 2.12   6.930797997      2 #> 661          2       -1       -1       1 1.25   5.725483719      2 #> 662          2       -1       -1       1 0.36   2.164120371      2 #> 663          2       -1       -1       1 0.92   1.912850760      2 #> 664          2       -1       -1       1 0.57   5.141633564      2 #> 665          2       -1       -1       1 0.53   5.394662510      2 #> 666          2       -1       -1       1 0.98   7.359892444      2 #> 667          2       -1       -1       1 1.13   0.536513054      1 #> 668          2       -1       -1       1 0.54   5.218474953      2 #> 669          2       -1       -1       1 0.75   2.569400292      2 #> 670          2       -1       -1       1 1.85   8.707303300      2 #> 671          2       -1       -1       1 0.50   1.748722049      2 #> 672          2       -1       -1       1 0.84   7.781895446      2 #> 673          2       -1       -1       1 3.30  -0.419282971      1 #> 674          2       -1       -1       1 0.41   5.297347186      2 #> 675          2       -1       -1       1 1.14  -0.415211857      1 #> 676          2       -1        1       0 0.41   3.869675591      2 #> 677          2       -1        1       0 1.69   5.586202810      2 #> 678          2       -1       -1       1 0.98  -0.248713607      1 #> 679          2       -1       -1       1 0.79   2.143541194      2 #> 680          2       -1       -1       1 1.60   6.249946050      2 #> 681          2       -1       -1       1 1.53   5.987117195      2 #> 682          2       -1        1       0 0.91   3.270912629      2 #> 683          2       -1       -1       1 0.63   1.420092687      2 #> 684          2       -1       -1       1 0.54   6.633091578      2 #> 685          2       -1       -1       1 1.04   0.739381881      1 #> 686          2       -1       -1       1 0.85   3.533853697      2 #> 687          2       -1       -1       1 3.13  11.038168096      2 #> 688          2       -1       -1       1 0.74   4.277262842      2 #> 689          2       -1       -1       1 0.84   5.962046702      2 #> 690          2       -1       -1       1 0.71   6.804757837      2 #> 691          2       -1        1       0 3.26   1.628871653      2 #> 692          2       -1       -1       1 0.84   5.960348976      2 #> 693          2       -1       -1       1 2.02   5.995668647      2 #> 694          2       -1       -1       1 0.75   4.534623704      2 #> 695          2       -1        1       0 0.90   4.131016566      2 #> 696          2       -1       -1       1 0.85   3.473934568      2 #> 697          2       -1       -1       1 1.42   7.081900941      2 #> 698          2       -1       -1       1 1.97  -1.340418001      1 #> 699          2       -1       -1       1 1.38  -0.442246078      1 #> 700          2       -1       -1       1 0.81   1.403696645      2 #> 701          2       -1       -1       1 1.49   7.084344905      2 #> 702          2       -1        1       0 1.61   4.456741415      2 #> 703          2       -1       -1       1 2.10  -1.360095869      1 #> 704          2       -1       -1       1 1.03   5.506391108      2 #> 705          2       -1       -1       1 1.34   8.121746226      2 #> 706          2       -1       -1       1 0.63   5.782229437      2 #> 707          2       -1        1       0 0.80   2.613877068      2 #> 708          2       -1       -1       1 1.88   0.531040628      1 #> 709          2       -1       -1       1 2.33   7.298995093      2 #> 710          2       -1        1       0 0.35   4.207589405      2 #> 711          2       -1       -1       1 6.54  15.914682826      2 #> 712          2       -1       -1       1 0.42   4.847422686      2 #> 713          2       -1       -1       1 2.27  10.286561122      2 #> 714          2       -1       -1       1 0.36   3.099963380      2 #> 715          2       -1       -1       1 1.93   1.178577490      2 #> 716          2       -1       -1       1 0.38   7.467380449      2 #> 717          2       -1       -1       1 1.27   3.258818570      2 #> 718          2       -1       -1       1 0.42   3.299507882      2 #> 719          2       -1       -1       1 0.71   4.510207909      2 #> 720          2       -1       -1       1 0.92   6.952900879      2 #> 721          2       -1       -1       1 1.10  -2.546584747      1 #> 722          2       -1       -1       1 3.23   7.433952246      2 #> 723          2       -1       -1       1 0.50   2.667275149      2 #> 724          2       -1       -1       1 0.77   7.798246570      2 #> 725          2       -1       -1       1 0.88  -0.067503966      1 #> 726          2       -1        1       0 0.84   2.557054856      2 #> 727          2       -1       -1       1 0.78   6.115324882      2 #> 728          2       -1       -1       1 0.76   7.445680401      2 #> 729          2       -1        1       0 1.22   3.143111982      2 #> 730          2       -1       -1       1 0.99   5.207449189      2 #> 731          2       -1       -1       1 0.91   9.863832648      2 #> 732          2       -1       -1       1 1.24   3.368102807      2 #> 733          2       -1       -1       1 1.42   7.722170085      2 #> 734          2       -1       -1       1 1.35   7.744522298      2 #> 735          2       -1       -1       1 0.62   7.205465875      2 #> 736          2       -1       -1       1 0.38   5.612411614      2 #> 737          2       -1       -1       1 0.73   6.553994355      2 #> 738          2       -1        1       0 0.42   3.237515549      2 #> 739          2       -1       -1       1 2.32   9.095261558      2 #> 740          2       -1       -1       1 0.99   4.271939954      2 #> 741          2       -1       -1       1 2.01   4.057174322      2 #> 742          2       -1       -1       1 3.47  -2.667302433      1 #> 743          2       -1       -1       1 0.51   5.319773588      2 #> 744          2       -1       -1       1 0.44  -0.589289252      1 #> 745          2       -1       -1       1 0.94   4.048895488      2 #> 746          2       -1       -1       1 1.55   2.502709319      2 #> 747          2       -1       -1       1 0.38   8.626181629      2 #> 748          2       -1       -1       1 1.38   8.056611218      2 #> 749          2       -1        1       0 0.84   2.563518311      2 #> 750          2       -1       -1       1 1.01   7.221726698      2 #> 751          2       -1       -1       1 1.12   3.024663933      2 #> 752          2       -1       -1       1 0.32   4.470504582      2 #> 753          2       -1       -1       1 0.40   6.412403541      2 #> 754          2       -1        1       0 0.36   8.697147429      2 #> 755          2       -1        1       0 2.32   6.040149562      2 #> 756          2       -1       -1       1 0.46   2.813239810      2 #> 757          2       -1       -1       1 1.25   3.791336276      2 #> 758          2       -1        1       0 0.44   7.691807639      2 #> 759          2       -1       -1       1 0.42   5.357203433      2 #> 760          2       -1       -1       1 2.36   9.172303259      2 #> 761          2       -1       -1       1 0.81   1.231317298      2 #> 762          2       -1       -1       1 1.97   2.866711592      2 #> 763          2       -1        1       0 0.81   3.226038089      2 #> 764          2       -1       -1       1 0.76   5.998580522      2 #> 765          2       -1       -1       1 2.13   4.094359686      2 #> 766          2       -1       -1       1 1.08   3.575911129      2 #> 767          2       -1       -1       1 0.91   3.660456055      2 #> 768          2       -1       -1       1 1.48   2.775088910      2 #> 769          2       -1        1       0 0.46   5.797512711      2 #> 770          2       -1       -1       1 0.65   3.393292319      2 #> 771          2       -1       -1       1 1.52   5.404901479      2 #> 772          2       -1        1       0 1.24   0.681560652      1 #> 773          2       -1       -1       1 0.43   1.245476815      2 #> 774          2       -1       -1       1 1.57  14.759040274      2 #> 775          2       -1       -1       1 0.71   4.763902512      2 #> 776          2       -1       -1       1 0.72  -1.943169070      1 #> 777          2       -1       -1       1 7.49  11.206779941      2 #> 778          2       -1       -1       1 3.01  11.124090448      2 #> 779          2       -1       -1       1 1.07   1.944524493      2 #> 780          2       -1       -1       1 0.75   0.592791565      1 #> 781          2       -1        1       0 0.54   6.994764443      2 #> 782          2       -1       -1       1 0.52   9.253956866      2 #> 783          2       -1       -1       1 0.43   5.491069564      2 #> 784          2       -1       -1       1 1.10   8.538055411      2 #> 785          2       -1        1       0 0.92   6.088940957      2 #> 786          2       -1        1       0 0.96   3.281052828      2 #> 787          2       -1       -1       1 0.92   4.092232817      2 #> 788          2       -1        1       0 0.81   8.619588054      2 #> 789          2       -1        1       0 1.18   1.041202203      2 #> 790          2       -1       -1       1 2.30   2.595041356      2 #> 791          2       -1       -1       1 0.95   1.891292215      2 #> 792          2       -1       -1       1 1.22   0.163438671      1 #> 793          2       -1        1       0 1.24   4.221313516      2 #> 794          2       -1       -1       1 1.04   2.831714661      2 #> 795          2       -1       -1       1 0.32   6.313754379      2 #> 796          2       -1       -1       1 0.47   8.656561426      2 #> 797          2       -1       -1       1 0.91   2.805110707      2 #> 798          2       -1        1       0 4.02   2.729168254      2 #> 799          2       -1        1       0 0.62   8.087946085      2 #> 800          2       -1        1       0 0.88   0.633974555      1 #> 801          1        1        1       1 0.44  -2.376762035      1 #> 802          1        1        1       1 0.77   1.128756465      2 #> 803          1        1       -1       0 0.49   5.943625323      2 #> 804          1        1        1       1 0.79   0.578672045      1 #> 805          1        1        1       1 1.46   1.985814579      2 #> 806          1        1        1       1 2.75  -1.488764239      1 #> 807          1        1       -1       0 1.00   3.605867509      2 #> 808          1        1       -1       0 1.22   3.040776779      2 #> 809          1        1        1       1 0.26   1.121415797      2 #> 810          1        1        1       1 0.43   0.677918663      1 #> 811          1        1       -1       0 3.57   1.725707145      2 #> 812          1        1        1       1 0.58   2.447773721      2 #> 813          1        1        1       1 0.37  -2.189143633      1 #> 814          1        1        1       1 0.43  -6.711705621      1 #> 815          1        1       -1       0 5.45  -0.310679847      1 #> 816          1        1        1       1 1.21  -1.317053871      1 #> 817          1        1        1       1 2.65  -8.337135017      1 #> 818          1        1       -1       0 1.04  -4.749653437      1 #> 819          1        1       -1       0 1.00   5.785936614      2 #> 820          1        1       -1       0 0.77  -0.943151914      1 #> 821          1        1       -1       0 2.48  -0.559419731      1 #> 822          1        1        1       1 1.04  -3.731727737      1 #> 823          1        1       -1       0 0.76   5.048154817      2 #> 824          1        1       -1       0 0.44   1.811100906      2 #> 825          1        1       -1       0 3.98   0.172472453      1 #> 826          1        1       -1       0 2.17   4.522889791      2 #> 827          1        1        1       1 1.90  -0.165937656      1 #> 828          1        1       -1       0 0.92   5.246547181      2 #> 829          1        1       -1       0 1.09  -0.262957493      1 #> 830          1        1       -1       0 0.57  -0.673511785      1 #> 831          1        1       -1       0 1.14   1.502067232      2 #> 832          1        1       -1       0 0.50   0.850881036      2 #> 833          1        1       -1       0 3.15   0.026073100      1 #> 834          1        1       -1       0 2.13   2.482171133      2 #> 835          1        1        1       1 2.00  -2.560790524      1 #> 836          1        1       -1       0 3.24  -2.219289309      1 #> 837          1        1        1       1 0.31   1.584445559      2 #> 838          1        1       -1       0 0.72   1.089244171      2 #> 839          1        1       -1       0 1.67   3.301354499      2 #> 840          1        1       -1       0 1.38  -1.694516153      1 #> 841          1        1        1       1 0.47   0.109060837      1 #> 842          1        1        1       1 0.47   3.446925276      2 #> 843          1        1       -1       0 1.28   4.258786276      2 #> 844          1        1       -1       0 0.71   2.534523060      2 #> 845          1        1        1       1 1.01   1.552360445      2 #> 846          1        1        1       1 0.30   1.103609258      2 #> 847          1        1       -1       0 0.47   3.269315789      2 #> 848          1        1        1       1 0.56  -0.114707940      1 #> 849          1        1        1       1 1.90   7.660843614      2 #> 850          1        1        1       1 0.34  -3.660671943      1 #> 851          1        1        1       1 0.27   2.311668171      2 #> 852          1        1       -1       0 0.93   4.844905898      2 #> 853          1        1       -1       0 1.69   5.224387018      2 #> 854          1        1        1       1 2.21   2.329285572      2 #> 855          1        1       -1       0 0.81   4.184999962      2 #> 856          1        1        1       1 0.75   2.016663437      2 #> 857          1        1       -1       0 3.87  -3.714900294      1 #> 858          1        1        1       1 0.58  -1.849118128      1 #> 859          1        1       -1       0 0.52   2.291147878      2 #> 860          1        1       -1       0 1.69  -3.263267162      1 #> 861          1        1        1       1 0.97   0.416684168      1 #> 862          1        1        1       1 2.09   0.543964452      1 #> 863          1        1        1       1 0.42  -2.885293515      1 #> 864          1        1       -1       0 1.34  -4.843903654      1 #> 865          1        1        1       1 0.37   1.638974544      2 #> 866          1        1        1       1 0.34   0.782133126      1 #> 867          1        1       -1       0 0.88   4.423575703      2 #> 868          1        1        1       1 3.03  12.059331435      2 #> 869          1        1       -1       0 1.37   2.911504844      2 #> 870          1        1       -1       0 4.85  -0.539130581      1 #> 871          1        1        1       1 0.43   3.810686635      2 #> 872          1        1        1       1 1.09   3.772008694      2 #> 873          1        1        1       1 0.79   1.357749598      2 #> 874          1        1       -1       0 1.17   5.393409383      2 #> 875          1        1        1       1 1.72  -0.245088452      1 #> 876          1        1       -1       0 1.19   1.718855079      2 #> 877          1        1        1       1 0.47  -1.199217887      1 #> 878          1        1        1       1 0.38  -4.160327600      1 #> 879          1        1        1       1 3.29   2.928124057      2 #> 880          1        1        1       1 0.60   5.236308757      2 #> 881          1        1        1       1 0.41  -1.255415957      1 #> 882          1        1       -1       0 0.88   4.045442370      2 #> 883          1        1       -1       0 1.92   1.897347010      2 #> 884          1        1        1       1 1.71  -1.896154992      1 #> 885          1        1        1       1 0.53   4.645028635      2 #> 886          1        1        1       1 0.36   1.851934760      2 #> 887          1        1       -1       0 1.80  -0.017395006      1 #> 888          1        1        1       1 0.55   1.215801813      2 #> 889          1        1       -1       0 0.47  -0.902711481      1 #> 890          1        1        1       1 0.72  -2.069300271      1 #> 891          1        1        1       1 0.86   2.721149866      2 #> 892          1        1        1       1 2.85  -0.968944279      1 #> 893          1        1       -1       0 1.83   0.779062817      1 #> 894          1        1        1       1 1.50  -6.304490474      1 #> 895          1        1        1       1 1.42  -4.109701086      1 #> 896          1        1        1       1 2.29   6.191482090      2 #> 897          1        1       -1       0 1.83  -1.596747291      1 #> 898          1        1       -1       0 0.37  -1.504910997      1 #> 899          1        1        1       1 1.69   5.264406085      2 #> 900          1        1       -1       0 0.82  -2.053218703      1 #> 901          1        1        1       1 0.41  -0.406621672      1 #> 902          1        1       -1       0 1.24  -3.030415552      1 #> 903          1        1        1       1 0.83  -0.561782686      1 #> 904          1        1       -1       0 1.49   0.573682018      1 #> 905          1        1       -1       0 1.73  -1.109266393      1 #> 906          1        1       -1       0 0.40   4.412578382      2 #> 907          1        1       -1       0 1.36   8.699996865      2 #> 908          1        1        1       1 1.69   2.934332260      2 #> 909          1        1       -1       0 2.42   9.022768270      2 #> 910          1        1       -1       0 3.48   0.703043001      1 #> 911          1        1        1       1 1.55   2.252287974      2 #> 912          1        1        1       1 5.18  11.150666965      2 #> 913          1        1       -1       0 1.89  -5.350847199      1 #> 914          1        1       -1       0 0.86   2.876147325      2 #> 915          1        1       -1       0 1.08   2.799869604      2 #> 916          1        1       -1       0 1.10   2.865299404      2 #> 917          1        1       -1       0 0.73  -1.385205742      1 #> 918          1        1        1       1 0.72   2.850948902      2 #> 919          1        1       -1       0 0.39   2.107727675      2 #> 920          1        1        1       1 1.93   8.153272569      2 #> 921          1        1        1       1 2.88  -0.609955720      1 #> 922          1        1       -1       0 1.78   4.219843864      2 #> 923          1        1        1       1 1.60   4.392343032      2 #> 924          1        1        1       1 0.84   1.095204529      2 #> 925          1        1       -1       0 0.68  -0.644565194      1 #> 926          1        1        1       1 0.41   2.103821967      2 #> 927          1        1       -1       0 0.97   0.463481988      1 #> 928          1        1        1       1 0.94   0.547579210      1 #> 929          1        1       -1       0 1.84   0.105867912      1 #> 930          1        1        1       1 1.81  -2.598459036      1 #> 931          1        1        1       1 4.93  -0.170549345      1 #> 932          1        1        1       1 1.39   0.110529176      1 #> 933          1        1        1       1 0.43   2.717404956      2 #> 934          1        1       -1       0 1.82  -3.830378759      1 #> 935          1        1        1       1 4.73  15.382312113      2 #> 936          1        1       -1       0 0.75   3.683304768      2 #> 937          1        1       -1       0 0.79  -1.992183385      1 #> 938          1        1        1       1 1.79  -1.923671169      1 #> 939          1        1       -1       0 0.92  -2.770410238      1 #> 940          1        1        1       1 1.50   4.866788838      2 #> 941          1        1        1       1 0.32   3.853214782      2 #> 942          1        1       -1       0 0.91  -2.421119758      1 #> 943          1        1       -1       0 0.63   2.876133024      2 #> 944          1        1       -1       0 0.67   0.412450359      1 #> 945          1        1        1       1 0.18  -0.487914690      1 #> 946          1        1        1       1 0.32   6.546649040      2 #> 947          1        1        1       1 4.10   5.976444935      2 #> 948          1        1        1       1 0.86  -0.719822534      1 #> 949          1        1       -1       0 1.15  -2.404735228      1 #> 950          1        1        1       1 1.60   0.339812173      1 #> 951          1        1       -1       0 3.83   7.530684126      2 #> 952          1        1        1       1 0.44   0.135442351      1 #> 953          1        1       -1       0 0.79  -0.913650180      1 #> 954          1        1        1       1 4.75   3.523547530      2 #> 955          1        1        1       1 2.25   1.064632210      2 #> 956          1        1        1       1 2.31   1.692803275      2 #> 957          1        1        1       1 1.04  -0.857520274      1 #> 958          1        1        1       1 1.27   2.293641341      2 #> 959          1        1        1       1 0.89  -1.508569761      1 #> 960          1        1        1       1 1.11  -2.023837209      1 #> 961          1        1        1       1 0.92   2.267934872      2 #> 962          1        1        1       1 1.39  -4.872336994      1 #> 963          1        1        1       1 1.26  -2.143882226      1 #> 964          1        1       -1       0 0.40   0.669787154      1 #> 965          1        1        1       1 2.21   2.267296046      2 #> 966          1        1        1       1 1.68   0.772274218      1 #> 967          1        1       -1       0 0.96  -2.277297820      1 #> 968          1        1        1       1 1.30  -2.186867149      1 #> 969          1        1        1       1 0.83   1.406295326      2 #> 970          1        1        1       1 0.47  -6.537175835      1 #> 971          1        1        1       1 0.67  -0.709519698      1 #> 972          1        1        1       1 0.64  -1.205035626      1 #> 973          1        1        1       1 2.96   0.297929662      1 #> 974          1        1        1       1 0.89  -3.241294706      1 #> 975          1        1       -1       0 1.82   3.498840919      2 #> 976          1        1        1       1 0.58   1.102109238      2 #> 977          1        1        1       1 0.85   1.878497411      2 #> 978          1        1       -1       0 2.42  -3.841116095      1 #> 979          1        1        1       1 1.18  -0.551746408      1 #> 980          1        1        1       1 5.27 -11.189027262      1 #> 981          1        1        1       1 0.27  -0.053155702      1 #> 982          1        1        1       1 2.08  -1.344881394      1 #> 983          1        1       -1       0 1.47   4.576952260      2 #> 984          1        1        1       1 3.74   3.175618404      2 #> 985          1        1       -1       0 1.52  -3.880302848      1 #> 986          1        1        1       1 0.64   3.793406255      2 #> 987          1        1       -1       0 2.24  -3.071864164      1 #> 988          1        1        1       1 0.49   1.673885083      2 #> 989          1        1        1       1 0.68   0.891612368      2 #> 990          1        1        1       1 0.57   0.924314904      2 #> 991          1        1       -1       0 2.81   5.932667621      2 #> 992          1        1        1       1 2.54   0.312105671      1 #> 993          1        1       -1       0 1.02   0.096782230      1 #> 994          1        1        1       1 3.21  -0.815461855      1 #> 995          1        1        1       1 0.61  -1.958290081      1 #> 996          1        1        1       1 2.21   3.574561216      2 #> 997          1        1       -1       0 1.51   1.894547669      2 #> 998          1        1        1       1 1.11   1.073763890      2 #> 999          1        1       -1       0 0.80   0.045812647      1 #> 1000         1        1        1       1 1.92   2.343328036      2 #> 1001         1        1        1       1 0.24  -1.843863837      1 #> 1002         1        1        1       1 1.76   4.892760331      2 #> 1003         1        1        1       1 0.53  -0.477541932      1 #> 1004         1        1       -1       0 2.25   3.633965194      2 #> 1005         1        1       -1       0 1.00   4.504057354      2 #> 1006         1        1        1       1 1.21   0.210535862      1 #> 1007         1        1        1       1 1.80  -5.294469158      1 #> 1008         1        1       -1       0 0.32   0.581427192      1 #> 1009         1        1       -1       0 3.23   6.341193558      2 #> 1010         1        1       -1       0 2.79   5.308550894      2 #> 1011         1        1       -1       0 1.10  -0.880761737      1 #> 1012         1        1       -1       0 0.53   0.511116250      1 #> 1013         1        1        1       1 1.28   9.742659054      2 #> 1014         1        1        1       1 1.47  -2.538629128      1 #> 1015         1        1        1       1 0.51  -4.008892301      1 #> 1016         1        1       -1       0 0.89   1.683500903      2 #> 1017         1        1       -1       0 2.95  -8.653678109      1 #> 1018         1        1       -1       0 0.34   3.938463937      2 #> 1019         1        1        1       1 2.78  -0.463322778      1 #> 1020         1        1       -1       0 1.15  -2.734970130      1 #> 1021         1        1        1       1 1.28   3.939523604      2 #> 1022         1        1        1       1 0.74   0.375989557      1 #> 1023         1        1       -1       0 0.49   5.194410424      2 #> 1024         1        1       -1       0 0.45   0.144368187      1 #> 1025         1        1        1       1 0.73   2.528849825      2 #> 1026         1        1        1       1 1.34   8.009120214      2 #> 1027         1        1        1       1 0.84   0.919576722      2 #> 1028         1        1        1       1 1.00  -5.928462561      1 #> 1029         1        1        1       1 2.12   2.735029569      2 #> 1030         1        1       -1       0 2.86   0.698486746      1 #> 1031         1        1       -1       0 2.22  -0.497907937      1 #> 1032         1        1        1       1 0.89  -1.560881304      1 #> 1033         1        1       -1       0 0.45  -1.418753080      1 #> 1034         1        1       -1       0 0.60   5.020287303      2 #> 1035         1        1       -1       0 0.64   0.680157375      1 #> 1036         1        1       -1       0 1.92  -3.966778428      1 #> 1037         1        1        1       1 1.61   2.915805853      2 #> 1038         1        1        1       1 1.56   6.259080382      2 #> 1039         1        1       -1       0 0.73  -0.533379048      1 #> 1040         1        1        1       1 0.59   2.368961446      2 #> 1041         1        1        1       1 0.85   1.459429245      2 #> 1042         1        1       -1       0 1.84   1.188111886      2 #> 1043         1        1        1       1 0.41   0.827637646      2 #> 1044         1        1       -1       0 1.36  -1.495940387      1 #> 1045         1        1        1       1 2.69   2.840861138      2 #> 1046         1        1        1       1 2.60   5.541800634      2 #> 1047         1        1        1       1 0.76  -2.289103359      1 #> 1048         1        1       -1       0 0.72  -4.280272300      1 #> 1049         1        1        1       1 0.99   1.069406669      2 #> 1050         1        1        1       1 1.94  -2.522936888      1 #> 1051         1        1       -1       0 1.17   3.588261764      2 #> 1052         1        1        1       1 1.27   4.286859723      2 #> 1053         1        1        1       1 4.19   4.738602527      2 #> 1054         1        1       -1       0 1.62   0.865431294      2 #> 1055         1        1       -1       0 0.36   3.178713829      2 #> 1056         1        1       -1       0 0.82  -1.564207598      1 #> 1057         1        1       -1       0 1.52  -2.353158076      1 #> 1058         1        1       -1       0 0.53  -0.609645663      1 #> 1059         1        1        1       1 1.85   5.688334917      2 #> 1060         1        1       -1       0 0.66   2.827783637      2 #> 1061         1        1        1       1 3.92   4.446598505      2 #> 1062         1        1       -1       0 0.53  -2.351065614      1 #> 1063         1        1       -1       0 0.74  -5.649923291      1 #> 1064         1        1       -1       0 0.66  -0.528868361      1 #> 1065         1        1        1       1 0.93   0.545783534      1 #> 1066         1        1        1       1 0.42   0.952687611      2 #> 1067         1        1        1       1 0.48  -2.786311705      1 #> 1068         1        1        1       1 1.29  -4.705052509      1 #> 1069         1        1       -1       0 1.22   0.220641958      1 #> 1070         1        1       -1       0 5.06  -3.092203668      1 #> 1071         1        1       -1       0 1.16  -0.518992819      1 #> 1072         1        1       -1       0 0.48   5.959856511      2 #> 1073         1        1        1       1 0.63   1.098295211      2 #> 1074         1        1        1       1 1.22   0.306643967      1 #> 1075         1        1        1       1 0.54   3.483970198      2 #> 1076         1        1        1       1 0.94  -0.252412456      1 #> 1077         1        1        1       1 0.82  -1.167405440      1 #> 1078         1        1        1       1 0.55   1.346505836      2 #> 1079         1        1       -1       0 1.60   7.393458719      2 #> 1080         1        1        1       1 1.65  -1.427346273      1 #> 1081         1        1       -1       0 0.61   0.427416893      1 #> 1082         1        1        1       1 4.98   0.987636296      2 #> 1083         1        1        1       1 2.63  -2.577271354      1 #> 1084         1        1        1       1 0.63  -0.701276550      1 #> 1085         1        1        1       1 6.89   4.965029445      2 #> 1086         1        1        1       1 1.79   1.232795763      2 #> 1087         1        1        1       1 0.77   4.471427445      2 #> 1088         1        1       -1       0 3.96   2.362014411      2 #> 1089         1        1       -1       0 0.39  -1.770952091      1 #> 1090         1        1        1       1 0.49   1.170016160      2 #> 1091         1        1       -1       0 1.22   4.470274195      2 #> 1092         1        1        1       1 1.25  -0.408143057      1 #> 1093         1        1        1       1 0.47   1.509721847      2 #> 1094         1        1       -1       0 2.31   1.717431526      2 #> 1095         1        1       -1       0 1.19   1.612787825      2 #> 1096         1        1       -1       0 0.77   2.971636860      2 #> 1097         1        1        1       1 0.88   4.877308198      2 #> 1098         1        1        1       1 0.93   2.405082450      2 #> 1099         1        1       -1       0 0.92   4.830605128      2 #> 1100         1        1        1       1 1.98   0.412383877      1 #> 1101         1        1        1       1 1.80   5.666117974      2 #> 1102         1        1       -1       0 0.53  -2.412109463      1 #> 1103         1        1        1       1 0.72  -3.658434392      1 #> 1104         1        1       -1       0 0.69   3.686064344      2 #> 1105         1        1       -1       0 1.02  -0.179687856      1 #> 1106         1        1        1       1 0.63   2.204006007      2 #> 1107         1        1       -1       0 1.89   3.197247657      2 #> 1108         1        1       -1       0 0.73   2.836702389      2 #> 1109         1        1        1       1 1.33  -4.410701979      1 #> 1110         1        1        1       1 0.80   6.977853675      2 #> 1111         1        1       -1       0 4.51   4.301665279      2 #> 1112         1        1        1       1 3.54   0.652318219      1 #> 1113         1        1        1       1 3.42   2.531664570      2 #> 1114         1        1        1       1 0.31   1.097860188      2 #> 1115         1        1       -1       0 1.35   5.749394983      2 #> 1116         1        1       -1       0 1.55   1.122640549      2 #> 1117         1        1       -1       0 2.16   0.764223208      1 #> 1118         1        1        1       1 0.29  -0.507726078      1 #> 1119         1        1       -1       0 3.52   7.414320702      2 #> 1120         1        1        1       1 1.14   5.489704696      2 #> 1121         1        1        1       1 0.51  -1.909723427      1 #> 1122         1        1       -1       0 2.71  -0.377910208      1 #> 1123         1        1       -1       0 0.85   1.678519852      2 #> 1124         1        1        1       1 0.62  -1.696508804      1 #> 1125         1        1        1       1 1.07   0.354578041      1 #> 1126         1        1        1       1 1.40  -2.898122536      1 #> 1127         1        1        1       1 0.67  -2.032407232      1 #> 1128         1        1        1       1 0.52   1.755867682      2 #> 1129         1        1        1       1 1.08  -0.146800483      1 #> 1130         1        1       -1       0 1.03   0.837482795      2 #> 1131         1        1        1       1 1.15   3.814480234      2 #> 1132         1        1        1       1 1.70   1.705959996      2 #> 1133         1        1        1       1 0.86   7.084342573      2 #> 1134         1        1        1       1 0.65  -2.600669771      1 #> 1135         1        1        1       1 1.27   1.885472964      2 #> 1136         1        1        1       1 0.42   2.747075935      2 #> 1137         1        1        1       1 2.80  -0.905326714      1 #> 1138         1        1        1       1 2.06  -2.105830420      1 #> 1139         1        1        1       1 7.36   1.145179777      2 #> 1140         1        1        1       1 0.30   2.395924004      2 #> 1141         1        1       -1       0 0.58   4.298394993      2 #> 1142         1        1       -1       0 3.22  -3.918038911      1 #> 1143         1        1       -1       0 0.55  -0.808171272      1 #> 1144         1        1        1       1 2.98   5.193186575      2 #> 1145         1        1        1       1 0.82   6.402958708      2 #> 1146         1        1        1       1 0.33   0.671138739      1 #> 1147         1        1        1       1 1.67  -2.833494247      1 #> 1148         1        1       -1       0 1.07  -1.345680650      1 #> 1149         1        1        1       1 0.66  -1.022109465      1 #> 1150         1        1        1       1 3.17   7.681655922      2 #> 1151         1        1        1       1 0.32   2.574963711      2 #> 1152         1        1        1       1 1.09   2.856337312      2 #> 1153         1        1       -1       0 1.05   3.597656735      2 #> 1154         1        1       -1       0 1.39  -1.382293004      1 #> 1155         1        1        1       1 0.76  -3.659726506      1 #> 1156         1        1       -1       0 2.93   2.693383918      2 #> 1157         1        1        1       1 2.87   4.547051458      2 #> 1158         1        1        1       1 0.23   0.457733080      1 #> 1159         1        1        1       1 2.23  -0.362409965      1 #> 1160         1        1        1       1 1.18   2.494344805      2 #> 1161         1        1        1       1 0.84  -0.067101624      1 #> 1162         1        1       -1       0 0.34   2.701074865      2 #> 1163         1        1        1       1 0.87  -1.306638587      1 #> 1164         1        1        1       1 0.85   1.373103260      2 #> 1165         1        1        1       1 1.20   0.366366607      1 #> 1166         1        1        1       1 0.29   5.573627052      2 #> 1167         1        1        1       1 0.94  -3.594288633      1 #> 1168         1        1       -1       0 1.05  -1.892163068      1 #> 1169         1        1        1       1 0.36   4.423012147      2 #> 1170         1        1        1       1 1.25   0.013648530      1 #> 1171         1        1        1       1 1.26  -1.532347928      1 #> 1172         1        1        1       1 0.87  -0.364292115      1 #> 1173         1        1       -1       0 1.90   3.131898065      2 #> 1174         1        1       -1       0 1.52   1.495335908      2 #> 1175         1        1       -1       0 1.28  -0.424624631      1 #> 1176         1        1        1       1 0.30   0.319209868      1 #> 1177         1        1        1       1 0.58  -2.199111094      1 #> 1178         1        1       -1       0 0.37   0.934372884      2 #> 1179         1        1        1       1 1.12   3.192648520      2 #> 1180         1        1        1       1 1.15  -2.704243853      1 #> 1181         1        1        1       1 0.47  -1.574732457      1 #> 1182         1        1       -1       0 2.64   0.240083571      1 #> 1183         1        1        1       1 1.56  -5.771744214      1 #> 1184         1        1        1       1 1.76  -2.200870378      1 #> 1185         1        1       -1       0 1.44   0.879096572      2 #> 1186         1        1        1       1 0.77  -3.014233675      1 #> 1187         1        1        1       1 0.47   2.110775992      2 #> 1188         1        1        1       1 0.55   2.838918822      2 #> 1189         1        1        1       1 0.51   1.013160634      2 #> 1190         1        1       -1       0 5.11  -2.989819855      1 #> 1191         1        1       -1       0 1.79   6.912177241      2 #> 1192         1        1        1       1 8.88  -0.691754199      1 #> 1193         1        1       -1       0 1.15  -1.100027883      1 #> 1194         1        1       -1       0 1.28  -3.514708909      1 #> 1195         1        1        1       1 1.45   1.849649264      2 #> 1196         1        1       -1       0 0.38   0.168110253      1 #> 1197         1        1        1       1 1.34  -1.559004411      1 #> 1198         1        1        1       1 0.59   0.585141835      1 #> 1199         1        1       -1       0 1.03   4.902123490      2 #> 1200         1        1        1       1 1.96  -1.475485596      1 #> 1201         2        1        1       1 0.41   8.264157252      2 #> 1202         2        1        1       1 2.61   2.772461160      2 #> 1203         2        1        1       1 1.03  -4.906494596      1 #> 1204         2        1       -1       0 0.37   3.373837631      2 #> 1205         2        1        1       1 0.64   0.628130870      1 #> 1206         2        1        1       1 1.64   0.359673254      1 #> 1207         2        1        1       1 0.81   9.074022508      2 #> 1208         2        1       -1       0 3.66  10.222308121      2 #> 1209         2        1        1       1 1.57   8.889432033      2 #> 1210         2        1        1       1 1.09   1.764077227      2 #> 1211         2        1        1       1 0.80   5.944976017      2 #> 1212         2        1       -1       0 4.54  13.756829875      2 #> 1213         2        1        1       1 2.56   9.347139111      2 #> 1214         2        1        1       1 0.34   1.979491473      2 #> 1215         2        1        1       1 0.96   7.445734601      2 #> 1216         2        1        1       1 0.90   2.400676738      2 #> 1217         2        1        1       1 0.60   4.897325193      2 #> 1218         2        1        1       1 0.20   2.379424278      2 #> 1219         2        1        1       1 1.89   4.944022759      2 #> 1220         2        1        1       1 0.88   0.315841912      1 #> 1221         2        1        1       1 0.63   7.544169183      2 #> 1222         2        1        1       1 0.57   4.166433434      2 #> 1223         2        1        1       1 0.82   6.399222833      2 #> 1224         2        1       -1       0 1.44   1.631295819      2 #> 1225         2        1        1       1 1.06   9.233045104      2 #> 1226         2        1        1       1 0.57   3.747473760      2 #> 1227         2        1        1       1 0.44   1.343362825      2 #> 1228         2        1        1       1 1.45   1.113817904      2 #> 1229         2        1        1       1 0.42   7.067253014      2 #> 1230         2        1        1       1 0.50   5.651528476      2 #> 1231         2        1       -1       0 1.27   3.294493289      2 #> 1232         2        1        1       1 2.87   1.278860312      2 #> 1233         2        1       -1       0 1.46   3.485694928      2 #> 1234         2        1       -1       0 0.98  -0.644817940      1 #> 1235         2        1        1       1 0.41   6.460362803      2 #> 1236         2        1        1       1 0.82   1.770240203      2 #> 1237         2        1        1       1 0.62   6.196686961      2 #> 1238         2        1       -1       0 1.21   8.634864475      2 #> 1239         2        1       -1       0 0.38   0.933190751      2 #> 1240         2        1        1       1 1.61   7.114248615      2 #> 1241         2        1       -1       0 0.99   2.142024439      2 #> 1242         2        1        1       1 1.23   2.661710624      2 #> 1243         2        1       -1       0 0.50   2.940061102      2 #> 1244         2        1        1       1 0.44   3.129730996      2 #> 1245         2        1        1       1 2.68   4.150178851      2 #> 1246         2        1        1       1 0.65   8.023555391      2 #> 1247         2        1        1       1 0.81   7.433485957      2 #> 1248         2        1        1       1 0.54  11.140200987      2 #> 1249         2        1        1       1 0.43   3.596778838      2 #> 1250         2        1        1       1 0.48   3.269678427      2 #> 1251         2        1        1       1 1.43   2.898939368      2 #> 1252         2        1        1       1 0.20   9.727472973      2 #> 1253         2        1       -1       0 2.75   9.516354905      2 #> 1254         2        1        1       1 1.24   4.522267396      2 #> 1255         2        1        1       1 2.26   3.511745461      2 #> 1256         2        1        1       1 0.18   1.995022482      2 #> 1257         2        1        1       1 1.61   9.883775038      2 #> 1258         2        1       -1       0 0.86   2.098326532      2 #> 1259         2        1        1       1 5.39   8.092764416      2 #> 1260         2        1        1       1 1.59   7.565267457      2 #> 1261         2        1        1       1 2.27  10.334335219      2 #> 1262         2        1       -1       0 2.61   3.267318503      2 #> 1263         2        1        1       1 0.61   8.417990898      2 #> 1264         2        1        1       1 2.06  12.091323887      2 #> 1265         2        1        1       1 0.22   1.285226346      2 #> 1266         2        1        1       1 1.54   8.595742365      2 #> 1267         2        1        1       1 0.78   4.558948827      2 #> 1268         2        1        1       1 0.49   1.301028538      2 #> 1269         2        1        1       1 0.56   7.351877691      2 #> 1270         2        1        1       1 2.56   8.545913767      2 #> 1271         2        1        1       1 1.80   1.960302495      2 #> 1272         2        1        1       1 1.94   0.637901433      1 #> 1273         2        1        1       1 1.13  -0.084404249      1 #> 1274         2        1        1       1 0.27   5.827115629      2 #> 1275         2        1        1       1 0.36   3.843213949      2 #> 1276         2        1        1       1 3.68   1.525351703      2 #> 1277         2        1        1       1 3.79  14.028686653      2 #> 1278         2        1       -1       0 1.39   6.718608817      2 #> 1279         2        1        1       1 1.33  -0.017243702      1 #> 1280         2        1        1       1 0.54   2.568832027      2 #> 1281         2        1       -1       0 1.93   1.499661417      2 #> 1282         2        1        1       1 0.52   3.781945180      2 #> 1283         2        1        1       1 0.45   5.826146446      2 #> 1284         2        1        1       1 0.56   6.091532272      2 #> 1285         2        1       -1       0 1.38   5.434829295      2 #> 1286         2        1        1       1 0.24   4.459041918      2 #> 1287         2        1       -1       0 4.75 -12.222147238      1 #> 1288         2        1        1       1 0.34   1.553224562      2 #> 1289         2        1        1       1 3.88   3.263021450      2 #> 1290         2        1        1       1 0.46   2.871823702      2 #> 1291         2        1        1       1 0.34   4.062375947      2 #> 1292         2        1        1       1 1.46   4.981448935      2 #> 1293         2        1        1       1 1.06   8.192894206      2 #> 1294         2        1        1       1 0.50   5.383707509      2 #> 1295         2        1        1       1 0.70   4.929009185      2 #> 1296         2        1        1       1 0.52  -0.611863337      1 #> 1297         2        1        1       1 3.01   2.202767113      2 #> 1298         2        1        1       1 0.71   5.518890412      2 #> 1299         2        1        1       1 0.50   5.131369456      2 #> 1300         2        1        1       1 2.34   0.948059649      2 #> 1301         2        1        1       1 0.34  10.306680006      2 #> 1302         2        1        1       1 1.48   7.207310550      2 #> 1303         2        1       -1       0 1.79  -0.612666191      1 #> 1304         2        1        1       1 0.44  -2.204495556      1 #> 1305         2        1        1       1 0.69   1.400822278      2 #> 1306         2        1        1       1 5.21   7.753035679      2 #> 1307         2        1        1       1 0.66   0.940927062      2 #> 1308         2        1        1       1 1.41   6.558063542      2 #> 1309         2        1        1       1 1.03  -0.378709496      1 #> 1310         2        1        1       1 0.97   7.551842999      2 #> 1311         2        1        1       1 0.33   8.506593921      2 #> 1312         2        1        1       1 0.51   8.781518331      2 #> 1313         2        1       -1       0 0.67   4.286625575      2 #> 1314         2        1        1       1 0.55   5.261220205      2 #> 1315         2        1        1       1 0.32   2.513697937      2 #> 1316         2        1        1       1 0.41   1.482978776      2 #> 1317         2        1        1       1 0.77   4.093275992      2 #> 1318         2        1        1       1 1.16   7.884605613      2 #> 1319         2        1        1       1 0.67   3.615621110      2 #> 1320         2        1        1       1 0.64   2.468356000      2 #> 1321         2        1        1       1 2.40   8.734738022      2 #> 1322         2        1        1       1 5.38  -2.989692758      1 #> 1323         2        1        1       1 0.49   2.681649842      2 #> 1324         2        1        1       1 1.35   4.450176571      2 #> 1325         2        1        1       1 1.37   3.666189925      2 #> 1326         2        1        1       1 0.32   5.103750652      2 #> 1327         2        1        1       1 1.67  -1.689039039      1 #> 1328         2        1       -1       0 0.63   1.600171869      2 #> 1329         2        1        1       1 1.49   0.510169523      1 #> 1330         2        1        1       1 3.88  -1.139250639      1 #> 1331         2        1        1       1 1.06   2.011511265      2 #> 1332         2        1        1       1 0.38   5.567911975      2 #> 1333         2        1        1       1 0.22   4.196074768      2 #> 1334         2        1        1       1 2.81   7.010034310      2 #> 1335         2        1        1       1 1.19   3.181388110      2 #> 1336         2        1        1       1 0.55   3.439266740      2 #> 1337         2        1        1       1 1.08   5.632511788      2 #> 1338         2        1        1       1 0.36   2.255950231      2 #> 1339         2        1        1       1 1.46   1.817575575      2 #> 1340         2        1       -1       0 1.02   3.867633503      2 #> 1341         2        1        1       1 0.89   7.235533960      2 #> 1342         2        1       -1       0 1.89   2.982239913      2 #> 1343         2        1        1       1 0.37   6.620553114      2 #> 1344         2        1        1       1 1.12   6.498710088      2 #> 1345         2        1        1       1 0.85   5.048438814      2 #> 1346         2        1        1       1 0.73   0.817585642      2 #> 1347         2        1        1       1 0.30   4.578972150      2 #> 1348         2        1        1       1 0.62   3.770559886      2 #> 1349         2        1        1       1 0.76   5.946036260      2 #> 1350         2        1        1       1 1.14   5.770639641      2 #> 1351         2        1        1       1 0.83   8.350199796      2 #> 1352         2        1        1       1 0.55   3.758800413      2 #> 1353         2        1        1       1 2.05   0.874992035      2 #> 1354         2        1        1       1 0.82   5.294793498      2 #> 1355         2        1        1       1 0.35   3.452944317      2 #> 1356         2        1        1       1 1.74  -0.883891210      1 #> 1357         2        1        1       1 2.58   7.167115131      2 #> 1358         2        1       -1       0 1.08   3.203221067      2 #> 1359         2        1        1       1 0.44   3.604296082      2 #> 1360         2        1        1       1 1.35   3.311091117      2 #> 1361         2        1        1       1 0.46   3.936496901      2 #> 1362         2        1        1       1 0.46   1.674775063      2 #> 1363         2        1        1       1 1.38  10.295651501      2 #> 1364         2        1        1       1 0.54   1.339762573      2 #> 1365         2        1        1       1 0.61   6.876436309      2 #> 1366         2        1        1       1 2.72  10.387735038      2 #> 1367         2        1        1       1 1.03   4.268279819      2 #> 1368         2        1        1       1 0.88   3.585694267      2 #> 1369         2        1        1       1 0.60   3.946462675      2 #> 1370         2        1        1       1 0.40  -1.510231432      1 #> 1371         2        1        1       1 0.67   0.414314008      1 #> 1372         2        1        1       1 1.78   4.945232975      2 #> 1373         2        1        1       1 0.56   4.735317488      2 #> 1374         2        1        1       1 1.63   7.710198323      2 #> 1375         2        1       -1       0 2.09   9.624397949      2 #> 1376         2        1        1       1 0.51   5.415154100      2 #> 1377         2        1        1       1 0.75   5.469597190      2 #> 1378         2        1       -1       0 1.12   4.202971659      2 #> 1379         2        1       -1       0 2.24   4.886407837      2 #> 1380         2        1        1       1 0.97   5.466925118      2 #> 1381         2        1        1       1 0.61   0.791805518      1 #> 1382         2        1        1       1 0.71   2.449760875      2 #> 1383         2        1        1       1 0.94  -2.603170796      1 #> 1384         2        1       -1       0 1.75   0.740068092      1 #> 1385         2        1        1       1 1.36   3.990796160      2 #> 1386         2        1        1       1 0.29   3.499308167      2 #> 1387         2        1        1       1 0.55   5.801702671      2 #> 1388         2        1        1       1 1.11   1.612742191      2 #> 1389         2        1        1       1 0.21   1.236318259      2 #> 1390         2        1       -1       0 1.07   1.691605159      2 #> 1391         2        1        1       1 0.76   0.920574705      2 #> 1392         2        1        1       1 0.63   1.819113519      2 #> 1393         2        1        1       1 1.22   9.186531042      2 #> 1394         2        1        1       1 1.82   3.724542817      2 #> 1395         2        1        1       1 0.69   2.736300889      2 #> 1396         2        1        1       1 0.75   2.034243360      2 #> 1397         2        1       -1       0 2.24   7.381039775      2 #> 1398         2        1       -1       0 3.16  -1.149800429      1 #> 1399         2        1        1       1 1.13   6.394927607      2 #> 1400         2        1        1       1 0.83   1.588248722      2 #> 1401         2        1        1       1 1.06   1.999434092      2 #> 1402         2        1        1       1 0.55   4.746528684      2 #> 1403         2        1       -1       0 1.08   1.630258372      2 #> 1404         2        1        1       1 0.90   4.245643732      2 #> 1405         2        1        1       1 1.98  -1.926320756      1 #> 1406         2        1        1       1 0.35  -0.009970669      1 #> 1407         2        1        1       1 0.34   0.858247028      2 #> 1408         2        1       -1       0 2.08   5.473523393      2 #> 1409         2        1        1       1 0.77   3.081428946      2 #> 1410         2        1        1       1 0.40   5.001989697      2 #> 1411         2        1        1       1 0.36   2.662468069      2 #> 1412         2        1        1       1 1.35   2.012374659      2 #> 1413         2        1        1       1 2.33   7.362521377      2 #> 1414         2        1        1       1 0.63   5.924850825      2 #> 1415         2        1        1       1 0.90   5.277915216      2 #> 1416         2        1        1       1 0.42   3.782606277      2 #> 1417         2        1        1       1 0.45   6.765055743      2 #> 1418         2        1        1       1 2.85   4.529184176      2 #> 1419         2        1        1       1 1.19   3.418700732      2 #> 1420         2        1        1       1 0.50   8.630729771      2 #> 1421         2        1        1       1 2.29   0.010162388      1 #> 1422         2        1        1       1 0.97   4.359224640      2 #> 1423         2        1       -1       0 3.07   7.972416286      2 #> 1424         2        1        1       1 0.90   6.840547856      2 #> 1425         2        1        1       1 0.28  -1.938367619      1 #> 1426         2        1        1       1 0.29   2.213652423      2 #> 1427         2        1       -1       0 1.91  11.564731627      2 #> 1428         2        1        1       1 0.61   4.663844554      2 #> 1429         2        1        1       1 0.66   5.855630781      2 #> 1430         2        1        1       1 1.43  10.699643162      2 #> 1431         2        1        1       1 0.28   1.194085101      2 #> 1432         2        1        1       1 1.03   5.500004301      2 #> 1433         2        1        1       1 0.96   5.280838424      2 #> 1434         2        1        1       1 1.38  10.508735779      2 #> 1435         2        1        1       1 0.28   3.696408684      2 #> 1436         2        1        1       1 0.74   8.534594584      2 #> 1437         2        1        1       1 0.84   4.723257130      2 #> 1438         2        1        1       1 1.17  -4.948204752      1 #> 1439         2        1        1       1 0.67   0.991772330      2 #> 1440         2        1        1       1 0.50   6.454634148      2 #> 1441         2        1        1       1 0.62   2.666126999      2 #> 1442         2        1        1       1 2.26   6.795904150      2 #> 1443         2        1        1       1 1.09   4.391885450      2 #> 1444         2        1       -1       0 0.62  -1.161696394      1 #> 1445         2        1        1       1 0.93   0.493490954      1 #> 1446         2        1       -1       0 1.95   1.131026893      2 #> 1447         2        1        1       1 0.72   1.725842759      2 #> 1448         2        1       -1       0 2.89   7.135859045      2 #> 1449         2        1        1       1 2.17   9.489085963      2 #> 1450         2        1        1       1 0.79   2.032780606      2 #> 1451         2        1        1       1 1.01   1.917599251      2 #> 1452         2        1        1       1 0.26   1.958947804      2 #> 1453         2        1        1       1 2.15   4.442048262      2 #> 1454         2        1        1       1 0.34   1.730034081      2 #> 1455         2        1        1       1 1.47   6.334491271      2 #> 1456         2        1        1       1 1.21   6.383563176      2 #> 1457         2        1       -1       0 1.03   2.513738140      2 #> 1458         2        1       -1       0 1.12  -0.082460364      1 #> 1459         2        1        1       1 1.03   1.227829543      2 #> 1460         2        1        1       1 2.21   3.305104515      2 #> 1461         2        1        1       1 1.71   3.662938489      2 #> 1462         2        1        1       1 1.09   7.690923344      2 #> 1463         2        1        1       1 1.51  12.829257434      2 #> 1464         2        1        1       1 1.38   2.150321837      2 #> 1465         2        1        1       1 1.47   8.259352764      2 #> 1466         2        1        1       1 0.78   3.718020969      2 #> 1467         2        1        1       1 0.94   2.908813673      2 #> 1468         2        1        1       1 1.26   2.976350032      2 #> 1469         2        1        1       1 6.50   7.142337834      2 #> 1470         2        1        1       1 2.38   2.033881258      2 #> 1471         2        1        1       1 0.54   1.865919333      2 #> 1472         2        1        1       1 1.89   7.769599941      2 #> 1473         2        1        1       1 0.48   6.136963135      2 #> 1474         2        1        1       1 0.39   6.302079803      2 #> 1475         2        1        1       1 1.75   7.272449034      2 #> 1476         2        1       -1       0 1.21   1.122935813      2 #> 1477         2        1        1       1 2.48  -2.772433610      1 #> 1478         2        1        1       1 2.59   5.325496931      2 #> 1479         2        1        1       1 1.37   4.495406594      2 #> 1480         2        1        1       1 0.34   2.240809061      2 #> 1481         2        1        1       1 1.51   6.518977775      2 #> 1482         2        1       -1       0 1.36   1.616332876      2 #> 1483         2        1        1       1 0.93   5.562045858      2 #> 1484         2        1        1       1 0.33   2.003931513      2 #> 1485         2        1        1       1 1.58   3.157250482      2 #> 1486         2        1        1       1 0.35   1.791410773      2 #> 1487         2        1        1       1 2.08   8.601855192      2 #> 1488         2        1        1       1 3.37  10.171365516      2 #> 1489         2        1        1       1 0.51  -1.039803398      1 #> 1490         2        1        1       1 1.84   6.296783961      2 #> 1491         2        1        1       1 0.69   2.920705740      2 #> 1492         2        1        1       1 1.52   4.002298923      2 #> 1493         2        1       -1       0 0.61   0.890533938      2 #> 1494         2        1       -1       0 0.50  -1.069338576      1 #> 1495         2        1        1       1 1.08   1.420836442      2 #> 1496         2        1       -1       0 0.94   0.307044537      1 #> 1497         2        1        1       1 0.69  -0.056286146      1 #> 1498         2        1        1       1 0.78   3.370316375      2 #> 1499         2        1        1       1 0.68   5.884903612      2 #> 1500         2        1       -1       0 0.39   6.726931558      2 #> 1501         2        1        1       1 0.27   7.044808639      2 #> 1502         2        1        1       1 1.76   3.479992516      2 #> 1503         2        1        1       1 0.39   3.101685457      2 #> 1504         2        1        1       1 0.51   3.556201751      2 #> 1505         2        1        1       1 1.53   7.663567706      2 #> 1506         2        1        1       1 1.78  -0.961876537      1 #> 1507         2        1        1       1 0.74   0.442368029      1 #> 1508         2        1        1       1 0.48   3.348683221      2 #> 1509         2        1        1       1 1.60   4.378742696      2 #> 1510         2        1        1       1 1.25   5.667482826      2 #> 1511         2        1       -1       0 0.60   1.263599747      2 #> 1512         2        1        1       1 1.66   1.736169144      2 #> 1513         2        1        1       1 0.23   0.707944442      1 #> 1514         2        1        1       1 0.47   1.718773725      2 #> 1515         2        1        1       1 0.62   1.347044372      2 #> 1516         2        1        1       1 0.39   2.709705747      2 #> 1517         2        1        1       1 1.08   3.303010921      2 #> 1518         2        1       -1       0 1.74   7.844539426      2 #> 1519         2        1        1       1 1.50   4.846265730      2 #> 1520         2        1        1       1 0.56   1.126473542      2 #> 1521         2        1        1       1 0.89  -3.781368724      1 #> 1522         2        1        1       1 0.34   2.502286384      2 #> 1523         2        1        1       1 2.54  -0.384966573      1 #> 1524         2        1        1       1 1.00   2.168926129      2 #> 1525         2        1        1       1 2.57   0.239017252      1 #> 1526         2        1        1       1 0.91   3.639246445      2 #> 1527         2        1        1       1 0.70   1.549902681      2 #> 1528         2        1        1       1 0.46   5.074358413      2 #> 1529         2        1       -1       0 1.71   7.323874188      2 #> 1530         2        1        1       1 1.35   2.469301882      2 #> 1531         2        1        1       1 1.92   7.061011004      2 #> 1532         2        1        1       1 0.39   0.681697861      1 #> 1533         2        1        1       1 1.24   2.359688578      2 #> 1534         2        1        1       1 0.53   5.943443898      2 #> 1535         2        1        1       1 0.76   2.185659795      2 #> 1536         2        1        1       1 0.83   0.546767567      1 #> 1537         2        1        1       1 0.61   1.836131022      2 #> 1538         2        1        1       1 1.11   6.343972071      2 #> 1539         2        1        1       1 2.00  10.947629344      2 #> 1540         2        1        1       1 1.50   9.519703426      2 #> 1541         2        1        1       1 0.64   2.598220210      2 #> 1542         2        1        1       1 0.26   3.457762954      2 #> 1543         2        1        1       1 0.40  -0.125278946      1 #> 1544         2        1        1       1 1.09  -1.348057660      1 #> 1545         2        1        1       1 1.33   5.766390038      2 #> 1546         2        1        1       1 0.49   3.428415738      2 #> 1547         2        1        1       1 0.81   3.205639531      2 #> 1548         2        1       -1       0 1.30   7.068288335      2 #> 1549         2        1        1       1 0.55   5.011572113      2 #> 1550         2        1       -1       0 0.43   1.648417562      2 #> 1551         2        1       -1       0 3.48   3.500597491      2 #> 1552         2        1        1       1 1.28   1.020473081      2 #> 1553         2        1        1       1 0.93   1.827517892      2 #> 1554         2        1        1       1 0.77   7.719561469      2 #> 1555         2        1        1       1 0.85   5.079278356      2 #> 1556         2        1        1       1 0.35   2.815964483      2 #> 1557         2        1       -1       0 1.86   9.219153167      2 #> 1558         2        1       -1       0 0.73   5.330958628      2 #> 1559         2        1        1       1 0.39   4.925868065      2 #> 1560         2        1       -1       0 0.30   3.815509989      2 #> 1561         2        1        1       1 1.08   1.612125727      2 #> 1562         2        1        1       1 1.95  -0.269938406      1 #> 1563         2        1        1       1 0.65   0.757047473      1 #> 1564         2        1        1       1 0.88  -2.119617096      1 #> 1565         2        1        1       1 0.51   6.500051693      2 #> 1566         2        1        1       1 3.27   3.506174782      2 #> 1567         2        1       -1       0 2.03   2.798447699      2 #> 1568         2        1        1       1 1.41   3.518999288      2 #> 1569         2        1        1       1 2.67   3.969306852      2 #> 1570         2        1       -1       0 1.88   9.927302327      2 #> 1571         2        1        1       1 1.83   0.379245185      1 #> 1572         2        1        1       1 2.12   1.128833066      2 #> 1573         2        1        1       1 0.47   2.180443901      2 #> 1574         2        1       -1       0 5.36   6.777983209      2 #> 1575         2        1        1       1 0.48   2.121747982      2 #> 1576         2        1        1       1 1.03  10.646662842      2 #> 1577         2        1        1       1 0.82   6.036103266      2 #> 1578         2        1        1       1 1.14   7.441313887      2 #> 1579         2        1        1       1 0.43   2.919771967      2 #> 1580         2        1        1       1 1.41   4.527487661      2 #> 1581         2        1        1       1 0.35   2.941401769      2 #> 1582         2        1        1       1 0.30   2.984306485      2 #> 1583         2        1       -1       0 1.39  10.872598155      2 #> 1584         2        1        1       1 2.58   7.409144907      2 #> 1585         2        1        1       1 0.50   6.461951404      2 #> 1586         2        1        1       1 0.39   5.772359481      2 #> 1587         2        1        1       1 0.84   4.311121336      2 #> 1588         2        1        1       1 0.35   4.708259540      2 #> 1589         2        1        1       1 1.30   4.407324800      2 #> 1590         2        1        1       1 0.73   6.981503545      2 #> 1591         2        1       -1       0 2.80  -3.385959604      1 #> 1592         2        1        1       1 0.78   4.205112932      2 #> 1593         2        1       -1       0 1.63   2.769075242      2 #> 1594         2        1        1       1 2.16   8.432493653      2 #> 1595         2        1        1       1 0.50   4.784314756      2 #> 1596         2        1        1       1 2.21   5.263487282      2 #> 1597         2        1        1       1 1.77   4.354231761      2 #> 1598         2        1        1       1 1.41   6.868092796      2 #> 1599         2        1        1       1 2.44   3.710668909      2 #> 1600         2        1       -1       0 0.55   3.155035304      2 #>  #> $gamma #> $gamma$condition #> # A tibble: 2 × 2 #>   correct Gamma #>     <dbl> <dbl> #> 1       0 0.741 #> 2       1 0.745 #>  #> $gamma$rt #> # A tibble: 2 × 2 #>   correct   Gamma #>     <dbl>   <dbl> #> 1       0 -0.0648 #> 2       1 -0.110  #>  #> $gamma$correct #> # A tibble: 2 × 2 #>   condition    Gamma #>       <int>    <dbl> #> 1         1 -0.00404 #> 2         2  0.00552 #>  #> $gamma$rt_bycondition #> # A tibble: 2 × 2 #>   condition   Gamma #>       <int>   <dbl> #> 1         1 -0.0387 #> 2         2 -0.0976 #>  #> $gamma$rt_byconditionbycorrect #> # A tibble: 4 × 3 #>   condition correct   Gamma #>       <int>   <dbl>   <dbl> #> 1         1       0 -0.0637 #> 2         1       1 -0.0176 #> 3         2       0 -0.0934 #> 4         2       1 -0.0984 #>  #>  # }"},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"dynconfir-110-september-2025","dir":"Changelog","previous_headings":"","what":"dynConfiR 1.1.0 (September 2025)","title":"dynConfiR 1.1.0 (September 2025)","text":"CRAN release: 2025-09-19 bug fix example throw error ggplot 4.0.0 New model implemented: multiple-threshold correlated log-normal race model (MTLNR) (see Reynolds et al.; 2020; JMP)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"dynconfir-100-may-2025","dir":"Changelog","previous_headings":"","what":"dynConfiR 1.0.0 (May 2025)","title":"dynConfiR 1.0.0 (May 2025)","text":"CRAN release: 2025-05-08 change precision argument models. now integer argument representing approximate precision density digits. Default 6 models density functions. Added precision argument fitting functions. default 3 renamed DDMConf model DDConf align published literature renamed functions dynaViTE model (ddynaViTE rdynaViTE); Added functions quantitative model comparison (see ?group_BMS?) functions dWEV rWEV kept now maybe removed future releases package, produce deprecation warning now Bug fix fitting Race Models time-dependend confidence variable. , weight ‘wrt’ bound weight ‘wx’ bug. Added UserInterrupt() call longer-running C-functions.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"dynconfir-004-january-2024","dir":"Changelog","previous_headings":"","what":"dynConfiR 0.0.4 (January 2024)","title":"dynConfiR 0.0.4 (January 2024)","text":"CRAN release: 2024-01-29 Fixed CRAN note improved robustness fitting functions, simulations. Also improved initial parameter sets model fitting.","code":""},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"dynconfir-003-april-2023","dir":"Changelog","previous_headings":"","what":"dynConfiR 0.0.3 (April 2023)","title":"dynConfiR 0.0.3 (April 2023)","text":"CRAN release: 2023-06-27","code":""},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"improvements-0-0-3","dir":"Changelog","previous_headings":"","what":"Improvements","title":"dynConfiR 0.0.3 (April 2023)","text":"added dynaViTE model (generalization dynWEV time-dependent confidence variable), includes additional lambda can also fitted improved fitting procedure dynaViTE/dynWEV 2DSD: confidence thresholds starting parameters initial grid search now estimated using simulations; decreases size initial grid drastically, improving initial values adapted code changes new dplyr release (1.1.1)","code":""},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"dynconfir-002-december-2022","dir":"Changelog","previous_headings":"","what":"dynConfiR 0.0.2 (December 2022)","title":"dynConfiR 0.0.2 (December 2022)","text":"CRAN release: 2022-12-07","code":""},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"improvements-0-0-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"dynConfiR 0.0.2 (December 2022)","text":"added DDMConf model (density: dDDMConf, RNG: rDDMConf), also fitting prediction. d2DSD ddynaViTE added argument lambda. DynWEV 2DSD generalized confidence measure explicitly depending decision time. lambda controls power decision time confidence measure divided. d2DSD ddynaViTE added argument stop_on_zero: calculation likelihoods, useful stop soon one probability 0, since likelihood 0. included starting point drift rate variation IRMt (experimental!, see dIRM2) fitting 2DSD dynWEV: improved finding stating values confidence thresholds. many bug fixes increased robustness","code":""},{"path":"https://sehellmann.github.io/dynConfiR/news/index.html","id":"dynconfir-001-may-2022","dir":"Changelog","previous_headings":"","what":"dynConfiR 0.0.1 (May 2022)","title":"dynConfiR 0.0.1 (May 2022)","text":"CRAN release: 2022-05-27 First CRAN release Version 0.0.1","code":""}]
